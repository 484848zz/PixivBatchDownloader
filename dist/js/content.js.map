{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/ts/content.ts","webpack:///./src/ts/modules/API.ts","webpack:///./src/ts/modules/BookmarksAddTag.ts","webpack:///./src/ts/modules/Colors.ts","webpack:///./src/ts/modules/ConvertUgoira.ts","webpack:///./src/ts/modules/CrawlAreaRankingPage.ts","webpack:///./src/ts/modules/CrawlBookmarkDetailPage.ts","webpack:///./src/ts/modules/CrawlBookmarkNewIllustPage.ts","webpack:///./src/ts/modules/CrawlDiscoverPage.ts","webpack:///./src/ts/modules/CrawlIndexPage.ts","webpack:///./src/ts/modules/CrawlNewIllustPage.ts","webpack:///./src/ts/modules/CrawlPageBase.ts","webpack:///./src/ts/modules/CrawlPixivisionPage.ts","webpack:///./src/ts/modules/CrawlRankingPage.ts","webpack:///./src/ts/modules/CrawlSearchPage.ts","webpack:///./src/ts/modules/CrawlUserPage.ts","webpack:///./src/ts/modules/CrawlWorksPage.ts","webpack:///./src/ts/modules/DOM.ts","webpack:///./src/ts/modules/DeleteWorks.ts","webpack:///./src/ts/modules/Download.ts","webpack:///./src/ts/modules/DownloadControl.ts","webpack:///./src/ts/modules/EVT.ts","webpack:///./src/ts/modules/FileName.ts","webpack:///./src/ts/modules/Filter.ts","webpack:///./src/ts/modules/ImgViewer.ts","webpack:///./src/ts/modules/InitAreaRankingPage.ts","webpack:///./src/ts/modules/InitBookmarkDetailPage.ts","webpack:///./src/ts/modules/InitBookmarkNewIllustPage.ts","webpack:///./src/ts/modules/InitCrawlProcess.ts","webpack:///./src/ts/modules/InitDiscoverPage.ts","webpack:///./src/ts/modules/InitIndexPage.ts","webpack:///./src/ts/modules/InitNewIllustPage.ts","webpack:///./src/ts/modules/InitPageBase.ts","webpack:///./src/ts/modules/InitPixivisionPage.ts","webpack:///./src/ts/modules/InitRankingPage.ts","webpack:///./src/ts/modules/InitSearchPage.ts","webpack:///./src/ts/modules/InitUserPage.ts","webpack:///./src/ts/modules/InitWorksPage.ts","webpack:///./src/ts/modules/Lang.ts","webpack:///./src/ts/modules/Log.ts","webpack:///./src/ts/modules/Option.ts","webpack:///./src/ts/modules/Output.ts","webpack:///./src/ts/modules/PageInfo.ts","webpack:///./src/ts/modules/PageType.ts","webpack:///./src/ts/modules/QuickBookmark.ts","webpack:///./src/ts/modules/Store.ts","webpack:///./src/ts/modules/Support.ts","webpack:///./src/ts/modules/TitleBar.ts","webpack:///./src/ts/modules/UI.ts","webpack:///./src/ts/modules/langText.ts"],"names":[],"mappings":";QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;;AClFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA,2BAA2B;AAC3B,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AAC0B;AACU;AACD;AACT;AACC;;;;;;;;;;;;;ACfaAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,uDAAuD,GAAG,yBAAyB,eAAe,UAAU,OAAO,kBAAkB,uBAAuB,OAAO,cAAc;AACjL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE;AACnE,aAAa;AACb;AACA,yDAAyD,GAAG,YAAY,SAAS,iBAAiB,KAAK,MAAM,MAAM;AACnH,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,uDAAuD,GAAG;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,GAAG;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,GAAG,GAAG,KAAK,WAAW,IAAI,UAAU,OAAO,SAAS,OAAO;AAClH;AACA;AACA;AACA;AACA,yDAAyD,GAAG;AAC5D;AACA;AACA;AACA;AACA,yDAAyD,GAAG;AAC5D;AACA;AACA;AACA;AACA;AACA,yDAAyD,GAAG;AAC5D;AACA;AACA;AACA;AACA;AACA,4DAA4D,YAAY,KAAK,SAAS;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uEAAuE,GAAG,uBAAuB,OAAO;AACxG;AACA;AACA;AACA,oEAAoE;AACpE;AACA,uDAAuD,KAAK,GAAG,yBAAyB,QAAQ,yBAAyB,KAAK,EAAE;AAChI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE,cAAc,SAAS,aAAa,QAAQ,YAAY,OAAO,WAAW;AAC5I;AACA;AACA;AACA;AACA;AACA,2CAA2C,KAAK,SAAS,EAAE;AAC3D;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACe;;;;;;;;;;;;;AClQf;AAAA;AAAA;AAAA;AAA4B;AACA;AAC5B;AACA;AACA;AACA,6BAA6B;AAC7B;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA,YAAY,wCAAG,iBAAiB,wCAAG;AACnC,YAAY,wCAAG,iBAAiB,wCAAG;AACnC;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,wCAAG;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,wCAAG;AACjB;AACA;AACA,sCAAsC,MAAM,KAAK,eAAe;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC2B;;;;;;;;;;;;;ACtG3B;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACkB;;;;;;;;;;;;;ACNlB;AAAA;AAAA;AAAA;AAAA;AAC4B;AACA;AAC5B;AACA;AACA;AACA,gCAAgC;AAChC,uBAAuB;AACvB,0BAA0B;AAC1B;AACA,gCAAgC,wCAAG;AACnC;AACA,SAAS;AACT,SAAS,wCAAG,uBAAuB,wCAAG;AACtC;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,QAAQ,wCAAG,MAAM,wCAAG;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,oBAAoB;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,qBAAqB;AACrB,iBAAiB;AACjB,aAAa;AACb,gBAAgB,wCAAG;AACnB;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,2BAA2B;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,+BAA+B,wBAAwB;AACvD;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACqB;;;;;;;;;;;;;AC5LrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACgD;AACd;AACN;AACI;AAChC,mCAAmC,4DAAa;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,8CAAM;AACtB,2BAA2B,wCAAG;AAC9B,gBAAgB,4CAAK;AACrB;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,eAAe;AACf;AACgC;;;;;;;;;;;;;ACjChC;AAAA;AAAA;AAAA;AAAA;AAAA;AACgD;AACpB;AACI;AAChC,sCAAsC,4DAAa;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,wCAAG,oBAAoB,wCAAG;AACnD;AACA,YAAY,4CAAK;AACjB;AACA;AACA;AACA,4BAA4B;AAC5B,eAAe;AACf;AACmC;;;;;;;;;;;;;AC1BnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACgD;AACd;AACJ;AACF;AACI;AACJ;AAC5B,yCAAyC,4DAAa;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,wCAAG,SAAS,0CAAI;AACxB;AACA;AACA;AACA,kBAAkB,wCAAG;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,wCAAG;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,8CAAM;AACtB,gBAAgB,4CAAK;AACrB;AACA;AACA;AACA,QAAQ,wCAAG,KAAK,0CAAI;AACpB;AACA;AACA;AACA,YAAY,wCAAG,KAAK,0CAAI;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACsC;;;;;;;;;;;;;AC1EtC;AAAA;AAAA;AAAA;AAAA;AAAA;AACgD;AACpB;AACI;AAChC,gCAAgC,4DAAa;AAC7C,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,wCAAG;AAC1B,YAAY,4CAAK;AACjB,SAAS;AACT;AACA;AACA,4BAA4B;AAC5B,eAAe;AACf;AAC6B;;;;;;;;;;;;;ACpB7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACgD;AAClB;AACE;AACJ;AAC5B,6BAA6B,4DAAa;AAC1C;AACA;AACA,QAAQ,wCAAG,KAAK,0CAAI;AACpB;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,wCAAG,OAAO,0CAAI;AAC9B;AACA;AACA,gBAAgB,4CAAK;AACrB;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,eAAe;AACf;AAC0B;;;;;;;;;;;;;AChC1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACgD;AACd;AACJ;AACF;AACI;AACJ;AAC5B,iCAAiC,4DAAa;AAC9C;AACA;AACA;AACA,2BAA2B;AAC3B,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,wCAAG,SAAS,0CAAI;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,wCAAG;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,wCAAG;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,8CAAM;AACtB,gBAAgB,4CAAK;AACrB;AACA;AACA,QAAQ,wCAAG,KAAK,0CAAI;AACpB;AACA;AACA;AACA,YAAY,wCAAG,KAAK,0CAAI;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,eAAe;AACf;AAC8B;;;;;;;;;;;;;ACtG9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkC;AACJ;AACF;AACI;AACJ;AACA;AACF;AACY;AACA;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,oCAAoC;AACpC,gCAAgC;AAChC,6BAA6B;AAC7B,6BAA6B;AAC7B,kCAAkC;AAClC,qCAAqC;AACrC,mDAAmD;AACnD,qCAAqC;AACrC;AACA;AACA;AACA,QAAQ,wCAAG,MAAM,wCAAG;AACpB,oBAAoB,0CAAI;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,sCAAE;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,wCAAG;AACf;AACA;AACA,YAAY,wCAAG;AACf;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,wCAAG,qBAAqB,sCAAE;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,wCAAG,qBAAqB,sCAAE;AAChD;AACA;AACA;AACA;AACA,YAAY,wCAAG,MAAM,wCAAG;AACxB,wBAAwB,0CAAI,4BAA4B,0CAAI;AAC5D,YAAY,wCAAG;AACf;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA,YAAY,wCAAG,MAAM,wCAAG;AACxB;AACA;AACA;AACA;AACA,YAAY,wCAAG,MAAM,wCAAG;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,sCAAE;AAC7C;AACA,YAAY,wCAAG,SAAS,0CAAI;AAC5B;AACA;AACA;AACA;AACA,YAAY,wCAAG,SAAS,0CAAI;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,4CAAK;AAClB,yBAAyB,0CAAI;AAC7B;AACA;AACA,QAAQ,wCAAG,MAAM,wCAAG;AACpB,QAAQ,wCAAG;AACX,QAAQ,wCAAG,SAAS,0CAAI;AACxB,QAAQ,kDAAQ;AAChB,QAAQ,sCAAE;AACV;AACA,QAAQ,8CAAM;AACd;AACA,cAAc,kDAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,4CAAK;AACjB;AACA;AACA,QAAQ,wCAAG,KAAK,0CAAI,mBAAmB,4CAAK;AAC5C,YAAY,4CAAK;AACjB,+BAA+B,4CAAK;AACpC;AACA;AACA;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,4CAAK;AACxB;AACA;AACA;AACA,yBAAyB,wCAAG;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC,uCAAuC;AACvC,uCAAuC;AACvC,sCAAsC;AACtC,wBAAwB;AACxB,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,8CAAM;AAClB;AACA;AACA,2CAA2C;AAC3C,uCAAuC;AACvC,uCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,EAAE,GAAG,EAAE,GAAG,EAAE;AACxC,0BAA0B;AAC1B,2BAA2B,4CAAK;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD;AAClD;AACA;AACA;AACA,gBAAgB,4CAAK;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,mCAAmC,wCAAG;AACtC;AACA;AACA;AACA;AACA;AACA,4BAA4B,sCAAE,yBAAyB;AACvD,gBAAgB,4CAAK;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,4CAAK;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,4CAAK;AACjB;AACA;AACA;AACA,QAAQ,wCAAG,KAAK,0CAAI,sBAAsB,4CAAK;AAC/C,QAAQ,wCAAG,KAAK,0CAAI;AACpB,QAAQ,wCAAG,MAAM,wCAAG;AACpB;AACA,aAAa,4CAAK;AAClB,YAAY,sCAAE;AACd;AACA;AACA;AACA;AACA,QAAQ,wCAAG,OAAO,0CAAI;AACtB;AACA;AACA,4BAA4B,0CAAI;AAChC;AACA;AACA,4BAA4B,0CAAI;AAChC;AACA;AACA,4BAA4B,0CAAI;AAChC;AACA;AACA,4BAA4B,0CAAI;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,wCAAG,KAAK,0CAAI,sBAAsB,4CAAK;AAC/C;AACA;AACA;AACA,QAAQ,wCAAG,MAAM,wCAAG;AACpB,QAAQ,kDAAQ;AAChB,QAAQ,wCAAG,OAAO,0CAAI;AACtB,qBAAqB,0CAAI;AACzB;AACA;AACA,kBAAkB;AAClB;AACyB;;;;;;;;;;;;;ACrWzB;AAAA;AAAA;AAAA;AAAA;AACgD;AAChB;AAChC,kCAAkC,4DAAa;AAC/C;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA,iBAAiB;AACjB,4BAA4B;AAC5B;AACA;AACA,QAAQ,4CAAK;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,6DAA6D;AAC7D;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE;AACjE,oDAAoD;AACpD;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AAC+B;;;;;;;;;;;;;AC3F/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACgD;AACtB;AACQ;AACJ;AACF;AACI;AACJ;AAC5B,+BAA+B,4DAAa;AAC5C;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,0CAAI,qCAAqC,0CAAI;AAChG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,wCAAG;AAC9B,gCAAgC,wCAAG;AACnC,2BAA2B,wCAAG;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,wCAAG;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,uCAAuC;AACvC;AACA;AACA,gBAAgB,sCAAE;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,8CAAM;AACtB,gBAAgB,4CAAK;AACrB,gBAAgB,4CAAK;AACrB;AACA;AACA,QAAQ,wCAAG,KAAK,0CAAI;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,sCAAE;AACV;AACA,eAAe;AACf;AAC4B;;;;;;;;;;;;;AC5G5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACgD;AACd;AACJ;AACF;AACI;AACJ;AACA;AACU;AACZ;AAC1B,8BAA8B,4DAAa;AAC3C;AACA;AACA;AACA;AACA,iCAAiC;AACjC,oCAAoC;AACpC,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA,0BAA0B;AAC1B,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,eAAe;AAC1E;AACA;AACA;AACA;AACA;AACA,6FAA6F,cAAc;AAC3G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,WAAW;AACtD;AACA;AACA,6HAA6H,WAAW;AACxI;AACA;;AAEA;AACA,cAAc;;AAEd;AACA,cAAc;;AAEd;AACA;AACA;AACA,0BAA0B,WAAW;AACrC,0BAA0B,WAAW;AACrC,4CAA4C,gCAAgC;AAC5E;AACA,gBAAgB;AAChB;AACA;AACA;AACA,qCAAqC,SAAS;AAC9C;AACA;AACA;AACA;AACA,sFAAsF,eAAe;AACrG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE,WAAW,IAAI,WAAW;AAC9F;AACA;AACA;AACA;AACA,kFAAkF,YAAY;AAC9F;AACA,gEAAgE,YAAY;AAC5E,4CAA4C,UAAU;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,QAAQ,kCAAkC;AACvE,iBAAiB;AACjB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,YAAY,wCAAG,4CAA4C,wCAAG;AAC9D;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,sCAAsC,4CAAK;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,QAAQ,4CAAK;AACb,gCAAgC,wCAAG;AACnC;AACA,gCAAgC,wCAAG;AACnC,gCAAgC,wCAAG;AACnC,gCAAgC,wCAAG;AACnC,gCAAgC,wCAAG;AACnC;AACA;AACA,aAAa,4CAAK;AAClB,yBAAyB,0CAAI;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,sCAAE;AACV,QAAQ,wCAAG;AACX,iDAAiD;AACjD;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,wCAAG,MAAM,wCAAG;AACpB;AACA;AACA;AACA;AACA,QAAQ,4CAAK;AACb;AACA;AACA;AACA,YAAY,4CAAK;AACjB,SAAS;AACT;AACA;AACA,QAAQ,4CAAK;AACb,QAAQ,wCAAG,MAAM,wCAAG;AACpB;AACA;AACA;AACA,aAAa,4CAAK;AAClB,yBAAyB,0CAAI;AAC7B;AACA,QAAQ,wCAAG;AACX,QAAQ,8CAAM;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,8CAAM;AACzB,SAAS;AACT;AACA;AACA,mDAAmD,0CAAI,oCAAoC,0CAAI;AAC/F;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,wCAAG,eAAe,kDAAQ;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,wCAAG;AACnB;AACA;AACA;AACA;AACA,wBAAwB,wCAAG;AAC3B;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,8CAAM;AACtB,gBAAgB,4CAAK;AACrB;AACA;AACA;AACA,QAAQ,wCAAG,KAAK,0CAAI;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,wCAAG,KAAK,0CAAI;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,4CAAK,iBAAiB,wCAAG;AACjC,QAAQ,4CAAK,aAAa,wCAAG;AAC7B;AACA;AACA,mCAAmC,wCAAG;AACtC,mCAAmC,wCAAG;AACtC;AACA;AAC2B;;;;;;;;;;;;;AC/a3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACgD;AAClB;AACF;AACI;AACJ;AACA;AACA;AAC5B,4BAA4B,4DAAa;AACzC;AACA;AACA,yBAAyB;AACzB,4BAA4B;AAC5B,sBAAsB;AACtB,0BAA0B;AAC1B,+BAA+B;AAC/B,+BAA+B;AAC/B,wBAAwB;AACxB,sCAAsC;AACtC;AACA;AACA,sBAAsB,0CAAI;AAC1B;AACA,sBAAsB,0CAAI;AAC1B;AACA,mDAAmD,0CAAI;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA,wBAAwB,wCAAG,iCAAiC;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,wCAAG;AACnB;AACA;AACA;AACA,qBAAqB,wCAAG;AACxB;AACA;AACA;AACA,qBAAqB,wCAAG;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,wCAAG;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,wCAAG,MAAM,wCAAG;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,wCAAG;AAC5B;AACA;AACA;AACA;AACA,gBAAgB,wCAAG;AACnB;AACA;AACA;AACA;AACA,QAAQ,wCAAG,KAAK,0CAAI;AACpB;AACA,YAAY,wCAAG,KAAK,0CAAI;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,wCAAG,oBAAoB,wCAAG;AACtD;AACA;AACA;AACA;AACA,yBAAyB,wCAAG,2BAA2B,wCAAG;AAC1D;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA,yBAAyB,wCAAG,iBAAiB,wCAAG;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,4CAAK,UAAU,4CAAK;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,4CAAK,aAAa,wCAAG;AACjC;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA,YAAY,4CAAK,aAAa,wCAAG;AACjC;AACA;AACA;AACA,YAAY,4CAAK;AACjB;AACA;AACA;AACA,eAAe;AACf;AACyB;;;;;;;;;;;;;AC1QzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACgD;AACpB;AACE;AACF;AACI;AACJ;AAC5B,6BAA6B,4DAAa;AAC1C;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA,YAAY,4CAAK;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,0CAAI,oCAAoC,0CAAI;AACvG;AACA;AACA;AACA,2DAA2D,0CAAI,oCAAoC,0CAAI;AACvG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,4CAAK;AACtB;AACA,YAAY,4CAAK,aAAa,wCAAG;AACjC,YAAY,wCAAG,KAAK,0CAAI;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,wCAAG,oBAAoB,wCAAG;AACrD;AACA,6BAA6B,wCAAG;AAChC;AACA;AACA;AACA;AACA,gBAAgB,4CAAK;AACrB;AACA;AACA;AACA,gBAAgB,4CAAK;AACrB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,gBAAgB,4CAAK;AACrB;AACA,iBAAiB;AACjB;AACA;AACA;AACA,gBAAgB,4CAAK;AACrB;AACA,iBAAiB;AACjB;AACA,YAAY,4CAAK,UAAU,4CAAK;AAChC;AACA;AACA;AACA;AACA;AACA,yBAAyB,wCAAG,gBAAgB,wCAAG;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,4CAAK,UAAU,4CAAK;AAC5B,QAAQ,wCAAG,KAAK,0CAAI,qBAAqB,4CAAK;AAC9C;AACA;AACA;AACA,gCAAgC;AAChC,kCAAkC;AAClC;AACA,eAAe;AACf;AAC0B;;;;;;;;;;;;;ACxG1B;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,IAAI;AACvC;AACA;AACA;AACA;AACA,iEAAiE,IAAI;AACrE;AACA,iEAAiE,OAAO,IAAI,IAAI;AAChF;AACA;AACA;AACA;AACA;AACA,yCAAyC,IAAI;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,IAAI;AACjC;AACA;AACA;AACA;AACA;AACe;;;;;;;;;;;;;AC9Ef;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAC4B;AACE;AACI;AACN;AACF;AACM;AACJ;AAC5B;AACA;AACA,gCAAgC;AAChC,mCAAmC;AACnC,iCAAiC;AACjC,6BAA6B;AAC7B,yCAAyC,GAAG;AAC5C;AACA;AACA,gCAAgC,wCAAG;AACnC;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,4CAAK;AACpB;AACA;AACA,oDAAoD,EAAE;AACtD;AACA,QAAQ,sCAAE,iBAAiB,8CAAM,MAAM,0CAAI;AAC3C,sBAAsB,0CAAI;AAC1B;AACA;AACA,6BAA6B,0CAAI;AACjC;AACA,YAAY,sCAAE;AACd;AACA;AACA,SAAS;AACT;AACA;AACA,kDAAkD,EAAE;AACpD;AACA,QAAQ,sCAAE,iBAAiB,8CAAM,MAAM,0CAAI;AAC3C,sBAAsB,0CAAI;AAC1B;AACA;AACA,6BAA6B,0CAAI;AACjC;AACA,YAAY,sCAAE;AACd;AACA;AACA,SAAS;AACT;AACA;AACA,2CAA2C,EAAE;AAC7C;AACA,uBAAuB,sCAAE,iBAAiB,8CAAM,MAAM,0CAAI,+BAA+B,0CAAI;AAC7F;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,0CAAI;AACzC;AACA;AACA,oBAAoB,wCAAG;AACvB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,0CAAI;AACrC;AACA,gBAAgB,sCAAE;AAClB,aAAa;AACb;AACA;AACA,iCAAiC,0CAAI;AACrC;AACA;AACA;AACA;AACA;AACA,QAAQ,wCAAG,SAAS,0CAAI,iBAAiB,wCAAG;AAC5C;AACA;AACuB;;;;;;;;;;;;;ACzHvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAC4B;AACA;AACE;AACQ;AACA;AACM;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,wCAAG,sBAAsB,wCAAG;AACrC;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,iDAAiD,0BAA0B,GAAG,yBAAyB;AACvG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,kDAAQ;AAChB;AACA,2BAA2B,kDAAQ;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA,gCAAgC,0CAAI;AACpC,oBAAoB,wCAAG;AACvB,wCAAwC,IAAI;AAC5C;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,oBAAoB,wCAAG,MAAM,wCAAG;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,wDAAS;AAC9C;AACA;AACA;AACA,qCAAqC,wDAAS;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACoB;;;;;;;;;;;;;AC1IpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAC4B;AACI;AACJ;AACE;AACQ;AACJ;AACR;AACY;AACtC;AACA;AACA,mCAAmC;AACnC,qDAAqD;AACrD,2BAA2B;AAC3B,6BAA6B;AAC7B,2BAA2B;AAC3B,4BAA4B;AAC5B;AACA,4BAA4B;AAC5B,0DAA0D;AAC1D;AACA,0DAA0D;AAC1D,kCAAkC;AAClC,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,wCAAG;AACnC;AACA;AACA,SAAS;AACT,gCAAgC,wCAAG;AACnC;AACA;AACA,SAAS;AACT,gCAAgC,wCAAG;AACnC;AACA;AACA,mCAAmC,0CAAI;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,wCAAG,MAAM,wCAAG;AAC5B;AACA;AACA;AACA;AACA,gBAAgB,wCAAG,UAAU,YAAY,yBAAyB,QAAQ;AAC1E,gBAAgB,wCAAG,MAAM,wCAAG;AAC5B;AACA;AACA;AACA;AACA;AACA,gBAAgB,wCAAG,OAAO,0CAAI;AAC9B;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,4CAAK;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,4CAAK;AACrC,YAAY,wCAAG,MAAM,wCAAG;AACxB;AACA,kCAAkC,0CAAI;AACtC,YAAY,wCAAG,SAAS,0CAAI;AAC5B,YAAY,kDAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,0CAAI;AAClC;AACA,6BAA6B,4CAAK;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEAAoE,8CAAM,OAAO,KAAK,0CAAI,kBAAkB;AAC5G,0EAA0E,KAAK,0CAAI,kBAAkB;AACrG,mEAAmE,8CAAM,MAAM,KAAK,0CAAI,kBAAkB;AAC1G,8DAA8D,8CAAM,QAAQ,KAAK,0CAAI,kBAAkB;AACvG;AACA;AACA;AACA,MAAM,0CAAI;AACV,2CAA2C,0CAAI,kBAAkB;AACjE;AACA;AACA;AACA,yBAAyB,0CAAI,iBAAiB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,MAAM,MAAM,MAAM,MAAM,MAAM,GAAG,0CAAI,gBAAgB,MAAM,MAAM;AAClH;AACA;AACA;AACA;AACA;AACA,QAAQ,sCAAE;AACV;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,YAAY,wCAAG,MAAM,wCAAG;AACxB,SAAS;AACT;AACA;AACA;AACA;AACA,iBAAiB,4CAAK;AACtB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,4CAAK;AACjB;AACA;AACA,6BAA6B,sCAAE;AAC/B,8BAA8B,4CAAK;AACnC,YAAY,kDAAQ;AACpB;AACA;AACA,4BAA4B,4CAAK;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,4CAAK,qBAAqB,4CAAK;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,4CAAK;AAC7C,kDAAkD;AAClD;AACA;AACA;AACA;AACA,+BAA+B,gCAAgC;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,sCAAE;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C;AAC5C;AACA;AACA,YAAY,4CAAK;AACjB,kCAAkC,4CAAK;AACvC;AACA;AACA;AACA;AACA,QAAQ,wCAAG,MAAM,wCAAG;AACpB;AACA;AACA;AACA;AACA,uBAAuB,yBAAyB;AAChD;AACA;AACA,8BAA8B,0CAAI;AAClC,QAAQ,wCAAG,KAAK,0CAAI;AACpB;AACA;AACA;AACA;AACA,YAAY,4CAAK;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,4CAAK;AACtB,0CAA0C;AAC1C,gBAAgB,wCAAG,MAAM,wCAAG;AAC5B,gBAAgB,kDAAQ;AACxB,sCAAsC,0CAAI;AAC1C,gBAAgB,wCAAG,SAAS,0CAAI;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,4CAAK;AACjB;AACA;AACA;AACA,QAAQ,wCAAG,MAAM,wCAAG;AACpB,QAAQ,kDAAQ;AAChB,8BAA8B,0CAAI;AAClC,QAAQ,wCAAG,OAAO,0CAAI;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,4CAAK;AACnC;AACA;AACA;AACA;AACA;AACA,4DAA4D,4CAAK;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,gBAAgB,KAAK,4CAAK,eAAe;AAC/D;AACA;AACA;AACA;AACA,QAAQ,wCAAG;AACX;AACA;AACA;AACA;AACA;AACA,uBAAuB,YAAY;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,4CAAK;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,kDAAQ;AACxB;AACA;AACA;AACA;;;;;;;;;;;;;ACtaA;AAAA;AAAA;AACA;AACA;AACA,qBAAqB;AACrB,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe;;;;;;;;;;;;;ACjCf;AAAA;AAAA;AAAA;AAAA;AAA0B;AACE;AACI;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,wCAAG;AACnC;AACA,YAAY,wCAAG,MAAM,wCAAG;AACxB,SAAS;AACT;AACA;AACA;AACA;AACA,2BAA2B,mCAAmC;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,sCAAE;AACvB,kBAAkB;AAClB,6BAA6B,GAAG,EAAE;AAClC,gEAAgE;AAChE;AACA;AACA;AACA,wBAAwB,OAAO;AAC/B;AACA,uBAAuB,4CAAK;AAC5B;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,wBAAwB,MAAM;AAC9B,uBAAuB,4CAAK;AAC5B;AACA;AACA,aAAa;AACb;AACA,wBAAwB,QAAQ;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,wBAAwB,MAAM;AAC9B,uBAAuB,4CAAK;AAC5B;AACA;AACA,aAAa;AACb;AACA,wBAAwB,GAAG;AAC3B;AACA;AACA;AACA,aAAa;AACb;AACA,wBAAwB,OAAO;AAC/B;AACA;AACA;AACA,aAAa;AACb;AACA,wBAAwB,MAAM;AAC9B;AACA;AACA;AACA,aAAa;AACb;AACA,wBAAwB,KAAK;AAC7B;AACA;AACA;AACA,aAAa;AACb;AACA,wBAAwB,MAAM;AAC9B;AACA;AACA;AACA,aAAa;AACb;AACA,wBAAwB,KAAK;AAC7B;AACA;AACA;AACA,aAAa;AACb;AACA,wBAAwB,OAAO;AAC/B;AACA;AACA;AACA,aAAa;AACb;AACA,wBAAwB,GAAG;AAC3B;AACA,0CAA0C,GAAG;AAC7C;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb;AACA,wBAAwB,KAAK;AAC7B;AACA;AACA;AACA,aAAa;AACb;AACA,wBAAwB,eAAe;AACvC;AACA;AACA;AACA,aAAa;AACb;AACA,wBAAwB,IAAI;AAC5B;AACA;AACA;AACA,aAAa;AACb;AACA,wBAAwB,KAAK;AAC7B;AACA;AACA;AACA,aAAa;AACb;AACA,wBAAwB,KAAK;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,sCAAE;AACtB;AACA;AACA,0EAA0E;AAC1E;AACA;AACA;AACA,8DAA8D,IAAI;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,4CAAK;AACjB,YAAY,4CAAK;AACjB,YAAY,sCAAE;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,4CAAK;AACtB;AACA,qFAAqF;AACrF,SAAS;AACT;AACA;AACA;AACA;AACoB;;;;;;;;;;;;;ACjOpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0B;AACI;AACF;AACA;AACA;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC,6BAA6B;AAC7B,6BAA6B;AAC7B,wBAAwB;AACxB,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,0BAA0B;AAC1B,8BAA8B;AAC9B;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,sCAAE;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,sCAAE;AAC3B,yBAAyB,sCAAE;AAC3B,yBAAyB,sCAAE;AAC3B;AACA;AACA,YAAY,wCAAG,MAAM,wCAAG;AACxB,wBAAwB,0CAAI;AAC5B,YAAY,wCAAG;AACf;AACA;AACA;AACA;AACA,4CAA4C,0CAAI;AAChD,4CAA4C,0CAAI;AAChD,4CAA4C,0CAAI;AAChD;AACA,YAAY,wCAAG,SAAS,0CAAI;AAC5B;AACA;AACA;AACA;AACA,uBAAuB,MAAE,wBAAwB,sCAAE;AACnD;AACA,YAAY,wCAAG,SAAS,0CAAI;AAC5B;AACA;AACA;AACA;AACA;AACA,uBAAuB,MAAE,wBAAwB,sCAAE;AACnD;AACA,YAAY,wCAAG,SAAS,0CAAI;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,wCAAG,qBAAqB,sCAAE;AACrD,4BAA4B,wCAAG,qBAAqB,sCAAE;AACtD;AACA;AACA;AACA,uBAAuB,sCAAE;AACzB;AACA;AACA;AACA,YAAY,wCAAG,SAAS,0CAAI;AAC5B;AACA;AACA,kCAAkC,0CAAI;AACtC,kCAAkC,0CAAI;AACtC,gBAAgB,0CAAI;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,wCAAG,qBAAqB,sCAAE;AAChD;AACA,YAAY,wCAAG,SAAS,0CAAI;AAC5B;AACA;AACA;AACA;AACA;AACA,uBAAuB,sCAAE;AACzB;AACA,YAAY,wCAAG,SAAS,0CAAI;AAC5B;AACA;AACA;AACA;AACA;AACA,qBAAqB,sCAAE;AACvB;AACA,YAAY,wCAAG,SAAS,0CAAI,wBAAwB,0CAAI;AACxD;AACA;AACA,YAAY,wCAAG,SAAS,0CAAI,wBAAwB,0CAAI;AACxD;AACA;AACA;AACA,uCAAuC,sCAAE;AACzC;AACA;AACA,gBAAgB,sCAAE;AAClB,6BAA6B,0CAAI;AACjC;AACA;AACA,gBAAgB,wCAAG,SAAS,0CAAI,oBAAoB,sCAAE;AACtD;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,sCAAE;AAClC;AACA,8BAA8B,sCAAE;AAChC;AACA,gBAAgB,wCAAG,MAAM,wCAAG;AAC5B;AACA;AACA,gBAAgB,wCAAG;AACnB;AACA;AACA;AACA;AACA,YAAY,wCAAG,iBAAiB,sCAAE,yBAAyB;AAC3D;AACA;AACA,YAAY,wCAAG,iBAAiB,sCAAE,yBAAyB;AAC3D;AACA;AACA;AACA;AACA;AACA,YAAY,sCAAE;AACd;AACA;AACA;AACA;AACA,2CAA2C,sCAAE;AAC7C,yCAAyC,sCAAE;AAC3C;AACA;AACA;AACA,gBAAgB,wCAAG,MAAM,wCAAG;AAC5B;AACA,gBAAgB,wCAAG;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,wCAAG,YAAY,0CAAI,iBAAiB,IAAI,sCAAE,0BAA0B,KAAK,sCAAE,wBAAwB;AACnH;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,sCAAE;AACzB;AACA,YAAY,wgDAAgD,sCAAE;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,sCAAE;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACkB;;;;;;;;;;;;;ACzdlB;AAAA;AAAA;AAAA;AACA;AAC4B;AAC5B;AACA;AACA,qDAAqD;AACrD,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,8CAA8C;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,kDAAkD;AAClD;AACA,2BAA2B,wCAAG,cAAc,wCAAG;AAC/C;AACA;AACA;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA,qDAAqD,iCAAiC,cAAc,oCAAoC;AACxI,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,0CAA0C,IAAI,MAAM,IAAI;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACqB;;;;;;;;;;;;;ACjQrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAC8C;AACZ;AACJ;AACJ;AAC1B,kCAAkC,0DAAY;AAC9C;AACA;AACA;AACA;AACA;AACA,QAAQ,sCAAE,iBAAiB,8CAAM,OAAO,0CAAI;AAC5C,sBAAsB,0CAAI;AAC1B;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AAC+B;;;;;;;;;;;;;ACtB/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAC8C;AACZ;AACJ;AACJ;AAC1B,qCAAqC,0DAAY;AACjD;AACA;AACA;AACA;AACA;AACA,QAAQ,sCAAE,iBAAiB,8CAAM,OAAO,0CAAI;AAC5C,sBAAsB,0CAAI;AAC1B;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,2CAA2C,0CAAI;AAC/C,2CAA2C,0CAAI;AAC/C,kDAAkD,sBAAsB;AACxE;AACA;AACA;AACA,mBAAmB;AACnB;AACkC;;;;;;;;;;;;;AC7BlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAC8C;AACZ;AACJ;AACJ;AAC1B,wCAAwC,0DAAY;AACpD;AACA;AACA;AACA;AACA;AACA,QAAQ,sCAAE,iBAAiB,8CAAM,OAAO,0CAAI;AAC5C,sBAAsB,0CAAI,mBAAmB,0CAAI;AACjD;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,0CAAI;AAC/C,2CAA2C,0CAAI;AAC/C,kDAAkD,sBAAsB;AACxE;AACA;AACA;AACA,mBAAmB;AACnB;AACqC;;;;;;;;;;;;;ACpCrC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAC4B;AACI;AACM;AACV;AACsB;AACM;AACN;AACF;AACI;AACU;AACR;AACM;AACQ;AACM;AAChB;AACV;AACA;AACF;AACI;AACU;AACR;AACM;AACQ;AACM;AAClB;AACE;AACxD;AACA;AACA;AACA;AACA;AACA,gCAAgC,wCAAG;AACnC;AACA;AACA,gBAAgB,4CAAK;AACrB,gBAAgB,wCAAG;AACnB;AACA,SAAS;AACT;AACA;AACA,gBAAgB,kDAAQ;AACxB;AACA,2BAA2B,6DAAa,KAAK,8DAAc;AAC3D;AACA,2BAA2B,6DAAa,KAAK,8DAAc;AAC3D;AACA,2BAA2B,2DAAY,KAAK,4DAAa;AACzD;AACA,2BAA2B,+DAAc,KAAK,gEAAe;AAC7D;AACA,2BAA2B,yEAAmB,KAAK,0EAAoB;AACvE;AACA,2BAA2B,iEAAe,KAAK,mEAAgB;AAC/D;AACA,2BAA2B,uEAAkB,KAAK,yEAAmB;AACrE;AACA,2BAA2B,+EAAsB,KAAK,iFAAuB;AAC7E;AACA,2BAA2B,qFAAyB,KAAK,uFAA0B;AACnF;AACA,2BAA2B,mEAAgB,KAAK,oEAAiB;AACjE;AACA,2BAA2B,qEAAiB,KAAK,uEAAkB;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC1EA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAC8C;AACZ;AACJ;AACJ;AACkB;AAC5C,+BAA+B,0DAAY;AAC3C;AACA;AACA;AACA;AACA;AACA,QAAQ,sCAAE,iBAAiB,8CAAM,OAAO,0CAAI;AAC5C,sBAAsB,0CAAI;AAC1B;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,gCAAgC,wDAAW;AAC3C;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AAC4B;;;;;;;;;;;;;AC7B5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAC8C;AACZ;AACJ;AACJ;AACE;AAC5B,4BAA4B,0DAAY;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,sCAAE,iBAAiB,8CAAM,OAAO,0CAAI;AAChE;AACA;AACA;AACA,gBAAgB,sCAAE;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,0CAAI;AACzD,QAAQ,wCAAG;AACX;AACA;AACA;AACA;AACA,gBAAgB,sCAAE;AAClB,gDAAgD,0CAAI;AACpD;AACA;AACA;AACA,gBAAgB,sCAAE;AAClB,gDAAgD,0CAAI;AACpD;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACyB;;;;;;;;;;;;;ACvDzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAC8C;AACZ;AACJ;AACJ;AAC1B,gCAAgC,0DAAY;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,sCAAE,iBAAiB,8CAAM,OAAO,0CAAI;AAC5C,sBAAsB,0CAAI;AAC1B;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,4EAA4E,kBAAkB;AAC9F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,0CAAI;AAC/C,2CAA2C,0CAAI;AAC/C,kDAAkD,sBAAsB;AACxE;AACA;AACA;AACA,mBAAmB;AACnB;AAC6B;;;;;;;;;;;;;AC5C7B;AAAA;AAAA;AAAA;AAA8B;AACJ;AAC1B;AACA;AACA,+BAA+B,sCAAE;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,sCAAE;AACV;AACA;AACA;AACA,wBAAwB;AACxB;AACA,oBAAoB;AACpB;AACA;AACA;AACA,uBAAuB,sCAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,0CAAI;AAC/C,2CAA2C,0CAAI;AAC/C,2CAA2C,0CAAI;AAC/C;AACA;AACA;AACwB;;;;;;;;;;;;;AChDxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAC8C;AACZ;AACJ;AACJ;AAC1B,iCAAiC,0DAAY;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,sCAAE,iBAAiB,8CAAM,OAAO,0CAAI;AAChD;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AAC8B;;;;;;;;;;;;;ACzB9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAC8C;AACZ;AACN;AACE;AACJ;AAC1B,8BAA8B,0DAAY;AAC1C;AACA;AACA;AACA;AACA;AACA,QAAQ,sCAAE,iBAAiB,8CAAM,OAAO,0CAAI;AAC5C,sBAAsB,0CAAI;AAC1B;AACA;AACA,SAAS;AACT;AACA;AACA,mBAAmB,wCAAG;AACtB;AACA,YAAY,sCAAE,iBAAiB,8CAAM,OAAO,0CAAI;AAChD,0BAA0B,0CAAI;AAC9B;AACA,gBAAgB,sCAAE;AAClB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,2CAA2C,0CAAI;AAC/C,2CAA2C,0CAAI;AAC/C,kDAAkD,sBAAsB;AACxE;AACA;AACA;AACA,mBAAmB;AACnB;AAC2B;;;;;;;;;;;;;ACxC3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAC8C;AACZ;AACJ;AACJ;AACY;AACM;AAChB;AAC5B,6BAA6B,0DAAY;AACzC;AACA;AACA;AACA;AACA;AACA,QAAQ,sCAAE,iBAAiB,8CAAM,QAAQ,0CAAI;AAC7C,sBAAsB,0CAAI;AAC1B;AACA;AACA,SAAS;AACT,QAAQ,sCAAE,iBAAiB,8CAAM,MAAM,0CAAI;AAC3C,sBAAsB,0CAAI;AAC1B;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,gCAAgC,wDAAW;AAC3C;AACA,YAAY,wCAAG,MAAM,wCAAG;AACxB,SAAS;AACT;AACA,YAAY,wCAAG,MAAM,wCAAG;AACxB,SAAS;AACT;AACA,YAAY,wCAAG,MAAM,wCAAG;AACxB,SAAS;AACT;AACA;AACA;AACA;AACA,yBAAyB,kDAAQ;AACjC;AACA;AACA,8DAA8D,kDAAQ;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,2CAA2C,0CAAI;AAC/C,2CAA2C,0CAAI;AAC/C,kDAAkD,sBAAsB;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC0B;;;;;;;;;;;;;ACpG1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAC8C;AAClB;AACM;AACJ;AACJ;AAC0B;AACpD,2BAA2B,0DAAY;AACvC;AACA;AACA;AACA;AACA;AACA,QAAQ,sCAAE,iBAAiB,8CAAM,OAAO,0CAAI;AAC5C,sBAAsB,0CAAI,mBAAmB,0CAAI;AACjD;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,iCAAiC,sCAAE,iBAAiB,8CAAM,OAAO,0CAAI,+BAA+B,0CAAI;AACxG;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,YAAY,wCAAG;AACf,sBAAsB,sCAAE,iBAAiB,8CAAM,QAAQ,0CAAI;AAC3D,0BAA0B,0CAAI;AAC9B;AACA;AACA,YAAY,gEAAe;AAC3B;AACA;AACA;AACA;AACA,2CAA2C,0CAAI;AAC/C,2CAA2C,0CAAI;AAC/C,2CAA2C,0CAAI;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACwB;;;;;;;;;;;;;AClDxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAC8C;AACZ;AACN;AACE;AACJ;AACM;AACgB;AACR;AACxC,4BAA4B,0DAAY;AACxC;AACA;AACA;AACA;AACA,YAAY,4DAAa;AACzB,QAAQ,oDAAS;AACjB;AACA,gCAAgC,wCAAG;AACnC,YAAY,oDAAS;AACrB,SAAS;AACT;AACA;AACA,QAAQ,sCAAE,iBAAiB,8CAAM,OAAO,0CAAI;AAC5C;AACA;AACA,SAAS;AACT,QAAQ,sCAAE,iBAAiB,8CAAM,OAAO,0CAAI;AAC5C;AACA;AACA,SAAS;AACT,+BAA+B,sCAAE,iBAAiB,8CAAM,OAAO,0CAAI;AACnE;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,0CAAI;AAC/C;AACA;AACA,YAAY,4CAAK;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA,2CAA2C,0CAAI;AAC/C;AACA,YAAY,0CAAI;AAChB;AACA,gBAAgB,0CAAI;AACpB,2CAA2C,0CAAI;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACyB;;;;;;;;;;;;;ACnEzB;AAAA;AAAA;AAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD;AACvD;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA,sBAAsB,kDAAQ;AAC9B,yDAAyD;AACzD;AACA;AACA;AACA;AACgB;;;;;;;;;;;;;ACrChB;AAAA;AAAA;AAA4B;AAC5B;AACA;AACA;AACA,qDAAqD;AACrD,4BAA4B;AAC5B,sDAAsD;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,wCAAG;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe;;;;;;;;;;;;;ACjEf;AAAA;AAAA;AAAA;AAAA;AACA;AAC0B;AACY;AACV;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,GAAG;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,wCAAG;AACnC,YAAY,sCAAE;AACd;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,YAAY,sCAAE;AACd;AACA;AACA;AACA,YAAY,sCAAE;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,sCAAE;AACV;AACA,QAAQ,sCAAE;AACV;AACA;AACA,QAAQ,sCAAE;AACV;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,sCAAE;AACV;AACA,QAAQ,sCAAE;AACV;AACA,QAAQ,sCAAE;AACV;AACA;AACA,QAAQ,sCAAE;AACV;AACA,QAAQ,sCAAE;AACV;AACA;AACA;AACA;AACA,QAAQ,sCAAE;AACV;AACA,kCAAkC,sCAAE;AACpC;AACA,YAAY,kDAAQ;AACpB,wCAAwC,QAAQ,EAAE,GAAG;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,sCAAE;AACrB;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,mBAAmB,sCAAE;AACrB;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,sCAAE;AACd;AACA,SAAS;AACT;AACA,4BAA4B,sCAAE;AAC9B;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,sCAAE;AAC9B;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,sCAAE;AACd;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC3LA;AAAA;AAAA;AAAA;AAC4B;AACE;AAC9B;AACA;AACA,yDAAyD;AACzD,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,0CAAI,eAAe;AACzD,+BAA+B,0CAAI,iBAAiB;AACpD;AACA;AACA,uCAAuC,0CAAI,eAAe;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,gCAAgC,wCAAG;AACnC;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE,0CAAI;AACpE;AACA;AACA,oEAAoE,0CAAI;AACxE,aAAa;AACb,SAAS;AACT,gCAAgC,wCAAG;AACnC;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AChEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAC4B;AACA;AACA;AACI;AACM;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,kDAAQ;AACjC;AACA,gCAAgC,wCAAG;AACnC,6BAA6B,kDAAQ;AACrC,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,kDAAQ;AACvC,QAAQ,4CAAK;AACb,QAAQ,4CAAK;AACb,QAAQ,4CAAK;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,wCAAG,gBAAgB,wCAAG;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,wCAAG;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,EAAE,KAAK,GAAG,EAAE,KAAK;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACoB;;;;;;;;;;;;;AC9EpB;AAAA;AAAA;AAAA;AAC4B;AAC5B;AACA;AACA;AACA;AACA;AACA,gCAAgC,wCAAG;AACnC;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,wCAAG,MAAM,wCAAG;AACxB;AACA;AACA;AACA;AACA;AACA;AACoB;;;;;;;;;;;;;ACjFpB;AAAA;AAAA;AAAA;AAAA;AAC4B;AACE;AAC9B;AACA;AACA,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,aAAa,wCAAG;AAChB;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,0CAAI;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,YAAY,wCAAG,aAAa,wCAAG,2BAA2B,wCAAG;AAC7D;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA,+EAA+E,wCAAG,eAAe;AACjG;AACA;AACyB;;;;;;;;;;;;;ACnGzB;AAAA;AAAA;AAAA;AAC4B;AAC5B;AACA;AACA;AACA,6BAA6B;AAC7B,yBAAyB;AACzB,yBAAyB;AACzB,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,wCAAG;AACf,YAAY,wCAAG;AACf,YAAY,wCAAG;AACf,YAAY,wCAAG;AACf,YAAY,wCAAG;AACf;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT,gCAAgC,wCAAG,oBAAoB,wCAAG;AAC1D;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT,gCAAgC,wCAAG;AACnC;AACA,SAAS;AACT,gCAAgC,wCAAG;AACnC;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,wCAAG,MAAM,wCAAG;AACpB;AACA,uBAAuB,SAAS;AAChC;AACA,yCAAyC,EAAE;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACiB;;;;;;;;;;;;;ACzHjB;AAAA;AAAA;AAAA;AAA8B;AACF;AACA;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,wCAAG;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,0CAAI,iBAAiB;AAC1E,6BAA6B,0CAAI,qBAAqB;AACtD,8BAA8B,0CAAI,eAAe;AACjD;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,wCAAG,MAAM,wCAAG;AAC5B,aAAa;AACb,SAAS;AACT;AACA;AACA;;;;;;;;;;;;;ACtGA;AAAA;AAAA;AAAA;AACsC;AACtC;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,kDAAQ;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,OAAO;AACjC;AACA;AACA,gCAAgC,MAAM,GAAG,eAAe;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACoB;;;;;;;;;;;;;AC/EpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAC8B;AACF;AACM;AACN;AAC5B;AACA;AACA;AACA,mDAAmD;AACnD,sDAAsD;AACtD,yDAAyD;AACzD,yDAAyD;AACzD,2DAA2D;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD;AACjD;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,0CAAI,iBAAiB;AAClE;AACA,+DAA+D,0CAAI,mBAAmB;AACtF;AACA;AACA,iEAAiE,0CAAI,iBAAiB;AACtF;AACA;AACA,wDAAwD,0CAAI,mBAAmB;AAC/E;AACA;AACA,qFAAqF,0CAAI,oBAAoB;AAC7G,6EAA6E,0CAAI,sBAAsB;AACvG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0EAA0E,0CAAI,eAAe,2BAA2B,IAAI,0CAAI,eAAe,qDAAqD;AACpM;AACA;AACA;AACA,YAAY,MAAM;AAClB;AACA;AACA;AACA;AACA,0DAA0D,0CAAI,4BAA4B,IAAI,0CAAI,mBAAmB;AACrH,qGAAqG,0CAAI,eAAe,MAAM;AAC9H,qGAAqG,0CAAI,eAAe,MAAM;AAC9H,qGAAqG,0CAAI,eAAe,MAAM;AAC9H;AACA;AACA,0DAA0D,0CAAI,qBAAqB,IAAI,0CAAI,mBAAmB;AAC9G,2HAA2H,0CAAI,iBAAiB,MAAM;AACtJ,4HAA4H,0CAAI,gBAAgB,MAAM;AACtJ,2HAA2H,0CAAI,oBAAoB,MAAM;AACzJ;AACA;AACA;AACA,0DAA0D,0CAAI,wBAAwB,IAAI,0CAAI,mBAAmB;AACjH,oHAAoH,0CAAI,sBAAsB,OAAO;AACrJ,2GAA2G,0CAAI,gBAAgB,OAAO;AACtI,2GAA2G,0CAAI,oBAAoB,OAAO;AAC1I;AACA;AACA,0DAA0D,0CAAI,2BAA2B,IAAI,0CAAI,wBAAwB;AACzH,uFAAuF,MAAM,MAAM;AACnG;AACA;AACA,0DAA0D,0CAAI,sBAAsB,IAAI,0CAAI,mBAAmB;AAC/G,0FAA0F,0CAAI,eAAe;AAC7G;AACA;AACA,0DAA0D,0CAAI,yBAAyB,GAAG,0CAAI,sBAAsB,IAAI,0CAAI,sBAAsB;AAClJ;AACA,6HAA6H;AAC7H,oHAAoH;AACpH;AACA;AACA;AACA,0DAA0D,0CAAI,wBAAwB,IAAI,0CAAI,mBAAmB;AACjH,6FAA6F,0CAAI,gBAAgB,MAAM;AACvH,qFAAqF,0CAAI,eAAe,MAAM;AAC9G,qFAAqF,0CAAI,eAAe,MAAM;AAC9G,qFAAqF,0CAAI,kBAAkB;AAC3G;AACA;AACA;AACA,0DAA0D,0CAAI,qBAAqB,IAAI,0CAAI,mBAAmB;AAC9G,mGAAmG,0CAAI,gBAAgB,MAAM;AAC7H,2FAA2F,0CAAI,eAAe,MAAM;AACpH,2FAA2F,0CAAI,eAAe,MAAM;AACpH;AACA;AACA;AACA,0DAA0D,0CAAI,qBAAqB,IAAI,0CAAI,mBAAmB;AAC9G,0FAA0F,0CAAI,eAAe;AAC7G;AACA,YAAY;AACZ;AACA;AACA;AACA,0DAA0D,0CAAI,uBAAuB,IAAI,0CAAI,oBAAoB;AACjH;AACA;AACA;AACA,0DAA0D,0CAAI,uBAAuB,IAAI,0CAAI,oBAAoB;AACjH;AACA;AACA;AACA,0DAA0D,0CAAI,oBAAoB,IAAI,0CAAI,mBAAmB;AAC7G,iHAAiH,0CAAI,eAAe;AACpI;AACA;AACA;AACA;;AAEA;AACA,YAAY,0CAAI,8DAA8D;AAC9E;AACA,0DAA0D,0CAAI,iBAAiB,IAAI,0CAAI,mBAAmB;AAC1G;AACA;AACA;AACA,0DAA0D,0CAAI,sBAAsB,IAAI,0CAAI,kBAAkB;AAC9G,8FAA8F,GAAG;AACjG;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,GAAG,GAAG,GAAG;AACjC,wBAAwB,MAAM,GAAG,MAAM;AACvC,wBAAwB,KAAK,GAAG,KAAK;AACrC,wBAAwB,eAAe,GAAG,eAAe;AACzD,wBAAwB,KAAK,GAAG,KAAK;AACrC,wBAAwB,OAAO,GAAG,OAAO;AACzC,wBAAwB,KAAK,GAAG,KAAK;AACrC,wBAAwB,KAAK,GAAG,KAAK;AACrC,wBAAwB,IAAI,GAAG,IAAI;AACnC,wBAAwB,GAAG,GAAG,GAAG;AACjC,wBAAwB,KAAK,GAAG,KAAK;AACrC,wBAAwB,OAAO,GAAG,OAAO;AACzC,wBAAwB,MAAM,GAAG,MAAM;AACvC;AACA,YAAY;AACZ;AACA;AACA;AACA,gBAAgB,0CAAI;AACpB;AACA,mCAAmC;AACnC;AACA,0BAA0B,OAAO;AACjC,QAAQ,0CAAI;AACZ;AACA,0BAA0B,MAAM;AAChC,QAAQ,0CAAI;AACZ;AACA,0BAA0B,MAAM;AAChC,QAAQ,0CAAI;AACZ;AACA,0BAA0B,QAAQ;AAClC,QAAQ,0CAAI;AACZ;AACA,0BAA0B,GAAG;AAC7B,QAAQ,0CAAI;AACZ;AACA,0BAA0B,MAAM;AAChC,QAAQ,0CAAI;AACZ;AACA,0BAA0B,KAAK;AAC/B,QAAQ,0CAAI;AACZ;AACA,0BAA0B,eAAe;AACzC,QAAQ,0CAAI;AACZ;AACA,0BAA0B,KAAK;AAC/B,QAAQ,0CAAI;AACZ;AACA,0BAA0B,OAAO;AACjC,QAAQ,0CAAI;AACZ;AACA,0BAA0B,KAAK;AAC/B,QAAQ,0CAAI;AACZ;AACA,0BAA0B,KAAK;AAC/B,QAAQ,0CAAI;AACZ;AACA,0BAA0B,IAAI;AAC9B,QAAQ,0CAAI;AACZ;AACA,0BAA0B,GAAG;AAC7B,QAAQ,0CAAI;AACZ;AACA,0BAA0B,OAAO;AACjC,QAAQ,0CAAI;AACZ;AACA,0BAA0B,MAAM;AAChC,QAAQ,0CAAI;AACZ;AACA,0BAA0B,KAAK;AAC/B,QAAQ,0CAAI;AACZ;AACA,QAAQ,0CAAI;AACZ;AACA;AACA,0DAA0D,0CAAI,qBAAqB,IAAI,0CAAI,mBAAmB;AAC9G,6HAA6H,0CAAI,eAAe;AAChJ,YAAY,MAAM;AAClB,gDAAgD,0CAAI,kBAAkB;AACtE;AACA;AACA,0DAA0D,0CAAI,wBAAwB,IAAI,0CAAI,sBAAsB;AACpH,uGAAuG,0CAAI,eAAe;AAC1H;AACA;AACA;AACA;AACA,kCAAkC,0CAAI,iBAAiB;AACvD,6GAA6G,0CAAI,iBAAiB;AAClI,+BAA+B,0CAAI,iBAAiB;AACpD;AACA,gCAAgC,0CAAI,iBAAiB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,YAAY,wCAAG,MAAM,wCAAG;AACxB,SAAS;AACT;AACA;AACA;AACA,6CAA6C,wCAAG;AAChD;AACA;AACA;AACA,6CAA6C,wCAAG;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,0CAAI;AAC9C;AACA,gBAAgB,wCAAG,MAAM,wCAAG;AAC5B;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,wCAAG,MAAM,wCAAG;AACpB;AACA;AACA,yBAAyB,8CAAM;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACc;;;;;;;;;;;;;AC3Zd;AAAA;AAAA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yFAAyF;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2FAA2F;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf,eAAe;AACf,yBAAyB;AACzB,eAAe;AACfkBAAkB;AAClB,kBAAkB;AAClB,oBAAoB;AACpB,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,0BAA0B;AAC1B,gDAAgD;AAChD,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf,aAAa;AACb,yBAAyB;AACzB,eAAe;AACf;AACA;AACA,kBAAkB;AAClB,kBAAkB;AAClB,gBAAgB;AAChB,kBAAkB;AAClB;AACA;AACA,kBAAkB;AAClB,kBAAkB;AAClB,sCAAsC;AACtC,kBAAkB;AAClB;AACA;AACA,iBAAiB;AACjB;AACA,2BAA2B;AAC3B,iBAAiB;AACjB;AACA;AACA,uBAAuB;AACvB,2BAA2B;AAC3B,yDAAyD;AACzD,uBAAuB;AACvB;AACA;AACA,0BAA0B;AAC1B,4BAA4B;AAC5B,4CAA4C;AAC5C,0BAA0B;AAC1B;AACA;AACA,iBAAiB;AACjB,WAAW;AACX,wBAAwB;AACxB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,WAAW;AACX,mBAAmB;AACnB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,WAAW;AACX,qBAAqB;AACrB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf,WAAW;AACX,eAAe;AACf,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,cAAc;AACd,4BAA4B;AAC5B,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,QAAQ,EAAE,KAAK,EAAE,GAAG;AACnD,iCAAiC,QAAQ,EAAE,KAAK,EAAE,GAAG;AACrD,sDAAsD,QAAQ,EAAE,KAAK,EAAE,GAAG;AAC1E,+BAA+B,QAAQ,EAAE,KAAK,EAAE,GAAG;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,GAAG,EAAE,OAAO,WAAW,GAAG,KAAK,OAAO;AAC/E,wDAAwD,GAAG,EAAE,OAAO,OAAO,GAAG,IAAI,OAAO;AACzF,2GAA2G,GAAG,EAAE,OAAO,wBAAwB,GAAG,KAAK,OAAO;AAC9J,yCAAyC,GAAG,EAAE,OAAO,WAAW,GAAG,KAAK,OAAO;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,oBAAoB;AACpB,kDAAkD;AAClD,mBAAmB;AACnwBAAwB,mBAAmB;AAC3C;AACA;AACA;AACA,gBAAgB;AAChB,WAAW;AACX,sBAAsB;AACtB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,qBAAqB;AACrB,uBAAuB;AACvB,2BAA2B;AAC3B,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB,sBAAsB;AACtB,2BAA2B;AAC3B,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACoB","file":"content.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/ts/content.ts\");\n","/*\r\n * project: Powerful Pixiv Downloader\r\n * author:  xuejianxianzun; 雪见仙尊\r\n * license: GPL-3.0-or-later; http://www.gnu.org/licenses/gpl-3.0.txt\r\n * Github： https://github.com/xuejianxianzun/PixivBatchDownloader\r\n * Releases: https://github.com/xuejianxianzun/PixivBatchDownloader/releases\r\n * Wiki:    https://github.com/xuejianxianzun/PixivBatchDownloader/wiki\r\n * Website: https://pixiv.download/\r\n * E-mail:  xuejianxianzun@gmail.com\r\n * QQ group:675174717\r\n */\r\nimport './modules/Option';\r\nimport './modules/InitCrawlProcess';\r\nimport './modules/DownloadControl';\r\nimport './modules/Output';\r\nimport './modules/Support';\r\n","class API {\r\n    // 根据对象某个属性的值，排序对象。返回的结果是倒序排列\r\n    static sortByProperty(propertyName) {\r\n        return function (object1, object2) {\r\n            // 排序的内容有时可能是字符串，需要转换成数字排序\r\n            const value1 = parseInt(object1[propertyName]);\r\n            const value2 = parseInt(object2[propertyName]);\r\n            if (value2 < value1) {\r\n                return -1;\r\n            }\r\n            else if (value2 > value1) {\r\n                return 1;\r\n            }\r\n            else {\r\n                return 0;\r\n            }\r\n        };\r\n    }\r\n    // 检查给定的字符串解析为数字后，是否大于 0\r\n    static checkNumberGreater0(arg) {\r\n        let num = parseInt(arg);\r\n        // 空值会是 NaN\r\n        if (!isNaN(num) && num > 0) {\r\n            // 符合条件\r\n            return {\r\n                result: true,\r\n                value: num\r\n            };\r\n        }\r\n        // 不符合条件\r\n        return {\r\n            result: false,\r\n            value: 0\r\n        };\r\n    }\r\n    // 从 url 中获取指定的查询字段的值\r\n    // 注意这里进行了一次编码，所以不要对这个 API 的结果再次进行编码\r\n    static getURLField(url, query) {\r\n        const result = new URL(url).searchParams.get(query);\r\n        if (result !== null) {\r\n            return encodeURIComponent(result);\r\n        }\r\n        else {\r\n            return '';\r\n        }\r\n    }\r\n    // 更新 token\r\n    // 从网页源码里获取用户 token，并储存起来\r\n    static updateToken() {\r\n        fetch('https://www.pixiv.net/artworks/62751951')\r\n            .then(response => {\r\n            return response.text();\r\n        })\r\n            .then(data => {\r\n            let result = data.match(/token\":\"(\\w+)\"/);\r\n            if (result) {\r\n                localStorage.setItem('xzToken', result[1]);\r\n            }\r\n            else {\r\n                console.warn('UpdateToken failed: no token found!');\r\n            }\r\n        });\r\n    }\r\n    // 获取 token\r\n    // 从本地存储里获取用户 token\r\n    static getToken() {\r\n        let result = localStorage.getItem('xzToken');\r\n        if (result) {\r\n            return result;\r\n        }\r\n        else {\r\n            this.updateToken();\r\n            return '';\r\n        }\r\n    }\r\n    // 从 url 里获取作品 id\r\n    // 可以传入 url，无参数则使用当前页面的 url\r\n    static getIllustId(url) {\r\n        const str = url || window.location.search || location.href;\r\n        if (str.includes('illust_id')) {\r\n            // 传统 url\r\n            return /illust_id=(\\d*\\d)/.exec(str)[1];\r\n        }\r\n        else if (str.includes('/artworks/')) {\r\n            // 新版 url\r\n            return /artworks\\/(\\d*\\d)/.exec(str)[1];\r\n        }\r\n        else {\r\n            // 直接取出 url 中的数字，不保证准确\r\n            return /\\d*\\d/.exec(location.href)[0];\r\n        }\r\n    }\r\n    // 通用的请求流程\r\n    // 发送 get 请求，返回 json 数据，抛出异常\r\n    static request(url) {\r\n        return new Promise((resolve, reject) => {\r\n            fetch(url, {\r\n                method: 'get',\r\n                credentials: 'same-origin'\r\n            })\r\n                .then(response => {\r\n                if (response.ok) {\r\n                    return response.json();\r\n                }\r\n                else {\r\n                    // 第一种异常，请求成功但状态不对\r\n                    reject({\r\n                        status: response.status,\r\n                        statusText: response.statusText\r\n                    });\r\n                }\r\n            })\r\n                .then(data => {\r\n                resolve(data);\r\n            })\r\n                .catch(error => {\r\n                // 第二种异常，请求失败\r\n                reject(error);\r\n            });\r\n        });\r\n    }\r\n    // 获取收藏数据\r\n    static async getBookmarkData(id, tag, offset, hide = false) {\r\n        const url = `https://www.pixiv.net/ajax/user/${id}/illusts/bookmarks?tag=${encodeURI(tag)}&offset=${offset}&limit=100&rest=${hide ? 'hide' : 'show'}&rdm=${Math.random()}`;\r\n        return this.request(url);\r\n    }\r\n    // 添加收藏\r\n    static async addBookmark(id, tags, token, hide) {\r\n        let restrict;\r\n        if (!hide) {\r\n            // 公开作品\r\n            restrict = 0;\r\n        }\r\n        else {\r\n            // 非公开作品\r\n            restrict = 1;\r\n        }\r\n        return fetch('https://www.pixiv.net/rpc/index.php', {\r\n            method: 'post',\r\n            headers: {\r\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8'\r\n            },\r\n            credentials: 'same-origin',\r\n            body: `mode=save_illust_bookmark&illust_id=${id}&restrict=${restrict}&comment=&tags=${tags}&tt=${token}`\r\n        });\r\n    }\r\n    // 获取用户信息\r\n    static getUserProfile(id) {\r\n        // full=1 在画师的作品列表页使用，获取详细信息\r\n        // full=0 在作品页内使用，只获取少量信息\r\n        const url = `https://www.pixiv.net/ajax/user/${id}?full=1`;\r\n        return this.request(url);\r\n    }\r\n    // 获取用户指定类型的作品列表\r\n    // 返回作品的 id 列表，不包含详细信息\r\n    static async getUserWorksByType(id, type = ['illusts', 'manga']) {\r\n        let typeSet = new Set(type);\r\n        let result = [];\r\n        const url = `https://www.pixiv.net/ajax/user/${id}/profile/all`;\r\n        let data = await this.request(url);\r\n        for (const type of typeSet.values()) {\r\n            result = result.concat(Object.keys(data.body[type]));\r\n        }\r\n        return result;\r\n    }\r\n    // 获取用户指定类型、并且指定 tag 的作品列表\r\n    // 返回整个请求的结果，里面包含作品的详细信息\r\n    // 必须带 tag 使用。不带 tag 虽然也能获得数据，但是获得的并不全，很奇怪。\r\n    static getUserWorksByTypeWithTag(id, type, tag, offset = 0, number = 999999) {\r\n        // https://www.pixiv.net/ajax/user/2369321/illusts/tag?tag=Fate/GrandOrder&offset=0&limit=9999999\r\n        const url = `https://www.pixiv.net/ajax/user/${id}/${type}/tag?tag=${tag}&offset=${offset}&limit=${number}`;\r\n        return this.request(url);\r\n    }\r\n    // 获取作品的详细信息\r\n    static getWorksData(id) {\r\n        const url = `https://www.pixiv.net/ajax/illust/${id}`;\r\n        return this.request(url);\r\n    }\r\n    // 获取作品的动图信息\r\n    static getUgoiraMeta(id) {\r\n        const url = `https://www.pixiv.net/ajax/illust/${id}/ugoira_meta`;\r\n        return this.request(url);\r\n    }\r\n    // 获取相关作品\r\n    static getRelatedData(id) {\r\n        // 最后的 18 是预加载首屏的多少个作品的信息，和下载并没有关系\r\n        const url = `https://www.pixiv.net/ajax/illust/${id}/recommend/init?limit=18`;\r\n        return this.request(url);\r\n    }\r\n    // 获取排行榜数据\r\n    // 排行榜数据基本是一批 50 条作品信息\r\n    static getRankingData(option) {\r\n        let url = `https://www.pixiv.net/ranking.php?mode=${option.mode}&p=${option.p}&format=json`;\r\n        // 把可选项添加到 url 里\r\n        let temp = new URL(url);\r\n        // 下面两项需要判断有值再添加。不可以添加了这些字段却使用空值。\r\n        if (option.worksType) {\r\n            temp.searchParams.set('content', option.worksType);\r\n        }\r\n        if (option.date) {\r\n            temp.searchParams.set('date', option.date);\r\n        }\r\n        url = temp.toString();\r\n        return this.request(url);\r\n    }\r\n    // 获取收藏后的相似作品数据\r\n    // 需要传入作品 id 和要抓取的数量。但是实际获取到的数量会比指定的数量少一些\r\n    static getRecommenderData(id, number) {\r\n        const url = `/rpc/recommender.php?type=illust&sample_illusts=${id}&num_recommendations=${number}`;\r\n        return this.request(url);\r\n    }\r\n    // 获取搜索数据\r\n    static getSearchData(word, type = 'artworks', p = 1, option = {}) {\r\n        // 基础的 url\r\n        let url = `https://www.pixiv.net/ajax/search/${type}/${encodeURIComponent(word)}?word=${encodeURIComponent(word)}&p=${p}`;\r\n        // 把可选项添加到 url 里\r\n        let temp = new URL(url);\r\n        for (const [key, value] of Object.entries(option)) {\r\n            if (value) {\r\n                temp.searchParams.set(key, value);\r\n            }\r\n        }\r\n        url = temp.toString();\r\n        return this.request(url);\r\n    }\r\n    // 获取大家的新作品的数据\r\n    static getNewIllustData(option) {\r\n        let url = `https://www.pixiv.net/ajax/illust/new?lastId=${option.lastId}&limit=${option.limit}&type=${option.type}&r18=${option.r18}`;\r\n        return this.request(url);\r\n    }\r\n    // 获取关注的的新作品的数据\r\n    static getBookmarkNewIllustData(p = 1, r18 = false) {\r\n        let path = r18 ? 'bookmark_new_illust_r18' : 'bookmark_new_illust';\r\n        let url = `https://www.pixiv.net/${path}.php?p=${p}`;\r\n        return new Promise((resolve, reject) => {\r\n            fetch(url, {\r\n                method: 'get',\r\n                credentials: 'same-origin'\r\n            })\r\n                .then(response => {\r\n                if (response.ok) {\r\n                    return response.text();\r\n                }\r\n                else {\r\n                    throw new Error(response.status.toString());\r\n                }\r\n            })\r\n                .then(data => {\r\n                let listPageDocument = new window.DOMParser().parseFromString(data, 'text/html');\r\n                let worksInfoText = listPageDocument.querySelector('#js-mount-point-latest-following').dataset.items;\r\n                resolve(JSON.parse(worksInfoText));\r\n            })\r\n                .catch(error => {\r\n                reject(error);\r\n            });\r\n        });\r\n    }\r\n}\r\nexport { API };\r\n","import { API } from './API';\r\nimport { DOM } from './DOM';\r\n// 给收藏里的未分类作品批量添加 tag\r\nclass BookmarksAddTag {\r\n    constructor() {\r\n        this.addTagList = []; // 需要添加 tag 的作品列表\r\n        this.btn = document.createElement('button');\r\n        this.once = 100; // 一次请求多少个作品的数据\r\n    }\r\n    init(btn) {\r\n        this.btn = btn;\r\n        this.btn.addEventListener('click', () => {\r\n            this.addTagList = []; // 每次点击清空结果\r\n            this.btn = document.getElementById('add_tag_btn');\r\n            this.btn.setAttribute('disabled', 'disabled');\r\n            this.btn.textContent = `Checking`;\r\n            this.readyAddTag();\r\n        });\r\n        // 显示/隐藏按钮\r\n        this.toogleAddTagBtn();\r\n        ['pushState', 'popstate'].forEach(item => {\r\n            window.addEventListener(item, () => {\r\n                this.toogleAddTagBtn();\r\n            });\r\n        });\r\n    }\r\n    // 如果是书签页则显示添加 tag 的按钮，否则隐藏\r\n    toogleAddTagBtn() {\r\n        const isBookmarkPage = location.href.includes('bookmark.php');\r\n        if (this.btn) {\r\n            if (isBookmarkPage) {\r\n                this.btn.classList.remove('hidden');\r\n            }\r\n            else {\r\n                this.btn.classList.add('hidden');\r\n            }\r\n        }\r\n    }\r\n    // 准备添加 tag。loop 表示这是第几轮循环\r\n    async readyAddTag(loop = 0) {\r\n        const offset = loop * this.once; // 一次请求只能获取一部分，所以可能有多次请求，要计算偏移量\r\n        // 发起请求\r\n        const [showData, hideData] = await Promise.all([\r\n            API.getBookmarkData(DOM.getUserId(), '未分類', offset, false),\r\n            API.getBookmarkData(DOM.getUserId(), '未分類', offset, true)\r\n        ]).catch(error => {\r\n            if (error.status && error.status === 403) {\r\n                this.btn.textContent = `× Permission denied`;\r\n            }\r\n            throw new Error('Permission denied');\r\n        });\r\n        // 保存有用的数据\r\n        for (const data of [showData, hideData]) {\r\n            const works = data.body.works;\r\n            // 如果作品的 bookmarkData 为假说明没有实际数据，可能是在获取别人的收藏数据。\r\n            if (works.length > 0 && works[0].bookmarkData) {\r\n                works.forEach(work => {\r\n                    this.addTagList.push({\r\n                        id: work.id,\r\n                        tags: encodeURI(work.tags.join(' ')),\r\n                        restrict: work.bookmarkData.private\r\n                    });\r\n                });\r\n            }\r\n        }\r\n        // 已删除或无法访问的作品不会出现在请求结果里。本来一次请求 100 个，但返回的结果有可能会比 100 个少，甚至极端情况下是 0。所以实际获取到的作品可能比  total 数量少，这是正常的。\r\n        // 判断是否请求了所有未分类的作品数据\r\n        const total = offset + this.once;\r\n        if (total >= showData.body.total && total >= hideData.body.total) {\r\n            if (this.addTagList.length === 0) {\r\n                // 如果结果为空，不需要处理\r\n                this.btn.textContent = `√ No need`;\r\n                this.btn.removeAttribute('disabled');\r\n                return;\r\n            }\r\n            else {\r\n                // 开始添加 tag\r\n                this.addTag(0, this.addTagList, API.getToken());\r\n            }\r\n        }\r\n        else {\r\n            // 需要继续获取\r\n            this.readyAddTag(++loop);\r\n        }\r\n    }\r\n    // 给未分类作品添加 tag\r\n    async addTag(index, addList, tt) {\r\n        const item = addList[index];\r\n        await API.addBookmark(item.id, item.tags, tt, item.restrict);\r\n        if (index < addList.length - 1) {\r\n            index++;\r\n            this.btn.textContent = `${index} / ${addList.length}`;\r\n            // 继续添加下一个\r\n            this.addTag(index, addList, tt);\r\n        }\r\n        else {\r\n            this.btn.textContent = `√ Complete`;\r\n            this.btn.removeAttribute('disabled');\r\n        }\r\n    }\r\n}\r\nconst bookmarksAddTag = new BookmarksAddTag();\r\nexport { bookmarksAddTag };\r\n","// 颜色\r\nclass Colors {\r\n}\r\nColors.blue = '#0ea8ef';\r\nColors.green = '#14ad27';\r\nColors.red = '#f33939';\r\nexport { Colors };\r\n","// 转换动图\r\nimport { EVT } from './EVT';\r\nimport { log } from './Log';\r\nclass ConvertUgoira {\r\n    constructor() {\r\n        this.gifWorkerUrl = '';\r\n        this.downloading = true; // 是否在下载。如果下载停止了则不继续转换后续任务，避免浪费资源\r\n        this.count = 0; // 统计有几个转换任务\r\n        this.maxCount = 1; // 允许同时运行多少个转换任务\r\n        this.loadWorkerJS();\r\n        window.addEventListener(EVT.events.downloadStart, () => {\r\n            this.downloading = true;\r\n        });\r\n        [EVT.events.downloadPause, EVT.events.downloadStop].forEach(event => {\r\n            window.addEventListener(event, () => {\r\n                this.downloading = false;\r\n            });\r\n        });\r\n    }\r\n    set setCount(num) {\r\n        this.count = num;\r\n        EVT.fire(EVT.events.convertChange, this.count);\r\n    }\r\n    async loadWorkerJS() {\r\n        // 添加 zip 的 worker 文件\r\n        let zipWorker = await fetch(chrome.extension.getURL('lib/z-worker.js'));\r\n        const zipWorkerBolb = await zipWorker.blob();\r\n        const zipWorkerUrl = URL.createObjectURL(zipWorkerBolb);\r\n        if (zip) {\r\n            zip.workerScripts = {\r\n                inflater: [zipWorkerUrl]\r\n            };\r\n        }\r\n        // 添加 gif 的 worker 文件\r\n        let gifWorker = await fetch(chrome.extension.getURL('lib/gif.worker.js'));\r\n        const gifWorkerBolb = await gifWorker.blob();\r\n        this.gifWorkerUrl = URL.createObjectURL(gifWorkerBolb);\r\n    }\r\n    // 解压 zip 文件\r\n    async readZip(zipFile, ugoiraInfo) {\r\n        return new Promise(function (resolve, reject) {\r\n            zip.createReader(new zip.BlobReader(zipFile), (zipReader) => {\r\n                // 读取成功时的回调函数，files 保存了文件列表的信息\r\n                zipReader.getEntries((files) => {\r\n                    // 创建数组，长度与文件数量一致\r\n                    const imgFile = new Array(files.length);\r\n                    // 获取每个文件的数据。因为这个操作是异步的，所以必须检查图片数量\r\n                    files.forEach((file) => {\r\n                        file.getData(new zip.Data64URIWriter(ugoiraInfo.mime_type), (data) => {\r\n                            const fileNo = parseInt(file.filename);\r\n                            imgFile[fileNo] = data;\r\n                            // 把图片按原编号存入对应的位置。这是因为我怀疑有时候 zip.Data64URIWriter 的回调顺序不一致，直接 push 可能导致图片的顺序乱掉\r\n                            for (let i = 0; i < imgFile.length; i++) {\r\n                                // 检测到空值说明没有添加完毕，退出循环\r\n                                if (!imgFile[i]) {\r\n                                    break;\r\n                                }\r\n                                // 如果检查到最后一项，说明添加完毕\r\n                                if (i === imgFile.length - 1) {\r\n                                    resolve(imgFile);\r\n                                }\r\n                            }\r\n                        });\r\n                    });\r\n                });\r\n            }, (message) => {\r\n                log.error('error: readZIP error.', 2);\r\n                reject(new Error('readZIP error: ' + message));\r\n            });\r\n        });\r\n    }\r\n    // 添加每一帧的数据\r\n    async getFrameData(imgFile, type = 'webm') {\r\n        const resultList = new Array(imgFile.length);\r\n        return new Promise(function (resolve, reject) {\r\n            const drawImg = function (index) {\r\n                const img = new Image();\r\n                img.onload = function (event) {\r\n                    // 处理视频\r\n                    if (type === 'webm') {\r\n                        const canvasEl = document.createElement('canvas');\r\n                        const ctx = canvasEl.getContext('2d');\r\n                        canvasEl.width = img.width;\r\n                        canvasEl.height = img.height;\r\n                        ctx.drawImage(img, 0, 0);\r\n                        resultList[index] = canvasEl;\r\n                    }\r\n                    // 处理 gif\r\n                    if (type === 'gif') {\r\n                        resultList[index] = img;\r\n                    }\r\n                    // 继续下一个\r\n                    if (index < imgFile.length - 1) {\r\n                        index++;\r\n                        drawImg(index);\r\n                    }\r\n                    else {\r\n                        resolve(resultList);\r\n                    }\r\n                };\r\n                img.src = imgFile[index];\r\n            };\r\n            // onload 完成时的顺序和添加事件时的顺序不一致，为了避免图片顺序乱掉，这里逐个添加每个图片\r\n            drawImg(0);\r\n        });\r\n    }\r\n    // 编码视频\r\n    async encodeVideo(encoder) {\r\n        return new Promise(function (resolve, reject) {\r\n            encoder.compile(false, function (video) {\r\n                resolve(video);\r\n            });\r\n        });\r\n    }\r\n    // 开始转换，主要是解压文件\r\n    async start(file, info) {\r\n        return new Promise(async (resolve, reject) => {\r\n            const t = window.setInterval(async () => {\r\n                if (this.count < this.maxCount) {\r\n                    window.clearInterval(t);\r\n                    if (!this.downloading) {\r\n                        return;\r\n                    }\r\n                    this.setCount = this.count + 1;\r\n                    // 将压缩包里的图片转换为 base64 字符串\r\n                    const base64Arr = await this.readZip(file, info);\r\n                    resolve(base64Arr);\r\n                }\r\n            }, 200);\r\n        });\r\n    }\r\n    complete() {\r\n        this.setCount = this.count - 1;\r\n    }\r\n    // 转换成 webm\r\n    async webm(file, info) {\r\n        return new Promise(async (resolve, reject) => {\r\n            // 创建视频编码器\r\n            const encoder = new Whammy.Video();\r\n            // 获取解压后的图片数据\r\n            let base64Arr = await this.start(file, info);\r\n            // 生成每一帧的数据\r\n            let canvasData = await this.getFrameData(base64Arr);\r\n            // 添加帧数据\r\n            for (let index = 0; index < canvasData.length; index++) {\r\n                const base64 = canvasData[index];\r\n                encoder.add(base64, info.frames[index].delay);\r\n            }\r\n            base64Arr = null;\r\n            canvasData = null;\r\n            // 获取生成的视频\r\n            file = (await this.encodeVideo(encoder));\r\n            this.complete();\r\n            resolve(file);\r\n        });\r\n    }\r\n    // 转换成 gif\r\n    async gif(file, info) {\r\n        return new Promise(async (resolve, reject) => {\r\n            // 配置 gif.js\r\n            let gif = new GIF({\r\n                workers: 4,\r\n                quality: 10,\r\n                workerScript: this.gifWorkerUrl\r\n            });\r\n            // 绑定渲染完成事件\r\n            gif.on('finished', (file) => {\r\n                this.complete();\r\n                resolve(file);\r\n            });\r\n            // 获取解压后的图片数据\r\n            let base64Arr = await this.start(file, info);\r\n            // 生成每一帧的数据\r\n            let imgData = await this.getFrameData(base64Arr, 'gif');\r\n            // 添加帧数据\r\n            for (let index = 0; index < imgData.length; index++) {\r\n                gif.addFrame(imgData[index], {\r\n                    delay: info.frames[index].delay\r\n                });\r\n            }\r\n            base64Arr = null;\r\n            imgData = null;\r\n            // 渲染 gif\r\n            gif.render();\r\n        });\r\n    }\r\n}\r\nconst converter = new ConvertUgoira();\r\nexport { converter };\r\n","// 抓取地区排行榜页面\r\nimport { CrawlPageBase } from './CrawlPageBase';\r\nimport { filter } from './Filter';\r\nimport { API } from './API';\r\nimport { store } from './Store';\r\nclass CrawlAreaRankingPage extends CrawlPageBase {\r\n    getIdList() {\r\n        // 地区排行榜\r\n        const allPicArea = document.querySelectorAll('.ranking-item>.work_wrapper');\r\n        for (const el of allPicArea) {\r\n            const img = el.querySelector('._thumbnail');\r\n            // img.dataset.type 全都是 \"illust\"，因此不能用来区分作品类型\r\n            // 提取出 tag 列表\r\n            const id = img.dataset.id;\r\n            const tags = img.dataset.tags.split(' ');\r\n            const bookmarked = el\r\n                .querySelector('._one-click-bookmark')\r\n                .classList.contains('on');\r\n            const filterOpt = {\r\n                id: id,\r\n                tags: tags,\r\n                bookmarkData: bookmarked\r\n            };\r\n            if (filter.check(filterOpt)) {\r\n                const id = API.getIllustId(el.querySelector('a').href);\r\n                store.idList.push(id);\r\n            }\r\n        }\r\n        this.getIdListFinished();\r\n    }\r\n    resetGetIdListStatus() { }\r\n    destroy() { }\r\n}\r\nexport { CrawlAreaRankingPage };\r\n","// 抓取 bookmark_detail 页面\r\nimport { CrawlPageBase } from './CrawlPageBase';\r\nimport { API } from './API';\r\nimport { store } from './Store';\r\nclass CrawlBookmarkDetailPage extends CrawlPageBase {\r\n    getWantPage() {\r\n        const check = this.checkWantPageInputGreater0();\r\n        if (check == undefined) {\r\n            return;\r\n        }\r\n        this.crawlNumber = check;\r\n        if (this.crawlNumber > this.maxCount) {\r\n            this.crawlNumber = this.maxCount;\r\n        }\r\n    }\r\n    // 获取相似的作品列表\r\n    async getIdList() {\r\n        let data = await API.getRecommenderData(API.getIllustId(), this.crawlNumber);\r\n        for (const id of data.recommendations) {\r\n            store.idList.push(id.toString());\r\n        }\r\n        this.getIdListFinished();\r\n    }\r\n    resetGetIdListStatus() { }\r\n    destroy() { }\r\n}\r\nexport { CrawlBookmarkDetailPage };\r\n","// 抓取关注的新作品页面\r\nimport { CrawlPageBase } from './CrawlPageBase';\r\nimport { filter } from './Filter';\r\nimport { lang } from './Lang';\r\nimport { API } from './API';\r\nimport { store } from './Store';\r\nimport { log } from './Log';\r\nclass CrawlBookmarkNewIllustPage extends CrawlPageBase {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.r18 = false;\r\n    }\r\n    getWantPage() {\r\n        const check = this.checkWantPageInputGreater0();\r\n        if (check == undefined) {\r\n            return;\r\n        }\r\n        this.crawlNumber = check;\r\n        if (this.crawlNumber > this.maxCount) {\r\n            this.crawlNumber = this.maxCount;\r\n        }\r\n        this.listPageFinished = 0;\r\n        log.warning(lang.transl('_任务开始1', this.crawlNumber.toString()));\r\n    }\r\n    nextStep() {\r\n        this.r18 = location.pathname.includes('r18');\r\n        const p = API.getURLField(location.href, 'p');\r\n        this.startpageNo = parseInt(p) || 1;\r\n        this.getIdList();\r\n    }\r\n    async getIdList() {\r\n        let p = this.startpageNo + this.listPageFinished;\r\n        // 发起请求，获取列表页\r\n        let worksData;\r\n        try {\r\n            worksData = await API.getBookmarkNewIllustData(p, this.r18);\r\n        }\r\n        catch (error) {\r\n            this.getIdList();\r\n            return;\r\n        }\r\n        // 检查一些此时可以进行检查的设置项\r\n        for (const data of worksData) {\r\n            const filterOpt = {\r\n                id: data.illustId,\r\n                width: data.width,\r\n                height: data.height,\r\n                pageCount: data.pageCount,\r\n                bookmarkData: data.isBookmarked,\r\n                illustType: parseInt(data.illustType),\r\n                tags: data.tags\r\n            };\r\n            if (filter.check(filterOpt)) {\r\n                store.idList.push(data.illustId);\r\n            }\r\n        }\r\n        this.listPageFinished++;\r\n        log.log(lang.transl('_列表页抓取进度', this.listPageFinished.toString()), 1, false);\r\n        // 判断任务状态\r\n        // 如果抓取了所有页面，或者抓取完指定页面\r\n        if (p >= 100 || this.listPageFinished === this.crawlNumber) {\r\n            log.log(lang.transl('_列表页抓取完成'));\r\n            this.getIdListFinished();\r\n        }\r\n        else {\r\n            // 继续抓取\r\n            this.getIdList();\r\n        }\r\n    }\r\n    resetGetIdListStatus() {\r\n        this.listPageFinished = 0;\r\n    }\r\n    destroy() { }\r\n}\r\nexport { CrawlBookmarkNewIllustPage };\r\n","// 抓取发现页面\r\nimport { CrawlPageBase } from './CrawlPageBase';\r\nimport { API } from './API';\r\nimport { store } from './Store';\r\nclass CrawlDiscoverPage extends CrawlPageBase {\r\n    getWantPage() { }\r\n    getIdList() {\r\n        // 在发现页面，仅下载已有部分，所以不需要去获取列表页\r\n        const nowIllust = document.querySelectorAll('figure>div>a');\r\n        // 获取已有作品的 id\r\n        Array.from(nowIllust).forEach(el => {\r\n            // discovery 列表的 url 是有额外后缀的，需要去掉\r\n            const id = API.getIllustId(el.href.split('&uarea')[0]);\r\n            store.idList.push(id);\r\n        });\r\n        this.getIdListFinished();\r\n    }\r\n    resetGetIdListStatus() { }\r\n    destroy() { }\r\n}\r\nexport { CrawlDiscoverPage };\r\n","// 抓取首页\r\nimport { CrawlPageBase } from './CrawlPageBase';\r\nimport { lang } from './Lang';\r\nimport { store } from './Store';\r\nimport { log } from './Log';\r\nclass CrawlIndexPage extends CrawlPageBase {\r\n    nextStep() {\r\n        // 在主页通过id抓取时，不需要获取列表页，直接完成\r\n        log.log(lang.transl('_开始获取作品页面'));\r\n        this.getIdList();\r\n    }\r\n    getWantPage() { }\r\n    getIdList() {\r\n        const textarea = document.getElementById('down_id_input');\r\n        // 检查 id\r\n        const tempSet = new Set(textarea.value.split('\\n'));\r\n        const idValue = Array.from(tempSet);\r\n        for (const id of idValue) {\r\n            // 如果有 id 不是数字，或者处于非法区间，中止任务\r\n            const nowId = parseInt(id);\r\n            if (isNaN(nowId) || nowId < 22 || nowId > 99999999) {\r\n                log.error(lang.transl('_id不合法'), 0, false);\r\n            }\r\n            else {\r\n                store.idList.push(nowId.toString());\r\n            }\r\n        }\r\n        this.getIdListFinished();\r\n    }\r\n    resetGetIdListStatus() { }\r\n    destroy() { }\r\n}\r\nexport { CrawlIndexPage };\r\n","// 抓取 大家的新作品页面\r\nimport { CrawlPageBase } from './CrawlPageBase';\r\nimport { filter } from './Filter';\r\nimport { lang } from './Lang';\r\nimport { API } from './API';\r\nimport { store } from './Store';\r\nimport { log } from './Log';\r\nclass CrawlNewIllustPage extends CrawlPageBase {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.option = this.resetOption();\r\n        this.limitMax = 20; // 每次请求的数量最大是 20\r\n        this.fetchCount = 0; // 已请求的作品数量\r\n    }\r\n    getWantPage() {\r\n        const check = this.checkWantPageInputGreater0();\r\n        if (check == undefined) {\r\n            return;\r\n        }\r\n        this.crawlNumber = check;\r\n        if (this.crawlNumber > this.maxCount) {\r\n            this.crawlNumber = this.maxCount;\r\n        }\r\n        log.warning(lang.transl('_抓取多少个作品', this.crawlNumber.toString()));\r\n    }\r\n    nextStep() {\r\n        this.initFetchURL();\r\n        this.getIdList();\r\n    }\r\n    resetOption() {\r\n        return {\r\n            lastId: '0',\r\n            limit: '20',\r\n            type: '',\r\n            r18: ''\r\n        };\r\n    }\r\n    // 组织要请求的 url\r\n    initFetchURL() {\r\n        this.option = this.resetOption();\r\n        if (this.crawlNumber < this.limitMax) {\r\n            this.option.limit = this.crawlNumber.toString();\r\n        }\r\n        else {\r\n            this.option.limit = this.limitMax.toString();\r\n        }\r\n        this.fetchCount = 0;\r\n        // 当前页面的作品类型，默认是 illust\r\n        this.option.type = API.getURLField(location.href, 'type') || 'illust';\r\n        // 是否是 R18 模式\r\n        this.option.r18 = (location.href.includes('_r18.php') || false).toString();\r\n    }\r\n    async getIdList() {\r\n        let data;\r\n        try {\r\n            data = await API.getNewIllustData(this.option);\r\n        }\r\n        catch (error) {\r\n            this.getIdList();\r\n            return;\r\n        }\r\n        let useData = data.body.illusts;\r\n        for (const nowData of useData) {\r\n            // 抓取够了指定的数量\r\n            if (this.fetchCount + 1 > this.crawlNumber) {\r\n                break;\r\n            }\r\n            else {\r\n                this.fetchCount++;\r\n            }\r\n            // 排除广告信息\r\n            if (nowData.isAdContainer) {\r\n                continue;\r\n            }\r\n            const filterOpt = {\r\n                id: nowData.illustId,\r\n                width: nowData.width,\r\n                height: nowData.height,\r\n                pageCount: nowData.pageCount,\r\n                bookmarkData: nowData.bookmarkData,\r\n                illustType: nowData.illustType,\r\n                tags: nowData.tags\r\n            };\r\n            if (filter.check(filterOpt)) {\r\n                store.idList.push(nowData.illustId);\r\n            }\r\n        }\r\n        log.log(lang.transl('_新作品进度', this.fetchCount.toString()), 1, false);\r\n        // 抓取完毕\r\n        if (this.fetchCount >= this.crawlNumber ||\r\n            this.fetchCount >= this.maxCount) {\r\n            log.log(lang.transl('_开始获取作品页面'));\r\n            this.getIdListFinished();\r\n            return;\r\n        }\r\n        // 继续抓取\r\n        this.option.lastId = data.body.lastId;\r\n        this.getIdList();\r\n    }\r\n    resetGetIdListStatus() { }\r\n    destroy() { }\r\n}\r\nexport { CrawlNewIllustPage };\r\n","import { filter } from './Filter';\r\nimport { lang } from './Lang';\r\nimport { API } from './API';\r\nimport { store } from './Store';\r\nimport { log } from './Log';\r\nimport { EVT } from './EVT';\r\nimport { ui } from './UI';\r\nimport { titleBar } from './TitleBar';\r\nimport { pageInfo } from './PageInfo';\r\n/*\r\n  一般流程：\r\n  准备抓取\r\n  获取作品 id 列表\r\n  获取作品详情\r\n  抓取完毕\r\n  */\r\nclass CrawlPageBase {\r\n    constructor() {\r\n        this.crawlNumber = 0; // 要抓取的个数/页数\r\n        this.multipleImageWorks = 0; // 多图作品设置\r\n        this.firstFewImages = 0; // 每个作品下载几张图片。0为不限制，全部下载。改为1则只下载第一张。这是因为有时候多p作品会导致要下载的图片过多，此时可以设置只下载前几张，减少下载量\r\n        this.maxCount = 1000; // 当前页面类型最多有多少个页面/作品\r\n        this.startpageNo = 1; // 列表页开始抓取时的页码，只在 api 需要页码时使用。目前有搜索页、排行榜页、关注的新作品页使用。\r\n        this.listPageFinished = 0; // 记录一共抓取了多少个列表页。使用范围同上。\r\n        this.ajaxThreadsDefault = 10; // 抓取时的并发连接数默认值，也是最大值\r\n        this.ajaxThreads = this.ajaxThreadsDefault; // 抓取时的并发连接数\r\n        this.ajaxThreadsFinished = 0; // 统计有几个并发线程完成所有请求。统计的是并发线程（ ajaxThreads ）而非请求数\r\n    }\r\n    // 作品个数/页数的输入不合法\r\n    getWantPageError() {\r\n        EVT.fire(EVT.events.crawlError);\r\n        const msg = lang.transl('_参数不合法');\r\n        window.alert(msg);\r\n        throw new Error(msg);\r\n    }\r\n    // 检查用户输入的页数/个数设置，并返回提示信息\r\n    // 可以为 -1，或者大于 0\r\n    checkWantPageInput(crawlPartTip, crawlAllTip) {\r\n        const temp = parseInt(ui.form.setWantPage.value);\r\n        // 如果比 1 小，并且不是 -1，则不通过\r\n        if ((temp < 1 && temp !== -1) || isNaN(temp)) {\r\n            // 比 1 小的数里，只允许 -1 , 0 也不行\r\n            this.getWantPageError();\r\n        }\r\n        if (temp >= 1) {\r\n            log.warning(crawlPartTip.replace('-num-', temp.toString()));\r\n        }\r\n        else if (temp === -1) {\r\n            log.warning(crawlAllTip);\r\n        }\r\n        return temp;\r\n    }\r\n    // 检查用户输入的页数/个数设置\r\n    // 必须大于 0\r\n    checkWantPageInputGreater0() {\r\n        const result = API.checkNumberGreater0(ui.form.setWantPage.value);\r\n        if (result.result) {\r\n            return result.value;\r\n        }\r\n        else {\r\n            this.getWantPageError();\r\n        }\r\n    }\r\n    // 获取作品张数设置\r\n    getFirstFewImages() {\r\n        const check = API.checkNumberGreater0(ui.form.firstFewImages.value);\r\n        if (check.result) {\r\n            return check.value;\r\n        }\r\n        else {\r\n            EVT.fire(EVT.events.crawlError);\r\n            const msg = lang.transl('_下载前几张图片') + ' ' + lang.transl('_必须大于0');\r\n            log.error(msg);\r\n            window.alert(msg);\r\n            throw new Error(msg);\r\n        }\r\n    }\r\n    // 设置要获取的作品数或页数。有些页面使用，有些页面不使用。使用时再具体定义\r\n    getWantPage() { }\r\n    checkNotAllowPage() {\r\n        if (location.href.includes('novel')) {\r\n            EVT.fire(EVT.events.crawlError);\r\n            window.alert('Not support novel page!');\r\n            throw new Error('Not support novel page!');\r\n        }\r\n        if (location.href.includes('/tags.php')) {\r\n            EVT.fire(EVT.events.crawlError);\r\n            window.alert('Not support page!');\r\n            throw new Error('Not support page!');\r\n        }\r\n    }\r\n    // 获取多图作品设置。因为这个不属于过滤器 filter，所以在这里直接获取\r\n    getMultipleSetting() {\r\n        this.multipleImageWorks = parseInt(ui.form.multipleImageWorks.value);\r\n        if (this.multipleImageWorks === -1) {\r\n            log.warning(lang.transl('_不下载多图作品'));\r\n        }\r\n        // 获取作品张数设置\r\n        if (this.multipleImageWorks === 1) {\r\n            this.firstFewImages = this.getFirstFewImages();\r\n            log.warning(lang.transl('_多图作品下载前n张图片', this.firstFewImages.toString()));\r\n        }\r\n    }\r\n    // 准备抓取，进行抓取之前的一些检查工作。必要时可以在子类中改写\r\n    async readyCrawl() {\r\n        // 检查是否可以开始抓取\r\n        this.checkNotAllowPage();\r\n        if (!store.states.allowWork) {\r\n            window.alert(lang.transl('_当前任务尚未完成2'));\r\n            return;\r\n        }\r\n        EVT.fire(EVT.events.crawlStart);\r\n        log.clear();\r\n        log.success(lang.transl('_任务开始0'));\r\n        titleBar.changeTitle('↑');\r\n        ui.hideCenterPanel();\r\n        this.getWantPage();\r\n        filter.init();\r\n        this.getMultipleSetting();\r\n        await pageInfo.store();\r\n        // 进入第一个抓取方法\r\n        this.nextStep();\r\n    }\r\n    // 当可以开始抓取时，进入下一个流程。默认情况下，开始获取作品列表。如有不同，由子类具体定义\r\n    nextStep() {\r\n        this.getIdList();\r\n    }\r\n    // 作品列表获取完毕，开始抓取作品内容页\r\n    getIdListFinished() {\r\n        // 列表页获取完毕后，可以在这里重置一些变量\r\n        this.resetGetIdListStatus();\r\n        if (store.idList.length === 0) {\r\n            return this.noResult();\r\n        }\r\n        log.log(lang.transl('_当前作品个数', store.idList.length.toString()));\r\n        if (store.idList.length <= this.ajaxThreadsDefault) {\r\n            this.ajaxThreads = store.idList.length;\r\n        }\r\n        else {\r\n            this.ajaxThreads = this.ajaxThreadsDefault;\r\n        }\r\n        for (let i = 0; i < this.ajaxThreads; i++) {\r\n            this.getWorksData();\r\n        }\r\n    }\r\n    getPNo(pageCount) {\r\n        let pNo = pageCount;\r\n        if (this.multipleImageWorks === 1 && this.firstFewImages <= pNo) {\r\n            pNo = this.firstFewImages;\r\n        }\r\n        return pNo;\r\n    }\r\n    // 获取作品的数据\r\n    // 在重试时会传入要重试的 id\r\n    async getWorksData(id) {\r\n        id = id || store.idList.shift();\r\n        let data;\r\n        try {\r\n            // 发起请求\r\n            data = await API.getWorksData(id);\r\n        }\r\n        catch (error) {\r\n            //  请求成功，但 response.ok 错误。不重试请求，跳过该作品继续抓取\r\n            if (error.status) {\r\n                this.logErrorStatus(error.status, id);\r\n                this.afterGetWorksData();\r\n            }\r\n            else {\r\n                // 请求失败，会重试这个请求\r\n                setTimeout(() => {\r\n                    this.getWorksData(id);\r\n                }, 2000);\r\n            }\r\n            return;\r\n        }\r\n        // 获取需要检查的信息\r\n        const body = data.body;\r\n        const fullWidth = body.width; // 原图宽度\r\n        const fullHeight = body.height; // 原图高度\r\n        const bmk = body.bookmarkCount; // 收藏数\r\n        const tagArr = body.tags.tags; // 取出 tag 信息\r\n        const tags = []; // 保存 tag 列表\r\n        const tagTranslation = []; // 保存 tag 列表，附带翻译后的 tag\r\n        for (const tagData of tagArr) {\r\n            tags.push(tagData.tag);\r\n            tagTranslation.push(tagData.tag);\r\n            if (tagData.translation && tagData.translation.en) {\r\n                tagTranslation.push(tagData.translation.en);\r\n            }\r\n        }\r\n        const filterOpt = {\r\n            createDate: body.createDate,\r\n            id: body.illustId,\r\n            illustType: body.illustType,\r\n            tags: tags,\r\n            pageCount: body.pageCount,\r\n            bookmarkCount: bmk,\r\n            bookmarkData: body.bookmarkData,\r\n            width: fullWidth,\r\n            height: fullHeight\r\n        };\r\n        // 检查通过\r\n        if (filter.check(filterOpt)) {\r\n            const illustId = body.illustId;\r\n            const idNum = parseInt(body.illustId);\r\n            const title = body.illustTitle; // 作品标题\r\n            const userid = body.userId; // 用户id\r\n            const user = body.userName; // 用户名\r\n            const thumb = body.urls.thumb;\r\n            const pageCount = body.pageCount;\r\n            const bookmarked = !!body.bookmarkData;\r\n            // 时间原数据如 \"2019-12-18T22:23:37+00:00\"\r\n            // 网页上显示的日期是转换成了本地时间的，如北京时区显示为 \"2019-12-19\"，不是显示原始日期 \"2019-12-18\"。所以这里转换成本地时区的日期，和网页上保持一致，以免用户困惑。\r\n            const date0 = new Date(body.createDate);\r\n            const y = date0.getFullYear();\r\n            const m = (date0.getMonth() + 1).toString().padStart(2, '0');\r\n            const d = date0\r\n                .getDate()\r\n                .toString()\r\n                .padStart(2, '0');\r\n            const date = `${y}-${m}-${d}`;\r\n            let rank = ''; // 保存作品在排行榜上的编号\r\n            let testRank = store.getRankList(body.illustId);\r\n            if (testRank !== undefined) {\r\n                rank = '#' + testRank;\r\n            }\r\n            // 储存作品信息\r\n            if (body.illustType !== 2) {\r\n                // 插画或漫画\r\n                // 下载该作品的前面几张\r\n                const pNo = this.getPNo(body.pageCount);\r\n                const imgUrl = body.urls.original; // 作品的原图 URL\r\n                const tempExt = imgUrl.split('.');\r\n                const ext = tempExt[tempExt.length - 1];\r\n                // 添加作品信息\r\n                store.addResult({\r\n                    id: illustId,\r\n                    idNum: idNum,\r\n                    thumb: thumb,\r\n                    pageCount: pageCount,\r\n                    url: imgUrl,\r\n                    title: title,\r\n                    tags: tags,\r\n                    tagsTranslated: tagTranslation,\r\n                    user: user,\r\n                    userid: userid,\r\n                    fullWidth: fullWidth,\r\n                    fullHeight: fullHeight,\r\n                    ext: ext,\r\n                    bmk: bmk,\r\n                    bookmarked: bookmarked,\r\n                    date: date,\r\n                    type: body.illustType,\r\n                    rank: rank\r\n                }, pNo);\r\n                this.logImagesNo();\r\n            }\r\n            else if (body.illustType === 2) {\r\n                // 动图\r\n                // 获取动图的信息\r\n                const meta = await API.getUgoiraMeta(illustId);\r\n                // 动图帧延迟数据\r\n                const ugoiraInfo = {\r\n                    frames: meta.body.frames,\r\n                    mime_type: meta.body.mime_type\r\n                };\r\n                const ext = ui.form.ugoiraSaveAs.value; // 扩展名可能是 webm、gif、zip\r\n                store.addResult({\r\n                    id: illustId,\r\n                    idNum: idNum,\r\n                    thumb: thumb,\r\n                    pageCount: pageCount,\r\n                    url: meta.body.originalSrc,\r\n                    title: title,\r\n                    tags: tags,\r\n                    tagsTranslated: tagTranslation,\r\n                    user: user,\r\n                    userid: userid,\r\n                    fullWidth: fullWidth,\r\n                    fullHeight: fullHeight,\r\n                    ext: ext,\r\n                    bmk: bmk,\r\n                    bookmarked: bookmarked,\r\n                    date: date,\r\n                    type: body.illustType,\r\n                    rank: rank,\r\n                    ugoiraInfo: ugoiraInfo\r\n                });\r\n                this.logImagesNo();\r\n            }\r\n        }\r\n        this.afterGetWorksData();\r\n    }\r\n    // 每当获取完一个作品的信息\r\n    afterGetWorksData() {\r\n        if (store.idList.length > 0) {\r\n            // 如果存在下一个作品，则\r\n            this.getWorksData();\r\n        }\r\n        else {\r\n            // 没有剩余作品\r\n            this.ajaxThreadsFinished++;\r\n            if (this.ajaxThreadsFinished === this.ajaxThreads) {\r\n                // 如果所有并发请求都执行完毕，复位\r\n                this.ajaxThreadsFinished = 0;\r\n                this.crawlFinished();\r\n            }\r\n        }\r\n    }\r\n    // 抓取完毕\r\n    crawlFinished() {\r\n        if (store.result.length === 0) {\r\n            return this.noResult();\r\n        }\r\n        this.sortResult();\r\n        log.log(lang.transl('_抓取图片网址的数量', store.result.length.toString()));\r\n        log.log(lang.transl('_抓取完毕'), 2);\r\n        EVT.fire(EVT.events.crawlFinish);\r\n        // 显示中间面板\r\n        if (!store.states.quickDownload) {\r\n            ui.showCenterPanel();\r\n        }\r\n    }\r\n    // 网络请求状态异常时输出提示\r\n    logErrorStatus(status, id) {\r\n        log.error(lang.transl('_无权访问2', id), 1);\r\n        switch (status) {\r\n            case 0:\r\n                console.log(lang.transl('_作品页状态码0'));\r\n                break;\r\n            case 400:\r\n                console.log(lang.transl('_作品页状态码400'));\r\n                break;\r\n            case 403:\r\n                console.log(lang.transl('_作品页状态码403'));\r\n                break;\r\n            case 404:\r\n                console.log(lang.transl('_作品页状态码404') + ' ' + id);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    // 在抓取图片网址时，输出提示\r\n    logImagesNo() {\r\n        log.log(lang.transl('_抓取图片网址的数量', store.result.length.toString()), 1, false);\r\n    }\r\n    // 抓取结果为 0 时输出提示\r\n    noResult() {\r\n        EVT.fire(EVT.events.crawlEmpty);\r\n        titleBar.reset();\r\n        log.error(lang.transl('_抓取结果为零'), 2);\r\n        window.alert(lang.transl('_抓取结果为零'));\r\n    }\r\n    // 抓取完成后，对结果进行排序\r\n    sortResult() { }\r\n}\r\nexport { CrawlPageBase };\r\n","// 抓取 pixivision 页面\r\nimport { CrawlPageBase } from './CrawlPageBase';\r\nimport { store } from './Store';\r\nclass CrawlPixivisionPage extends CrawlPageBase {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.tested = 0; // 检查图片后缀名时的计数\r\n    }\r\n    nextStep() {\r\n        this.getPixivision();\r\n    }\r\n    getIdList() { }\r\n    resetGetIdListStatus() { }\r\n    // 保存要下载的图片的信息\r\n    addResult(id, url, ext) {\r\n        store.addResult({\r\n            id: id,\r\n            url: url,\r\n            ext: ext\r\n        });\r\n    }\r\n    getPixivision() {\r\n        const a = document.querySelector('a[data-gtm-action=ClickCategory]');\r\n        const type = a.dataset.gtmLabel;\r\n        if (type === 'illustration') {\r\n            // 插画页面，需要对图片进行测试获取原图 url\r\n            const imageList = document.querySelectorAll('.am__work__main img');\r\n            const urls = Array.from(imageList).map(el => {\r\n                return el.src\r\n                    .replace('c/768x1200_80/img-master', 'img-original')\r\n                    .replace('_master1200', '');\r\n            });\r\n            this.tested = 0;\r\n            urls.forEach(url => {\r\n                let arr = url.split('/');\r\n                const id = arr[arr.length - 1].split('.')[0]; // 取出作品 id\r\n                this.testExtName(url, urls.length, id);\r\n            });\r\n        }\r\n        else {\r\n            // 漫画和 cosplay ，直接保存页面上的图片\r\n            let selector = '';\r\n            if (type === 'manga') {\r\n                selector = '.am__work__illust';\r\n            }\r\n            else if (type === 'cosplay') {\r\n                selector = '.fab__image-block__image img';\r\n            }\r\n            // 把图片url添加进数组\r\n            const imageList = document.querySelectorAll(selector);\r\n            Array.from(imageList).forEach(el => {\r\n                const url = el.src;\r\n                if (url !== 'https://i.pximg.net/imgaz/upload/20170407/256097898.jpg') {\r\n                    // 跳过Cure的logo图片\r\n                    const arr = url.split('/');\r\n                    const id = arr[arr.length - 1].split('.')[0]; // 作品id\r\n                    const ext = arr[arr.length - 1]; // 扩展名\r\n                    this.addResult(id, url, ext);\r\n                }\r\n            });\r\n            this.crawlFinished();\r\n        }\r\n    }\r\n    // 测试图片 url 是否正确的函数。pixivision 页面直接获取的图片 url，后缀都是jpg的，所以要测试实际上是jpg还是png\r\n    testExtName(url, imgNumber, id) {\r\n        let ext = '';\r\n        const testImg = new Image();\r\n        testImg.src = url;\r\n        testImg.onload = () => next(true);\r\n        testImg.onerror = () => next(false);\r\n        let next = (bool) => {\r\n            if (bool) {\r\n                ext = 'jpg';\r\n            }\r\n            else {\r\n                url = url.replace('.jpg', '.png');\r\n                ext = 'png';\r\n            }\r\n            this.addResult(id, url, ext);\r\n            this.logImagesNo();\r\n            if (imgNumber !== undefined) {\r\n                this.tested++;\r\n                if (this.tested === imgNumber) {\r\n                    // 如果所有请求都执行完毕\r\n                    this.crawlFinished();\r\n                }\r\n            }\r\n        };\r\n    }\r\n    destroy() { }\r\n}\r\nexport { CrawlPixivisionPage };\r\n","// 抓取排行榜页面\r\nimport { CrawlPageBase } from './CrawlPageBase';\r\nimport { ui } from './UI';\r\nimport { filter } from './Filter';\r\nimport { lang } from './Lang';\r\nimport { API } from './API';\r\nimport { store } from './Store';\r\nimport { log } from './Log';\r\nclass CrawlRankingPage extends CrawlPageBase {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.pageCount = 10; // 排行榜的页数\r\n        this.option = this.resetOption();\r\n    }\r\n    resetOption() {\r\n        return { mode: 'daily', p: 1, worksType: '', date: '' };\r\n    }\r\n    setPartNum() {\r\n        // 设置页数。排行榜页面一页有50张作品，当页面到达底部时会加载下一页\r\n        if (location.pathname.includes('r18g')) {\r\n            // r18g 只有1个榜单，固定1页\r\n            this.pageCount = 1;\r\n        }\r\n        else if (location.pathname.includes('_r18')) {\r\n            // r18 模式，这里的6是最大值，有的排行榜并没有6页\r\n            this.pageCount = 6;\r\n        }\r\n        else {\r\n            // 普通模式，这里的10也是最大值。如果实际没有10页，则在检测到404页面的时候停止抓取下一页\r\n            this.pageCount = 10;\r\n        }\r\n    }\r\n    getWantPage() {\r\n        this.listPageFinished = 0;\r\n        // 检查下载页数的设置\r\n        this.crawlNumber = this.checkWantPageInput(lang.transl('_checkWantPageRule1Arg12'), lang.transl('_checkWantPageRule1Arg4'));\r\n        // 如果设置的作品个数是 -1，则设置为下载所有作品\r\n        if (this.crawlNumber === -1) {\r\n            this.crawlNumber = 500;\r\n        }\r\n    }\r\n    nextStep() {\r\n        // 设置 option 信息\r\n        // mode 一定要有值，其他选项不需要\r\n        this.option = this.resetOption();\r\n        this.option.mode = API.getURLField(location.href, 'mode') || 'daily';\r\n        this.option.worksType = API.getURLField(location.href, 'content');\r\n        this.option.date = API.getURLField(location.href, 'date');\r\n        this.startpageNo = 1;\r\n        this.setPartNum();\r\n        this.getIdList();\r\n    }\r\n    async getIdList() {\r\n        this.option.p = this.startpageNo + this.listPageFinished;\r\n        // 发起请求，获取作品列表\r\n        let data;\r\n        try {\r\n            data = await API.getRankingData(this.option);\r\n        }\r\n        catch (error) {\r\n            if (error.status === 404) {\r\n                // 如果发生了404错误，则中断抓取，直接下载已有部分。因为可能确实没有下一部分了\r\n                console.log('404错误，直接下载已有部分');\r\n                this.getIdListFinished();\r\n            }\r\n            return;\r\n        }\r\n        this.listPageFinished++;\r\n        let complete = false; // 如果数量足够，就标记为完成\r\n        const contents = data.contents; // 取出作品信息列表\r\n        for (const data of contents) {\r\n            // 下载排行榜所有作品时，会检查是否已经抓取到了指定数量的作品。下载首次登场作品时不检查，抓取所有作品。\r\n            if (ui.form.debut.value === '0' && data.rank > this.crawlNumber) {\r\n                complete = true;\r\n                break;\r\n            }\r\n            // 目前，数据里并没有包含收藏数量，所以在这里没办法检查收藏数量要求\r\n            const filterOpt = {\r\n                id: data.illust_id,\r\n                illustType: parseInt(data.illust_type),\r\n                tags: data.tags,\r\n                pageCount: parseInt(data.illust_page_count),\r\n                bookmarkData: data.is_bookmarked,\r\n                width: data.width,\r\n                height: data.height,\r\n                yes_rank: data.yes_rank\r\n            };\r\n            if (filter.check(filterOpt)) {\r\n                store.setRankList(data.illust_id.toString(), data.rank.toString());\r\n                store.idList.push(data.illust_id.toString());\r\n            }\r\n        }\r\n        log.log(lang.transl('_排行榜进度', this.listPageFinished.toString()), 1, false);\r\n        // 抓取完毕\r\n        if (complete || this.listPageFinished === this.pageCount) {\r\n            this.getIdListFinished();\r\n        }\r\n        else {\r\n            // 继续抓取\r\n            this.getIdList();\r\n        }\r\n    }\r\n    resetGetIdListStatus() {\r\n        this.listPageFinished = 0;\r\n        ui.form.debut.value = '0';\r\n    }\r\n    destroy() { }\r\n}\r\nexport { CrawlRankingPage };\r\n","// 抓取搜索页\r\nimport { CrawlPageBase } from './CrawlPageBase';\r\nimport { filter } from './Filter';\r\nimport { lang } from './Lang';\r\nimport { API } from './API';\r\nimport { store } from './Store';\r\nimport { log } from './Log';\r\nimport { EVT } from './EVT';\r\nimport { pageInfo } from './PageInfo';\r\nimport { ui } from './UI';\r\nclass CrawlSearchPage extends CrawlPageBase {\r\n    constructor() {\r\n        super();\r\n        this.worksType = '';\r\n        this.option = {};\r\n        this.worksNoPerPage = 60; // 每个页面有多少个作品\r\n        this.needCrawlPageCount = 0; // 一共有有多少个列表页面\r\n        this.sendCrawlTaskCount = 0; // 已经抓取了多少个列表页面\r\n        this.allOption = [\r\n            'order',\r\n            'type',\r\n            'wlt',\r\n            'hlt',\r\n            'ratio',\r\n            'tool',\r\n            's_mode',\r\n            'mode',\r\n            'scd',\r\n            'ecd',\r\n            'blt',\r\n            'bgt'\r\n        ];\r\n        this.resultMeta = []; // 每次“开始筛选”完成后，储存当时所有结果，以备“在结果中筛选”使用\r\n        this.worksWrap = null;\r\n        this.deleteId = 0; // 手动删除时，要删除的作品的 id\r\n        this.crawlWorks = false; // 是否在抓取作品数据（“开始筛选”时改为 true）\r\n        // 在页面显示作品\r\n        this.addWork = (event) => {\r\n            if (!this.worksWrap) {\r\n                return;\r\n            }\r\n            const data = event.detail.data;\r\n            let multipleHTML = '';\r\n            if (data.pageCount > 1) {\r\n                multipleHTML = `\n        <div class=\"sc-fzXfOZ fjaNWC\">\n                  <svg viewBox=\"0 0 9 10\" width=\"9\" height=\"10\" class=\"sc-fzXfOY bAzGJs\">\n                      <path d=\"M8,3 C8.55228475,3 9,3.44771525 9,4 L9,9 C9,9.55228475 8.55228475,10 8,10 L3,10\n        C2.44771525,10 2,9.55228475 2,9 L6,9 C7.1045695,9 8,8.1045695 8,7 L8,3 Z M1,1 L6,1\n        C6.55228475,1 7,1.44771525 7,2 L7,7 C7,7.55228475 6.55228475,8 6,8 L1,8 C0.44771525,8 0,7.55228475 0,7 L0,2\n        C0,1.44771525 0.44771525,1 1,1 Z\"></path>\n                    </svg><span class=\"sc-fzXfOX bAzGJr\">${data.pageCount}</span></div>\n                    `;\r\n            }\r\n            let ugoiraHTML = '';\r\n            if (data.ugoiraInfo) {\r\n                ugoiraHTML = `\n        <svg viewBox=\"0 0 24 24\" class=\"sc-fzXfOy PhQhi sc-fzXfPK bAzGJL\" style=\"width: 48px; height: 48px;\">\n          <circle cx=\"12\" cy=\"12\" r=\"10\" class=\"sc-fzXfOz bAzGJZ\"></circle>\n          <path d=\"M9,8.74841664 L9,15.2515834 C9,15.8038681 9.44771525,16.2515834 10,16.2515834\n              C10.1782928,16.2515834 10.3533435,16.2039156 10.5070201,16.1135176 L16.0347118,12.8619342\n              C16.510745,12.5819147 16.6696454,11.969013 16.3896259,11.4929799\n              C16.3034179,11.3464262 16.1812655,11.2242738 16.0347118,11.1380658 L10.5070201,7.88648243\n              C10.030987,7.60646294 9.41808527,7.76536339 9.13806578,8.24139652\n              C9.04766776,8.39507316 9,8.57012386 9,8.74841664 Z\"></path>\n        </svg>`;\r\n            }\r\n            let r18HTML = '';\r\n            if (data.tags.includes('R-18') || data.tags.includes('R-18G')) {\r\n                r18HTML = `\n      <div class=\"sc-fzXfPe bAzGKl\">\n        <div class=\"sc-fzXfPf bAzGKm\">\n          <div class=\"sc-fzXfPb gGhRgx\">R-18</div>\n        </div>\n      </div>`;\r\n            }\r\n            const tagString = encodeURI(data.tags.join(' '));\r\n            // 添加收藏的作品，让收藏图标变红\r\n            const bookmarkedClass = 'bookmarked';\r\n            const bookmarkedFlag = data.bookmarked ? bookmarkedClass : '';\r\n            const html = `\n    <li class=\"sc-LzNQd lmXjIY\" data-id=\"${data.idNum}\">\n    <div class=\"sc-fzXfQr bUhGlE\">\n      <div class=\"sc-fzXfQp euhEKT\">\n        <div width=\"184\" height=\"184\" class=\"sc-fzXfPc bnaqNl\"><a target=\"_blank\" class=\"sc-fzXfPH jPCTIp\" href=\"/artworks/${data.idNum}\">\n            <!--顶部横幅-->\n            <div class=\"sc-fzXfPd bAzGKk\">\n\n            <!--R-18 标记-->\n            ${r18HTML}\n\n            <!--多图作品标记-->\n            ${multipleHTML}\n              \n            </div>\n            <!--图片部分-->\n            <div class=\"sc-fzXfPL fRnGwV\"><img\n                   src=\"${data.thumb}\"\n                   alt=\"${data.title}\" class=\"sc-fzXfPM iwqMqq\"\n                   style=\"object-fit: cover; object-position: center center;\">\n              <!-- 动图 svg -->\n              ${ugoiraHTML}\n              </div>\n          </a>\n          <!--添加显示收藏数-->\n          <div class=\"xz-bmkCount\">${data.bmk}</div>\n          <!--收藏按钮-->\n          <div class=\"sc-fzXfQq bAzGLe\">\n            <div class=\"\">\n            <button type=\"button\" class=\"sc-fzXfOw bAzGJW xz-addBMK\">\n            <svg viewBox=\"0 0 32 32\" width=\"32\" height=\"32\" class=\"sc-fzXfOs gTsQRf ${bookmarkedFlag}\">\n                  <path d=\"\n    M21,5.5 C24.8659932,5.5 28,8.63400675 28,12.5 C28,18.2694439 24.2975093,23.1517313 17.2206059,27.1100183\n    C16.4622493,27.5342993 15.5379984,27.5343235 14.779626,27.110148 C7.70250208,23.1517462 4,18.2694529 4,12.5\n    C4,8.63400691 7.13400681,5.5 11,5.5 C12.829814,5.5 14.6210123,6.4144028 16,7.8282366\n    C17.3789877,6.4144028 19.170186,5.5 21,5.5 Z\"></path>\n                  <path d=\"M16,11.3317089 C15.0857201,9.28334665 13.0491506,7.5 11,7.5\n    C8.23857625,7.5 6,9.73857647 6,12.5 C6,17.4386065 9.2519779,21.7268174 15.7559337,25.3646328\n    C15.9076021,25.4494645 16.092439,25.4494644 16.2441073,25.3646326 C22.7480325,21.7268037 26,17.4385986 26,12.5\n    C26,9.73857625 23.7614237,7.5 21,7.5 C18.9508494,7.5 16.9142799,9.28334665 16,11.3317089 Z\"\n                        class=\"sc-fzXfOr bAzGJR\"></path>\n                </svg></button></div>\n          </div>\n        <!--收藏按钮结束-->\n        </div>\n      </div>\n      <!--标题名-->\n      <a target=\"_blank\" class=\"sc-fzXfQs cyvKvA\" href=\"/artworks/${data.idNum}\">${data.title}</a>\n      <!--底部-->\n      <div class=\"sc-fzXfQl bAzGKZ\">\n      <!--作者信息-->\n      <div class=\"sc-fzXfQm bAzGLa\">\n          <div class=\"sc-fzXfQn bAzGLb\"><a target=\"_blank\" href=\"/member.php?id=${data.userid}\">\n              <div role=\"img\" size=\"16\" class=\"sc-LzLqL gMkIkk\"></div>\n            </a></div><a target=\"_blank\" href=\"/member.php?id=${data.userid}\">\n            <div class=\"sc-fzXfQo fbWLbf\">${data.user}</div>\n          </a>\n        </div>\n      </div>\n    </div>\n  </li>\n    `;\r\n            // 添加作品\r\n            const li2 = document.createElement('li');\r\n            li2.innerHTML = html;\r\n            const li = li2.children[0];\r\n            this.worksWrap.appendChild(li);\r\n            // 绑定收藏按钮的事件\r\n            const addBMKBtn = li.querySelector('.xz-addBMK');\r\n            addBMKBtn.addEventListener('click', function () {\r\n                const e = new CustomEvent('addBMK', {\r\n                    detail: { data: { id: data.idNum, tags: tagString } }\r\n                });\r\n                window.dispatchEvent(e);\r\n                this.classList.add(bookmarkedClass);\r\n            });\r\n        };\r\n        this.addBookmark = (event) => {\r\n            const data = event.detail.data;\r\n            API.addBookmark(data.id.toString(), data.tags, API.getToken(), false);\r\n            this.resultMeta.forEach(result => {\r\n                if (result.idNum === data.id) {\r\n                    result.bookmarked = true;\r\n                }\r\n            });\r\n            // this.reAddResult()\r\n        };\r\n        // “开始筛选”完成后，保存筛选结果的元数据，并重排结果\r\n        this.onCrawlFinish = () => {\r\n            if (this.crawlWorks) {\r\n                this.resultMeta = [...store.resultMeta];\r\n                this.reAddResult();\r\n            }\r\n        };\r\n        // 清除多图作品\r\n        this.clearMultiple = () => {\r\n            this.filterResult(data => {\r\n                return data.pageCount <= 1;\r\n            });\r\n        };\r\n        // 清除动图作品\r\n        this.clearUgoira = () => {\r\n            this.filterResult(data => {\r\n                return !data.ugoiraInfo;\r\n            });\r\n        };\r\n        // 手动删除作品\r\n        this.deleteWork = (event) => {\r\n            const el = event.detail.data;\r\n            this.deleteId = parseInt(el.dataset.id);\r\n            this.filterResult(data => {\r\n                return data.idNum !== this.deleteId;\r\n            });\r\n        };\r\n        store.states.notAutoDownload = true;\r\n        window.addEventListener(EVT.events.addResult, this.addWork);\r\n        window.addEventListener('addBMK', this.addBookmark);\r\n        window.addEventListener(EVT.events.crawlFinish, this.onCrawlFinish);\r\n        window.addEventListener(EVT.events.clearMultiple, this.clearMultiple);\r\n        window.addEventListener(EVT.events.clearUgoira, this.clearUgoira);\r\n        window.addEventListener(EVT.events.deleteWork, this.deleteWork);\r\n    }\r\n    startScreen() {\r\n        if (!store.states.allowWork) {\r\n            return alert(lang.transl('_当前任务尚未完成'));\r\n        }\r\n        this.crawlWorks = true;\r\n        this.readyCrawl();\r\n    }\r\n    async nextStep() {\r\n        this.initFetchURL();\r\n        this.needCrawlPageCount = await this.calcNeedCrawlPageCount();\r\n        if (this.needCrawlPageCount === 0) {\r\n            return this.noResult();\r\n        }\r\n        this.startGetIdList();\r\n        this.clearWorks();\r\n    }\r\n    getWorksWrap() {\r\n        const test = document.querySelectorAll('#root>*')[2];\r\n        if (test) {\r\n            const test2 = test.lastChild;\r\n            if (test2) {\r\n                return test2.querySelector('ul');\r\n            }\r\n        }\r\n    }\r\n    showCount() {\r\n        const countEl = document.querySelector('.dkENRa');\r\n        if (countEl) {\r\n            countEl.textContent = this.resultMeta.length.toString();\r\n        }\r\n    }\r\n    clearWorks() {\r\n        this.worksWrap = this.getWorksWrap();\r\n        if (this.worksWrap) {\r\n            this.worksWrap.innerHTML = '';\r\n        }\r\n    }\r\n    // 传入函数，过滤符合条件的结果\r\n    filterResult(callback) {\r\n        ui.hideCenterPanel();\r\n        log.clear();\r\n        const nowLength = this.resultMeta.length; // 储存过滤前的结果数量\r\n        this.resultMeta = this.resultMeta.filter(callback);\r\n        // 如果过滤后，作品发生了改变，则重新生成结果，并会重排作品。否则不执行，以免浪费资源\r\n        if (this.resultMeta.length !== nowLength) {\r\n            this.reAddResult();\r\n        }\r\n        // 即使没有重新生成结果，也要发布 crawlFinish 事件，筛选完毕相当于某种意义上的抓取完毕，通知下载控制器可以准备下载了。这样也会在日志上显示下载数量。\r\n        EVT.fire(EVT.events.crawlFinish);\r\n    }\r\n    // 当筛选结果的元数据改变时，重新生成抓取结果\r\n    // 在此过程中，会清空之前的作品元素，重新生成作品元素\r\n    reAddResult() {\r\n        store.resetResult();\r\n        this.clearWorks();\r\n        this.resultMeta.forEach(data => {\r\n            const pNo = this.getPNo(data.pageCount);\r\n            store.addResult(data, pNo);\r\n        });\r\n        this.showCount();\r\n        this.crawlWorks = false;\r\n        store.states.notAutoDownload = true;\r\n        EVT.fire(EVT.events.worksUpdate);\r\n    }\r\n    // 在当前结果中再次筛选，会修改第一次筛选的结果\r\n    screenInResult() {\r\n        if (!store.states.allowWork) {\r\n            return alert(lang.transl('_当前任务尚未完成'));\r\n        }\r\n        log.clear();\r\n        filter.init();\r\n        this.getMultipleSetting();\r\n        this.filterResult(data => {\r\n            const filterOpt = {\r\n                id: data.id,\r\n                illustType: data.type,\r\n                pageCount: data.pageCount,\r\n                tags: data.tags,\r\n                bookmarkCount: data.bmk,\r\n                bookmarkData: data.bookmarked,\r\n                width: data.fullWidth,\r\n                height: data.fullHeight,\r\n                createDate: data.date\r\n            };\r\n            return filter.check(filterOpt);\r\n        });\r\n    }\r\n    getWantPage() {\r\n        this.crawlNumber = this.checkWantPageInput(lang.transl('_checkWantPageRule1Arg6'), lang.transl('_checkWantPageRule1Arg7'));\r\n        if (this.crawlNumber === -1 || this.crawlNumber > this.maxCount) {\r\n            this.crawlNumber = this.maxCount;\r\n        }\r\n    }\r\n    // 获取搜索页的数据。因为有多处使用，所以进行了封装\r\n    async getSearchData(p) {\r\n        let data = await API.getSearchData(pageInfo.getPageTag, this.worksType, p, this.option);\r\n        return data.body.illust || data.body.illustManga || data.body.manga;\r\n    }\r\n    // 组织要请求的 url 中的参数\r\n    initFetchURL() {\r\n        // 从 URL 中获取分类。可能有语言标识。\r\n        /*\r\n        https://www.pixiv.net/tags/Fate%2FGrandOrder/illustrations\r\n        https://www.pixiv.net/en/tags/Fate%2FGrandOrder/illustrations\r\n        */\r\n        let URLType = location.pathname.split('tags/')[1].split('/')[1];\r\n        // 但在“顶部”页面的时候是没有分类的，会是 undefined\r\n        if (URLType === undefined) {\r\n            URLType = '';\r\n        }\r\n        switch (URLType) {\r\n            case '':\r\n                this.worksType = 'artworks';\r\n                break;\r\n            case 'illustrations':\r\n            case 'illust_and_ugoira':\r\n            case 'ugoira':\r\n            case 'illust':\r\n                this.worksType = 'illustrations';\r\n                break;\r\n            case 'manga':\r\n                this.worksType = 'manga';\r\n                break;\r\n            default:\r\n                this.worksType = 'artworks';\r\n                break;\r\n        }\r\n        let p = API.getURLField(location.href, 'p');\r\n        this.startpageNo = parseInt(p) || 1;\r\n        // 从页面 url 中获取可以使用的选项\r\n        this.option = {};\r\n        this.allOption.forEach(param => {\r\n            let value = API.getURLField(location.href, param);\r\n            if (value !== '') {\r\n                this.option[param] = value;\r\n            }\r\n        });\r\n    }\r\n    // 计算应该抓取多少页\r\n    async calcNeedCrawlPageCount() {\r\n        let data = await this.getSearchData(1);\r\n        // 计算总页数\r\n        let pageCount = Math.ceil(data.total / this.worksNoPerPage);\r\n        if (pageCount > this.maxCount) {\r\n            // 最大为 1000\r\n            pageCount = this.maxCount;\r\n        }\r\n        // 计算从本页开始抓取的话，有多少页\r\n        let needFetchPage = pageCount - this.startpageNo + 1;\r\n        // 比较用户设置的页数，取较小的那个数值\r\n        if (needFetchPage < this.crawlNumber) {\r\n            return needFetchPage;\r\n        }\r\n        else {\r\n            return this.crawlNumber;\r\n        }\r\n    }\r\n    // 计算页数之后，准备建立并发抓取线程\r\n    startGetIdList() {\r\n        if (this.needCrawlPageCount <= this.ajaxThreadsDefault) {\r\n            this.ajaxThreads = this.needCrawlPageCount;\r\n        }\r\n        else {\r\n            this.ajaxThreads = this.ajaxThreadsDefault;\r\n        }\r\n        for (let i = 0; i < this.ajaxThreads; i++) {\r\n            this.getIdList();\r\n        }\r\n    }\r\n    async getIdList() {\r\n        let p = this.startpageNo + this.sendCrawlTaskCount;\r\n        this.sendCrawlTaskCount++;\r\n        // 发起请求，获取列表页\r\n        let data;\r\n        try {\r\n            data = await this.getSearchData(p);\r\n        }\r\n        catch (_a) {\r\n            this.getIdList();\r\n            return;\r\n        }\r\n        data = data.data;\r\n        for (const nowData of data) {\r\n            // 排除广告信息\r\n            if (nowData.isAdContainer) {\r\n                continue;\r\n            }\r\n            const filterOpt = {\r\n                id: nowData.illustId,\r\n                width: nowData.width,\r\n                height: nowData.height,\r\n                pageCount: nowData.pageCount,\r\n                bookmarkData: nowData.bookmarkData,\r\n                illustType: nowData.illustType,\r\n                tags: nowData.tags\r\n            };\r\n            if (filter.check(filterOpt)) {\r\n                store.idList.push(nowData.illustId);\r\n            }\r\n        }\r\n        this.listPageFinished++;\r\n        log.log(lang.transl('_列表页抓取进度', this.listPageFinished.toString()), 1, false);\r\n        if (this.sendCrawlTaskCount + 1 <= this.needCrawlPageCount) {\r\n            // 继续发送抓取任务（+1 是因为 sendCrawlTaskCount 从 0 开始）\r\n            this.getIdList();\r\n        }\r\n        else {\r\n            // 抓取任务已经全部发送\r\n            if (this.listPageFinished === this.needCrawlPageCount) {\r\n                // 抓取任务全部完成\r\n                log.log(lang.transl('_列表页抓取完成'));\r\n                this.getIdListFinished();\r\n            }\r\n        }\r\n    }\r\n    resetGetIdListStatus() {\r\n        this.listPageFinished = 0;\r\n        this.sendCrawlTaskCount = 0;\r\n    }\r\n    // 搜索页把下载任务按收藏数从高到低下载\r\n    sortResult() {\r\n        store.resultMeta.sort(API.sortByProperty('bmk'));\r\n        store.result.sort(API.sortByProperty('bmk'));\r\n    }\r\n    destroy() {\r\n        window.removeEventListener(EVT.events.addResult, this.addWork);\r\n        window.removeEventListener(EVT.events.crawlFinish, this.onCrawlFinish);\r\n    }\r\n}\r\nexport { CrawlSearchPage };\r\n","// 抓取用户页面\r\nimport { CrawlPageBase } from './CrawlPageBase';\r\nimport { lang } from './Lang';\r\nimport { API } from './API';\r\nimport { store } from './Store';\r\nimport { log } from './Log';\r\nimport { EVT } from './EVT';\r\nimport { DOM } from './DOM';\r\nclass CrawlUserPage extends CrawlPageBase {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.idList = []; // 储存从列表页获取到的 id\r\n        this.hasTag = false; // 是否带 tag\r\n        this.tag = ''; // 储存当前页面带的 tag，不过有时并没有\r\n        this.listType = 0; // pageType 2 里的页面类型，都是列表页\r\n        this.requsetNumber = 0; // 根据页数，计算要抓取的作品个数\r\n        this.onceRequest = 100; // 每次请求多少个数量\r\n        this.offset = 0; // 要去掉的作品数量\r\n        this.crawlRecommended = false; // 是否抓取推荐作品（收藏页面下方）\r\n    }\r\n    getWantPage() {\r\n        let pageTip = lang.transl('_checkWantPageRule1Arg7');\r\n        if (this.crawlRecommended) {\r\n            pageTip = lang.transl('_checkWantPageRule1Arg11');\r\n        }\r\n        this.crawlNumber = this.checkWantPageInput(lang.transl('_checkWantPageRule1Arg6'), pageTip);\r\n    }\r\n    nextStep() {\r\n        if (this.crawlRecommended) {\r\n            // 下载推荐图片\r\n            this.getRecommendedList();\r\n        }\r\n        else {\r\n            this.readyGetIdList();\r\n        }\r\n    }\r\n    readyGetIdList() {\r\n        // 每次开始时重置一些条件\r\n        this.offset = 0;\r\n        this.idList = [];\r\n        this.listType = 0;\r\n        // 每页个数\r\n        let onceNumber = 48; // 新版每页 48 个作品（因为新版不显示无法访问的作品，所以有时候一页不足这个数量）\r\n        // 旧版每页 20 个作品\r\n        if (document.querySelector('.user-name')) {\r\n            onceNumber = 20;\r\n        }\r\n        // 如果前面有页数，就去掉前面页数的作品数量。即：从本页开始下载\r\n        const nowPage = API.getURLField(location.href, 'p'); // 判断当前处于第几页，页码从 1 开始。也可能没有页码\r\n        if (nowPage) {\r\n            this.offset = (parseInt(nowPage) - 1) * onceNumber;\r\n        }\r\n        if (this.offset < 0) {\r\n            this.offset = 0;\r\n        }\r\n        // 根据页数设置，计算要下载的个数\r\n        this.requsetNumber = 0;\r\n        if (this.crawlNumber === -1) {\r\n            this.requsetNumber = 9999999;\r\n        }\r\n        else {\r\n            this.requsetNumber = onceNumber * this.crawlNumber;\r\n        }\r\n        // 设置列表页面的类型\r\n        // listType:\r\n        // 0 插画和漫画全都要，但是不带 tag\r\n        // 4 插画和漫画全都要，带 tag\r\n        // 1 只要插画\r\n        // 2 只要漫画\r\n        // 3 书签作品\r\n        if (location.href.includes('member.php?id=')) {\r\n            // 用户资料页主页\r\n            this.listType = 0;\r\n        }\r\n        else if (/member_illust\\.php\\?.*id=/.test(location.href)) {\r\n            // 作品列表页\r\n            if (API.getURLField(location.href, 'type') === 'illust') {\r\n                // 插画分类\r\n                this.listType = 1;\r\n            }\r\n            else if (API.getURLField(location.href, 'type') === 'manga') {\r\n                // 漫画分类\r\n                this.listType = 2;\r\n            }\r\n            else if (API.getURLField(location.href, 'tag')) {\r\n                // url 里没有标识插画还是漫画，但是有 tag，则是在用户首页点击了 tag，需要同时获取插画和漫画\r\n                this.listType = 4;\r\n            }\r\n        }\r\n        else if (location.href.includes('bookmark.php')) {\r\n            // 书签页面，需要多次循环获取\r\n            this.listType = 3;\r\n        }\r\n        // 是否带有 tag\r\n        this.tag = decodeURI(API.getURLField(location.href, 'tag'));\r\n        if (this.listType === 3) {\r\n            // 书签页面固定设置为有 tag（虽然有时候并没有带 tag，但数据结构和带 tag 是一样的）\r\n            this.hasTag = true;\r\n        }\r\n        else {\r\n            this.hasTag = !!this.tag;\r\n        }\r\n        // 根据不同的页面类型，选择不同的 API 来获取 id 列表\r\n        /*\r\n        1.非书签页\r\n          1.1 无 tag 通过 profileAll 获取\r\n          1.2 有 tag 通过指定的作品类型获取\r\n        2.书签页，单独抓取\r\n         */\r\n        if (this.listType !== 3) {\r\n            if (!this.hasTag) {\r\n                this.getIdList();\r\n            }\r\n            else {\r\n                if (this.listType === 1) {\r\n                    this.getIdListByTag('illusts');\r\n                }\r\n                else if (this.listType === 2) {\r\n                    this.getIdListByTag('manga');\r\n                }\r\n                else if (this.listType === 4) {\r\n                    this.getIdListByTag('illustmanga');\r\n                }\r\n                else {\r\n                    // 无法处理的情况\r\n                    EVT.fire(EVT.events.crawlError);\r\n                    throw new Error('Unknown instance.');\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            // 书签页面\r\n            // 在“未分类”页面时，设置 tag\r\n            if (parseInt(API.getURLField(location.href, 'untagged')) === 1) {\r\n                this.tag = '未分類';\r\n            }\r\n            // 判断是公开收藏还是非公开收藏\r\n            let hide = false;\r\n            if (API.getURLField(location.href, 'rest') === 'hide') {\r\n                hide = true;\r\n            }\r\n            this.getBookmarkIdList(hide);\r\n        }\r\n        log.log(lang.transl('_正在抓取'));\r\n        if (this.listType === 3 && this.crawlNumber === -1) {\r\n            log.log(lang.transl('_获取全部书签作品'));\r\n        }\r\n    }\r\n    // 获取用户的全部作品列表\r\n    async getIdList() {\r\n        let type = [];\r\n        // 插画和漫画列表页\r\n        if (this.listType === 0) {\r\n            type = ['illusts', 'manga'];\r\n        }\r\n        else if (this.listType === 1) {\r\n            // 插画列表页，包含动图\r\n            type = ['illusts'];\r\n        }\r\n        else if (this.listType === 2) {\r\n            // 漫画列表页\r\n            type = ['manga'];\r\n        }\r\n        this.idList = await API.getUserWorksByType(DOM.getUserId(), type);\r\n        this.afterGetListPage();\r\n    }\r\n    // 获取用户某一类型的作品列表（附带 tag）\r\n    async getIdListByTag(type) {\r\n        let data = await API.getUserWorksByTypeWithTag(DOM.getUserId(), type, this.tag, this.offset, this.requsetNumber);\r\n        data.body.works.forEach(data => this.idList.push(data.id));\r\n        this.afterGetListPage();\r\n    }\r\n    // 获取用户的收藏作品列表\r\n    async getBookmarkIdList(isHide) {\r\n        let bmkGetEnd = false; // 书签作品是否获取完毕\r\n        let data;\r\n        try {\r\n            data = await API.getBookmarkData(DOM.getUserId(), this.tag, this.offset, isHide);\r\n        }\r\n        catch (error) {\r\n            this.getBookmarkIdList(isHide);\r\n            return;\r\n        }\r\n        if (data.body.works.length === 0 ||\r\n            this.idList.length >= this.requsetNumber) {\r\n            bmkGetEnd = true; // 书签页获取完毕\r\n            this.afterGetListPage();\r\n        }\r\n        // 如果书签页没有获取完毕\r\n        if (!bmkGetEnd) {\r\n            // 没有抓取完毕时，才添加数据。抓取完毕之后不添加数据\r\n            data.body.works.forEach(data => this.idList.push(data.id));\r\n            this.offset += this.onceRequest; // 每次增加偏移量\r\n            // 重复抓取过程\r\n            this.getBookmarkIdList(isHide);\r\n        }\r\n    }\r\n    // 获取作品 id 列表完毕之后\r\n    afterGetListPage() {\r\n        // 非书签页，并且非 tag 页\r\n        if (this.listType !== 3 && !this.hasTag) {\r\n            // 在获取全部作品时，由于 API 里不能设置 requset_number，所以在这里去掉多余的作品。\r\n            // 把 id 从小到大排序\r\n            let tempList = [];\r\n            // 转换成数字\r\n            tempList = this.idList.map(id => {\r\n                return parseInt(id);\r\n            });\r\n            // 升序排列\r\n            tempList.sort(function (x, y) {\r\n                return x - y;\r\n            });\r\n            // 保存到结果中\r\n            this.idList = tempList.map(id => {\r\n                return id.toString();\r\n            });\r\n            // 删除后面的 id（删除不需要的近期作品）\r\n            this.idList.splice(this.idList.length - this.offset, this.idList.length);\r\n        }\r\n        // 删除多余的作品\r\n        if (this.idList.length > this.requsetNumber) {\r\n            if (this.listType !== 3) {\r\n                // 非书签页，删除前面部分（早期作品）\r\n                this.idList.splice(0, this.idList.length - this.requsetNumber);\r\n            }\r\n            else {\r\n                // 书签页，删除后面部分（较早收藏的）\r\n                this.idList.splice(this.requsetNumber, this.idList.length);\r\n                // 书签页面的 api 没有考虑页面上的排序顺序，获取到的 id 列表始终是按收藏顺序由最晚到最早排列的\r\n            }\r\n        }\r\n        store.idList = store.idList.concat(this.idList);\r\n        this.getIdListFinished();\r\n    }\r\n    // 获取书签页面下方的推荐作品列表\r\n    getRecommendedList() {\r\n        // 获取下方已经加载出来的作品\r\n        const elements = document.querySelectorAll('#illust-recommend .image-item');\r\n        if (elements.length === 0) {\r\n            this.crawlRecommended = false;\r\n            return this.noResult();\r\n        }\r\n        // 添加作品列表\r\n        for (const li of elements) {\r\n            const a = li.querySelector('a');\r\n            store.idList.push(API.getIllustId(a.href));\r\n        }\r\n        this.getIdListFinished();\r\n    }\r\n    resetGetIdListStatus() {\r\n        this.listPageFinished = 0;\r\n        this.crawlRecommended = false; // 解除下载推荐作品的标记\r\n    }\r\n    sortResult() {\r\n        if (!location.href.includes('bookmark.php')) {\r\n            // 如果是其他列表页，把作品数据按 id 倒序排列，id 大的在前面，这样可以先下载最新作品，后下载早期作品\r\n            store.result.sort(API.sortByProperty('id'));\r\n        }\r\n        else {\r\n            // 如果是书签页，把作品数据反转，这样可以先下载收藏时间早的，后下载收藏时间近的\r\n            store.result.reverse();\r\n        }\r\n        // 这里如果在控制台打印 result，可能看到修改前后的数据是一样的，这时因为 result 是引用类型导致的，实际上正常。\r\n    }\r\n    destroy() { }\r\n}\r\nexport { CrawlUserPage };\r\n","// 抓取作品页\r\nimport { CrawlPageBase } from './CrawlPageBase';\r\nimport { DOM } from './DOM';\r\nimport { lang } from './Lang';\r\nimport { API } from './API';\r\nimport { store } from './Store';\r\nimport { log } from './Log';\r\nclass CrawlWorksPage extends CrawlPageBase {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.crawlDirection = 0; // 抓取方向，在作品页内指示抓取新作品还是旧作品\r\n        /*\r\n        -1 抓取新作品\r\n        0 不设置抓取方向\r\n        1 抓取旧作品\r\n        */\r\n        this.crawlRelated = false; // 是否下载相关作品（作品页内的）\r\n    }\r\n    getWantPage() {\r\n        if (store.states.quickDownload) {\r\n            // 快速下载\r\n            this.crawlNumber = 1;\r\n        }\r\n        else {\r\n            // 检查下载页数的设置\r\n            if (!this.crawlRelated) {\r\n                this.crawlNumber = this.checkWantPageInput(lang.transl('_checkWantPageRule1Arg3'), lang.transl('_checkWantPageRule1Arg4'));\r\n            }\r\n            else {\r\n                // 相关作品的提示\r\n                this.crawlNumber = this.checkWantPageInput(lang.transl('_checkWantPageRule1Arg9'), lang.transl('_checkWantPageRule1Arg10'));\r\n            }\r\n        }\r\n    }\r\n    nextStep() {\r\n        // 下载相关作品\r\n        if (this.crawlRelated) {\r\n            this.getRelatedList();\r\n        }\r\n        else if (store.states.quickDownload) {\r\n            // 快速下载\r\n            store.idList.push(API.getIllustId(window.location.href));\r\n            log.log(lang.transl('_开始获取作品页面'));\r\n            this.getIdListFinished();\r\n        }\r\n        else {\r\n            // 向前向后下载\r\n            this.getIdList();\r\n        }\r\n    }\r\n    async getIdList() {\r\n        let type = ['illusts', 'manga'];\r\n        let idList = await API.getUserWorksByType(DOM.getUserId(), type);\r\n        // 储存符合条件的 id\r\n        let nowId = parseInt(API.getIllustId(window.location.href));\r\n        idList.forEach(id => {\r\n            let idNum = parseInt(id);\r\n            // 新作品\r\n            if (idNum >= nowId && this.crawlDirection === -1) {\r\n                store.idList.push(id);\r\n            }\r\n            else if (idNum <= nowId && this.crawlDirection === 1) {\r\n                // 旧作品\r\n                store.idList.push(id);\r\n            }\r\n        });\r\n        // 当设置了下载个数时，进行裁剪\r\n        if (this.crawlNumber !== -1) {\r\n            // 新作品 升序排列\r\n            if (this.crawlDirection === -1) {\r\n                store.idList.sort(function (x, y) {\r\n                    return parseInt(x) - parseInt(y);\r\n                });\r\n            }\r\n            else {\r\n                // 旧作品 降序排列\r\n                store.idList.sort(function (x, y) {\r\n                    return parseInt(y) - parseInt(x);\r\n                });\r\n            }\r\n            store.idList = store.idList.splice(0, this.crawlNumber);\r\n        }\r\n        this.getIdListFinished();\r\n    }\r\n    // 下载相关作品时使用\r\n    async getRelatedList() {\r\n        let data = await API.getRelatedData(API.getIllustId());\r\n        const recommendData = data.body.recommendMethods;\r\n        // 取出相关作品的 id 列表\r\n        let recommendIdList = Object.keys(recommendData);\r\n        // 当设置了下载个数时，进行裁剪\r\n        if (this.crawlNumber !== -1) {\r\n            recommendIdList = recommendIdList.reverse().slice(0, this.crawlNumber);\r\n        }\r\n        store.idList = store.idList.concat(recommendIdList);\r\n        log.log(lang.transl('_相关作品抓取完毕', store.idList.length.toString()));\r\n        this.getIdListFinished();\r\n    }\r\n    resetGetIdListStatus() {\r\n        this.crawlDirection = 0; // 解除下载方向的标记\r\n        this.crawlRelated = false; // 解除下载相关作品的标记\r\n    }\r\n    destroy() { }\r\n}\r\nexport { CrawlWorksPage };\r\n","// DOM 操作类\r\n// 提供公用的 DOM 操作方法，以及从 DOM 中获取数据的 API\r\nclass DOM {\r\n    // 获取指定元素里，可见的结果\r\n    static getVisibleEl(selector) {\r\n        const list = document.querySelectorAll(selector);\r\n        return Array.from(list).filter(el => {\r\n            return el.style.display !== 'none';\r\n        });\r\n    }\r\n    // 删除 DOM 元素\r\n    static removeEl(el) {\r\n        if (Reflect.has(el, 'length')) {\r\n            // 如果有 length 属性则循环删除。\r\n            ;\r\n            el.forEach(el => {\r\n                if (el.parentNode) {\r\n                    el.parentNode.removeChild(el);\r\n                }\r\n            });\r\n        }\r\n        else {\r\n            // 没有 length 属性的直接删除（querySelector 的返回值是 HTMLElement）\r\n            const parent = el.parentNode;\r\n            if (parent) {\r\n                parent.removeChild(el);\r\n            }\r\n        }\r\n    }\r\n    // 切换 DOM 元素的可见性\r\n    static toggleEl(el) {\r\n        el.style.display = el.style.display === 'block' ? 'none' : 'block';\r\n    }\r\n    // 将元素插入到页面顶部\r\n    /*\r\n    newindex-inner 是在未登录时的用户作品列表页面使用的\r\n    layout-body 是在未登录时的搜索页使用的\r\n    */\r\n    static insertToHead(el) {\r\n        if (document.body) {\r\n            document.body.insertAdjacentElement('afterbegin', el);\r\n        }\r\n        else {\r\n            ;\r\n            (document.querySelector('header') ||\r\n                document.querySelector('.newindex-inner') ||\r\n                document.querySelector('.layout-body')).insertAdjacentElement('beforebegin', el);\r\n        }\r\n    }\r\n    // 获取用户 id\r\n    static getUserId() {\r\n        // 首先尝试从 url 中获取\r\n        const test = /(\\?|&)id=(\\d{1,9})/.exec(window.location.search);\r\n        if (test && test.length > 1) {\r\n            return test[2];\r\n        }\r\n        // 从 head 里匹配\r\n        let test2 = document.head.innerHTML.match(/\"userId\":\"(\\d{1,9})\"/);\r\n        if (!test2) {\r\n            test2 = document.head.innerHTML.match(/authorId&quot;:&quot;(\\d{1,9})&quot/);\r\n        }\r\n        if (test2 && test2.length > 1) {\r\n            return test2[1];\r\n        }\r\n        // 从 body 里匹配\r\n        let test3 = /member\\.php\\?id=(\\d{1,9})/.exec(document.body.innerHTML);\r\n        if (test3) {\r\n            return test3[1];\r\n        }\r\n        // 从旧版页面的头像获取（主要是在旧版书签页面使用）\r\n        const nameElement = document.querySelector('.user-name');\r\n        if (nameElement) {\r\n            return /\\?id=(\\d{1,9})/.exec(nameElement.href)[1];\r\n        }\r\n        // 如果都没有获取到\r\n        throw new Error('getUserId failed!');\r\n    }\r\n}\r\nexport { DOM };\r\n","// 删除页面上的作品\r\nimport { log } from './Log';\r\nimport { lang } from './Lang';\r\nimport { Colors } from './Colors';\r\nimport { DOM } from './DOM';\r\nimport { ui } from './UI';\r\nimport { store } from './Store';\r\nimport { EVT } from './EVT';\r\nclass DeleteWorks {\r\n    constructor(worksSelectors) {\r\n        this.worksSelector = ''; // 选择页面上所有作品的选择器\r\n        this.multipleSelector = ''; // 多图作品特有的元素的标识\r\n        this.ugoiraSelector = ''; // 动图作品特有的元素的标识\r\n        this.delMode = false; // 是否处于删除作品状态\r\n        this.deleteWorkCallback = () => { }; // 保存手动删除作品的回调函数，因为可能会多次绑定手动删除事件，所以需要保存传入的 callback 备用\r\n        this.worksSelector = worksSelectors;\r\n        // 作品列表更新后，需要重新给作品绑定删除事件\r\n        window.addEventListener(EVT.events.worksUpdate, () => {\r\n            if (this.delMode) {\r\n                this.bindDeleteEvent();\r\n            }\r\n        });\r\n    }\r\n    allowWork() {\r\n        return store.states.allowWork;\r\n    }\r\n    // 清除多图作品的按钮\r\n    addClearMultipleBtn(selector, callback = () => { }) {\r\n        this.multipleSelector = selector;\r\n        ui.addCenterButton(Colors.red, lang.transl('_清除多图作品'), [\r\n            ['title', lang.transl('_清除多图作品Title')]\r\n        ]).addEventListener('click', () => {\r\n            if (!this.allowWork()) {\r\n                return alert(lang.transl('_当前任务尚未完成'));\r\n            }\r\n            ui.hideCenterPanel();\r\n            this.clearMultiple();\r\n            callback();\r\n        }, false);\r\n    }\r\n    // 清除动图作品的按钮\r\n    addClearUgoiraBtn(selector, callback = () => { }) {\r\n        this.ugoiraSelector = selector;\r\n        ui.addCenterButton(Colors.red, lang.transl('_清除动图作品'), [\r\n            ['title', lang.transl('_清除动图作品Title')]\r\n        ]).addEventListener('click', () => {\r\n            if (!this.allowWork()) {\r\n                return alert(lang.transl('_当前任务尚未完成'));\r\n            }\r\n            ui.hideCenterPanel();\r\n            this.ClearUgoira();\r\n            callback();\r\n        }, false);\r\n    }\r\n    // 手动删除作品的按钮\r\n    addManuallyDeleteBtn(callback = () => { }) {\r\n        this.deleteWorkCallback = callback;\r\n        const delBtn = ui.addCenterButton(Colors.red, lang.transl('_手动删除作品'), [['title', lang.transl('_手动删除作品Title')]]);\r\n        delBtn.addEventListener('click', () => {\r\n            this.manuallyDelete(delBtn);\r\n        });\r\n    }\r\n    // 清除多图作品\r\n    clearMultiple() {\r\n        const allPicArea = document.querySelectorAll(this.worksSelector);\r\n        allPicArea.forEach(el => {\r\n            if (el.querySelector(this.multipleSelector)) {\r\n                el.remove();\r\n            }\r\n        });\r\n        this.showWorksCount();\r\n    }\r\n    // 清除动图作品\r\n    ClearUgoira() {\r\n        const allPicArea = document.querySelectorAll(this.worksSelector);\r\n        allPicArea.forEach(el => {\r\n            if (el.querySelector(this.ugoiraSelector)) {\r\n                el.remove();\r\n            }\r\n        });\r\n        this.showWorksCount();\r\n    }\r\n    // 给作品绑定删除事件\r\n    bindDeleteEvent() {\r\n        const listElement = document.querySelectorAll(this.worksSelector);\r\n        listElement.forEach(el => {\r\n            el.onclick = ev => {\r\n                if (this.delMode) {\r\n                    ev.preventDefault();\r\n                    if (!this.allowWork()) {\r\n                        return alert(lang.transl('_当前任务尚未完成'));\r\n                    }\r\n                    const target = ev.currentTarget;\r\n                    DOM.removeEl(target);\r\n                    this.showWorksCount();\r\n                    this.deleteWorkCallback(target);\r\n                }\r\n            };\r\n        });\r\n    }\r\n    // 手动删除作品\r\n    // 回调函数可以接收到被删除的元素\r\n    manuallyDelete(delBtn) {\r\n        this.delMode = !this.delMode;\r\n        this.bindDeleteEvent();\r\n        if (this.delMode) {\r\n            delBtn.textContent = lang.transl('_退出手动删除');\r\n            setTimeout(() => {\r\n                ui.hideCenterPanel();\r\n            }, 300);\r\n        }\r\n        else {\r\n            delBtn.textContent = lang.transl('_手动删除作品');\r\n        }\r\n    }\r\n    // 显示调整后，列表里的作品数量\r\n    showWorksCount() {\r\n        const selector = this.worksSelector;\r\n        log.success(lang.transl('_调整完毕', DOM.getVisibleEl(selector).length.toString()), 2, false);\r\n    }\r\n}\r\nexport { DeleteWorks };\r\n","// 下载文件，并发送给浏览器下载\r\nimport { EVT } from './EVT';\r\nimport { log } from './Log';\r\nimport { lang } from './Lang';\r\nimport { titleBar } from './TitleBar';\r\nimport { fileName } from './FileName';\r\nimport { converter } from './ConvertUgoira';\r\nclass Download {\r\n    constructor(progressBar, data) {\r\n        this.stoped = false;\r\n        this.retry = 0;\r\n        this.retryMax = 50;\r\n        this.progressBar = {\r\n            name: progressBar.querySelector('.download_fileName'),\r\n            loaded: progressBar.querySelector('.loaded'),\r\n            progress: progressBar.querySelector('.progress')\r\n        };\r\n        this.download(data);\r\n        this.listenEvents();\r\n    }\r\n    listenEvents() {\r\n        ;\r\n        [EVT.events.downloadStop, EVT.events.downloadPause].forEach(event => {\r\n            window.addEventListener(event, () => {\r\n                this.stoped = true;\r\n            });\r\n        });\r\n    }\r\n    // 设置进度条信息\r\n    setProgressBar(loaded, total) {\r\n        this.progressBar.loaded.textContent = `${Math.floor(loaded / 1024)}/${Math.floor(total / 1024)}`;\r\n        let progress = loaded / total;\r\n        if (isNaN(progress)) {\r\n            progress = 0;\r\n        }\r\n        this.progressBar.progress.style.width = progress * 100 + '%';\r\n    }\r\n    download(arg) {\r\n        titleBar.changeTitle('↓');\r\n        // 获取文件名\r\n        let fullFileName = fileName.getFileName(arg.data);\r\n        // 重设当前下载栏的信息\r\n        this.progressBar.name.textContent = fullFileName;\r\n        this.setProgressBar(0, 0);\r\n        // 下载图片\r\n        let xhr = new XMLHttpRequest();\r\n        xhr.open('GET', arg.data.url, true);\r\n        xhr.responseType = 'blob';\r\n        // 显示下载进度\r\n        xhr.addEventListener('progress', event => {\r\n            if (this.stoped) {\r\n                xhr.abort();\r\n                xhr = null;\r\n                return;\r\n            }\r\n            this.setProgressBar(event.loaded, event.total);\r\n        });\r\n        // 图片获取完毕（出错时也会进入 loadend）\r\n        xhr.addEventListener('loadend', async () => {\r\n            if (this.stoped) {\r\n                xhr = null;\r\n                return;\r\n            }\r\n            let file = xhr.response; // 要下载的文件\r\n            const HandlingError = () => {\r\n                if (xhr.status === 404) {\r\n                    // 404 错误时创建 txt 文件，并保存提示信息\r\n                    const msg = lang.transl('_file404', arg.id);\r\n                    log.error(msg, 1);\r\n                    file = new Blob([`${msg}`], {\r\n                        type: 'text/plain'\r\n                    });\r\n                    fullFileName = fullFileName.replace(/\\.jpg$|\\.png$|\\.zip$|\\.gif$|\\.webm$/, '.txt');\r\n                    return true;\r\n                }\r\n                else {\r\n                    // 无法处理的情况\r\n                    EVT.fire(EVT.events.downloadError);\r\n                    return false;\r\n                }\r\n            };\r\n            if (xhr.status !== 200) {\r\n                // 状态码错误\r\n                // 正常下载完毕的状态码是 200\r\n                this.progressBar.name.classList.add('downloadError');\r\n                this.retry++;\r\n                if (this.retry >= this.retryMax) {\r\n                    // 重试 retryMax 次依然错误，进行错误处理。无法处理的情况则终止执行。\r\n                    if (!HandlingError()) {\r\n                        return;\r\n                    }\r\n                }\r\n                else {\r\n                    return this.download(arg);\r\n                }\r\n            }\r\n            else {\r\n                // 状态码正常\r\n                this.progressBar.name.classList.remove('downloadError');\r\n                if ((arg.data.ext === 'webm' || arg.data.ext === 'gif') &&\r\n                    arg.data.ugoiraInfo) {\r\n                    // 如果需要转换成视频\r\n                    if (arg.data.ext === 'webm') {\r\n                        file = await converter.webm(file, arg.data.ugoiraInfo);\r\n                    }\r\n                    // 如果需要转换成动图\r\n                    if (arg.data.ext === 'gif') {\r\n                        file = await converter.gif(file, arg.data.ugoiraInfo);\r\n                    }\r\n                }\r\n            }\r\n            // 生成下载链接\r\n            const blobUrl = URL.createObjectURL(file);\r\n            // 向浏览器发送下载任务\r\n            this.browserDownload(blobUrl, fullFileName, arg.id, arg.taskBatch);\r\n            xhr = null;\r\n            file = null;\r\n        });\r\n        xhr.send();\r\n    }\r\n    // 向浏览器发送下载任务\r\n    browserDownload(blobUrl, fullFileName, id, taskBatch) {\r\n        // 如果任务已停止，不会向浏览器发送下载任务\r\n        if (this.stoped) {\r\n            // 释放 bloburl\r\n            URL.revokeObjectURL(blobUrl);\r\n            return;\r\n        }\r\n        const sendData = {\r\n            msg: 'send_download',\r\n            fileUrl: blobUrl,\r\n            fileName: fullFileName,\r\n            id,\r\n            taskBatch\r\n        };\r\n        chrome.runtime.sendMessage(sendData);\r\n    }\r\n}\r\nexport { Download };\r\n","// 下载控制\r\nimport { EVT } from './EVT';\r\nimport { store } from './Store';\r\nimport { log } from './Log';\r\nimport { lang } from './Lang';\r\nimport { titleBar } from './TitleBar';\r\nimport { Colors } from './Colors';\r\nimport { ui } from './UI';\r\nimport { Download } from './Download';\r\nclass DownloadControl {\r\n    constructor() {\r\n        this.downloadThreadMax = 5; // 同时下载的线程数的最大值，也是默认值\r\n        this.downloadThread = this.downloadThreadMax; // 同时下载的线程数\r\n        this.taskBatch = 0; // 标记任务批次，每次重新下载时改变它的值，传递给后台使其知道这是一次新的下载\r\n        this.statesList = []; // 下载状态列表，保存每个下载任务的状态\r\n        this.taskList = {}; // 下载任务列表，使用下载的文件的 id 做 key，保存下载栏编号和它在下载状态列表中的索引\r\n        this.downloaded = 0; // 已下载的任务数量\r\n        this.convertText = '';\r\n        this.reTryTimer = 0; // 重试下载的定时器\r\n        this.downloadArea = document.createElement('div'); // 下载区域\r\n        this.downStatusEl = document.createElement('span');\r\n        this.convertTipEL = document.createElement('div'); // 转换动图时显示提示的元素\r\n        this.downloadStop = false; // 是否停止下载\r\n        this.downloadPause = false; // 是否暂停下载\r\n        // 所有下载进度条\r\n        this.allDownloadBar = document.querySelectorAll('.downloadBar');\r\n        this.createDownloadArea();\r\n        this.listenEvents();\r\n    }\r\n    listenEvents() {\r\n        window.addEventListener(EVT.events.crawlStart, () => {\r\n            this.hideDownloadArea();\r\n            this.reset();\r\n        });\r\n        window.addEventListener(EVT.events.crawlFinish, () => {\r\n            this.showDownloadArea();\r\n            this.beforeDownload();\r\n        });\r\n        window.addEventListener(EVT.events.convertChange, (ev) => {\r\n            const count = ev.detail.data;\r\n            if (count > 0) {\r\n                this.convertText = lang.transl('_转换任务提示', count.toString());\r\n            }\r\n            else {\r\n                this.convertText = '';\r\n            }\r\n            this.convertTipEL.innerHTML = this.convertText;\r\n            this.LogDownloadProgress();\r\n        });\r\n        // 监听浏览器下载文件后，返回的消息\r\n        chrome.runtime.onMessage.addListener((msg) => {\r\n            if (!this.taskBatch) {\r\n                return;\r\n            }\r\n            // 文件下载成功\r\n            if (msg.msg === 'downloaded') {\r\n                // 释放 BLOBURL\r\n                URL.revokeObjectURL(msg.data.url);\r\n                EVT.fire(EVT.events.downloadSucccess);\r\n                this.downloadSuccess(msg.data);\r\n            }\r\n            else if (msg.msg === 'download_err') {\r\n                // 浏览器把文件保存到本地时出错\r\n                log.error(`${msg.data.id} download error! code: ${msg.err}. The downloader will try to download the file again `);\r\n                EVT.fire(EVT.events.downloadError);\r\n                // 重新下载这个文件\r\n                this.downloadError(msg.data);\r\n            }\r\n            // UUID 的情况\r\n            if (msg.data && msg.data.uuid) {\r\n                log.error(lang.transl('_uuid'));\r\n            }\r\n        });\r\n    }\r\n    // 显示总的下载进度\r\n    showDownloadProgress(downloaded) {\r\n        // 在总进度条上显示已下载数量\r\n        document.querySelector('.downloaded').textContent = downloaded.toString();\r\n        // 设置总进度条的进度\r\n        const progress = (downloaded / store.result.length) * 100;\r\n        const progressBar = document.querySelector('.progress1');\r\n        progressBar.style.width = progress + '%';\r\n    }\r\n    set setDownloaded(val) {\r\n        this.downloaded = val;\r\n        this.showDownloadProgress(this.downloaded);\r\n        this.LogDownloadProgress();\r\n        // 重置下载进度信息\r\n        if (this.downloaded === 0) {\r\n            this.resetDownloadArea();\r\n        }\r\n        // 下载完毕\r\n        if (this.downloaded === store.result.length) {\r\n            EVT.fire(EVT.events.downloadComplete);\r\n            this.reset();\r\n            this.setDownStateText(lang.transl('_下载完毕'));\r\n            log.success(lang.transl('_下载完毕'), 2);\r\n            titleBar.changeTitle('√');\r\n        }\r\n    }\r\n    downloadedAdd() {\r\n        this.setDownloaded = this.downloaded + 1;\r\n    }\r\n    // 返回任务停止状态。暂停和停止都视为停止下载\r\n    get downloadStopped() {\r\n        return this.downloadPause || this.downloadStop;\r\n    }\r\n    // 显示或隐藏下载区域\r\n    showDownloadArea() {\r\n        this.downloadArea.style.display = 'block';\r\n    }\r\n    hideDownloadArea() {\r\n        this.downloadArea.style.display = 'none';\r\n    }\r\n    // 重置下载区域的信息\r\n    resetDownloadArea() {\r\n        this.setDownStateText(lang.transl('_未开始下载'));\r\n        for (const el of document.querySelectorAll('.imgNum')) {\r\n            el.textContent = store.result.length.toString();\r\n        }\r\n        for (const el of document.querySelectorAll('.download_fileName')) {\r\n            el.textContent = '';\r\n        }\r\n        for (const el of document.querySelectorAll('.loaded')) {\r\n            el.textContent = '0/0';\r\n        }\r\n        for (const el of document.querySelectorAll('.progress')) {\r\n            ;\r\n            el.style.width = '0%';\r\n        }\r\n    }\r\n    // 设置下载状态文本，默认颜色为主题蓝色\r\n    setDownStateText(str, color = '') {\r\n        const el = document.createElement('span');\r\n        el.textContent = str;\r\n        if (color) {\r\n            el.style.color = color;\r\n        }\r\n        this.downStatusEl.innerHTML = '';\r\n        this.downStatusEl.appendChild(el);\r\n    }\r\n    reset() {\r\n        this.statesList = [];\r\n        this.downloadPause = false;\r\n        this.downloadStop = false;\r\n        clearTimeout(this.reTryTimer);\r\n    }\r\n    createDownloadArea() {\r\n        const html = `<div class=\"download_area\">\r\n    <div class=\"centerWrap_btns\">\r\n    <button class=\"startDownload\" type=\"button\" style=\"background:${Colors.blue};\"> ${lang.transl('_下载按钮1')}</button>\r\n    <button class=\"pauseDownload\" type=\"button\" style=\"background:#e49d00;\"> ${lang.transl('_下载按钮2')}</button>\r\n    <button class=\"stopDownload\" type=\"button\" style=\"background:${Colors.red};\"> ${lang.transl('_下载按钮3')}</button>\r\n    <button class=\"copyUrl\" type=\"button\" style=\"background:${Colors.green};\"> ${lang.transl('_下载按钮4')}</button>\r\n    </div>\r\n    <div class=\"centerWrap_down_tips\">\r\n    <p>\r\n    ${lang.transl('_当前状态')}\r\n    <span class=\"down_status blue\"><span>${lang.transl('_未开始下载')}</span></span>\r\n    <span class=\"convert_tip warn\"></span>\r\n    </p>\r\n    <div class=\"progressBarWrap\">\r\n    <span class=\"text\">${lang.transl('_下载进度')}</span>\r\n    <div class=\"right1\">\r\n    <div class=\"progressBar progressBar1\">\r\n    <div class=\"progress progress1\"></div>\r\n    </div>\r\n    <div class=\"progressTip progressTip1\">\r\n    <span class=\"downloaded\">0</span>\r\n    /\r\n    <span class=\"imgNum\">0</span>\r\n    </div>\r\n    </div>\r\n    </div>\r\n    </div>\r\n    <div>\r\n    <ul class=\"centerWrap_down_list\">\r\n    <li class=\"downloadBar\">\r\n    <div class=\"progressBar progressBar2\">\r\n    <div class=\"progress progress2\"></div>\r\n    </div>\r\n    <div class=\"progressTip progressTip2\">\r\n    <span class=\"download_fileName\"></span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ${lang.transl('_已下载')}&nbsp;&nbsp;<span class=\"loaded\">0/0</span>KB\r\n    </div>\r\n    </li>\r\n    </ul>\r\n    </div>\r\n    </div>`;\r\n        ui.insertHTML(html);\r\n        this.downloadArea = document.querySelector('.download_area');\r\n        this.downStatusEl = document.querySelector('.down_status ');\r\n        this.convertTipEL = document.querySelector('.convert_tip');\r\n        document.querySelector('.startDownload').addEventListener('click', () => {\r\n            this.startDownload();\r\n        });\r\n        document.querySelector('.pauseDownload').addEventListener('click', () => {\r\n            this.pauseDownload();\r\n        });\r\n        document.querySelector('.stopDownload').addEventListener('click', () => {\r\n            this.stopDownload();\r\n        });\r\n        document.querySelector('.copyUrl').addEventListener('click', () => {\r\n            const text = this.showURLs();\r\n            EVT.fire(EVT.events.output, text);\r\n        });\r\n    }\r\n    // 显示 url\r\n    showURLs() {\r\n        let result = '';\r\n        result = store.result.reduce((total, now) => {\r\n            return (total += now.url + '<br>');\r\n        }, result);\r\n        return result;\r\n    }\r\n    // 重设下载进度条的数量\r\n    resetDownloadBar(num) {\r\n        const centerWrapDownList = document.querySelector('.centerWrap_down_list');\r\n        this.allDownloadBar = centerWrapDownList.querySelectorAll('.downloadBar');\r\n        if (this.allDownloadBar.length !== num) {\r\n            centerWrapDownList.innerHTML = this.allDownloadBar[0].outerHTML.repeat(num);\r\n        }\r\n        centerWrapDownList.style.display = 'block';\r\n        // 缓存所有下载进度条元素\r\n        this.allDownloadBar = centerWrapDownList.querySelectorAll('.downloadBar');\r\n    }\r\n    // 抓取完毕之后，已经可以开始下载时，根据一些状态进行处理\r\n    beforeDownload() {\r\n        this.setDownloaded = 0;\r\n        // 检查 不自动开始下载 的标记\r\n        if (store.states.notAutoDownload) {\r\n            return;\r\n        }\r\n        const autoDownload = ui.form.quietDownload.checked;\r\n        if (!autoDownload && !store.states.quickDownload) {\r\n            titleBar.changeTitle('▶');\r\n        }\r\n        // 视情况自动开始下载\r\n        if (autoDownload || store.states.quickDownload) {\r\n            this.startDownload();\r\n        }\r\n    }\r\n    // 开始下载\r\n    startDownload() {\r\n        // 如果正在下载中，或无图片，则不予处理\r\n        if (!store.states.allowWork || store.result.length === 0) {\r\n            return;\r\n        }\r\n        // 如果之前不是暂停状态，则需要重新下载\r\n        if (!this.downloadPause) {\r\n            this.setDownloaded = 0;\r\n            // 初始化下载记录\r\n            // 状态：\r\n            // -1 未使用\r\n            // 0 使用中\r\n            // 1 已完成\r\n            this.statesList = new Array(store.result.length).fill(-1);\r\n            this.taskBatch = new Date().getTime(); // 修改本批下载任务的标记\r\n        }\r\n        else {\r\n            // 继续下载\r\n            // 把“使用中”的下载状态重置为“未使用”\r\n            for (let index = 0; index < this.statesList.length; index++) {\r\n                if (this.statesList[index] === 0) {\r\n                    this.statesList[index] = -1;\r\n                }\r\n            }\r\n        }\r\n        // 下载线程设置\r\n        const setThread = parseInt(ui.form.downloadThread.value);\r\n        if (setThread < 1 ||\r\n            setThread > this.downloadThreadMax ||\r\n            isNaN(setThread)) {\r\n            // 如果数值非法，则重设为默认值\r\n            this.downloadThread = this.downloadThreadMax;\r\n        }\r\n        else {\r\n            this.downloadThread = setThread; // 设置为用户输入的值\r\n        }\r\n        // 如果剩余任务数量少于下载线程数\r\n        if (store.result.length - this.downloaded < this.downloadThread) {\r\n            this.downloadThread = store.result.length - this.downloaded;\r\n        }\r\n        // 重设下载进度条的数量\r\n        this.resetDownloadBar(this.downloadThread);\r\n        // 重置一些条件\r\n        EVT.fire(EVT.events.downloadStart);\r\n        this.downloadPause = false;\r\n        this.downloadStop = false;\r\n        clearTimeout(this.reTryTimer);\r\n        // 启动或继续下载，建立并发下载线程\r\n        for (let i = 0; i < this.downloadThread; i++) {\r\n            this.createDownload(i);\r\n        }\r\n        this.setDownStateText(lang.transl('_正在下载中'));\r\n        log.log(lang.transl('_正在下载中'));\r\n    }\r\n    // 暂停下载\r\n    pauseDownload() {\r\n        clearTimeout(this.reTryTimer);\r\n        if (store.result.length === 0) {\r\n            return;\r\n        }\r\n        // 停止的优先级高于暂停。点击停止可以取消暂停状态，但点击暂停不能取消停止状态\r\n        if (this.downloadStop === true) {\r\n            return;\r\n        }\r\n        if (this.downloadPause === false) {\r\n            // 如果正在下载中\r\n            if (!store.states.allowWork) {\r\n                this.downloadPause = true; // 发出暂停信号\r\n                EVT.fire(EVT.events.downloadPause);\r\n                titleBar.changeTitle('║');\r\n                this.setDownStateText(lang.transl('_已暂停'), '#f00');\r\n                log.warning(lang.transl('_已暂停'), 2);\r\n            }\r\n            else {\r\n                // 不在下载中的话不允许启用暂停功能\r\n                return;\r\n            }\r\n        }\r\n    }\r\n    // 停止下载\r\n    stopDownload() {\r\n        clearTimeout(this.reTryTimer);\r\n        if (store.result.length === 0 || this.downloadStop) {\r\n            return;\r\n        }\r\n        this.downloadStop = true;\r\n        EVT.fire(EVT.events.downloadStop);\r\n        titleBar.changeTitle('■');\r\n        this.setDownStateText(lang.transl('_已停止'), '#f00');\r\n        log.error(lang.transl('_已停止'), 2);\r\n        this.downloadPause = false;\r\n    }\r\n    downloadError(data) {\r\n        if (this.downloadPause || this.downloadStop) {\r\n            return false;\r\n        }\r\n        let task = this.taskList[data.id];\r\n        // 复位这个任务的状态\r\n        this.setDownloadedIndex(task.index, -1);\r\n        // 建立下载任务，再次下载它\r\n        this.createDownload(task.progressBarIndex);\r\n    }\r\n    downloadSuccess(data) {\r\n        let task = this.taskList[data.id];\r\n        // 更改这个任务状态为“已完成”\r\n        this.setDownloadedIndex(task.index, 1);\r\n        // 增加已下载数量\r\n        this.downloadedAdd();\r\n        // 是否继续下载\r\n        const no = task.progressBarIndex;\r\n        if (this.checkContinueDownload()) {\r\n            this.createDownload(no);\r\n        }\r\n    }\r\n    // 设置已下载列表中的标记\r\n    setDownloadedIndex(index, value) {\r\n        this.statesList[index] = value;\r\n    }\r\n    // 当一个文件下载完成后，检查是否还有后续下载任务\r\n    checkContinueDownload() {\r\n        // 如果没有全部下载完毕\r\n        if (this.downloaded < store.result.length) {\r\n            // 如果任务已停止\r\n            if (this.downloadPause || this.downloadStop) {\r\n                return false;\r\n            }\r\n            // 如果已完成的数量 加上 线程中未完成的数量，仍然没有达到文件总数，继续添加任务\r\n            if (this.downloaded + this.downloadThread - 1 < store.result.length) {\r\n                return true;\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    // 在日志上显示下载进度\r\n    LogDownloadProgress() {\r\n        let text = `${this.downloaded} / ${store.result.length}`;\r\n        // 追加转换动图的提示\r\n        if (this.convertText) {\r\n            text += ', ' + this.convertText;\r\n        }\r\n        log.log(text, 2, false);\r\n    }\r\n    // 查找需要进行下载的作品，建立下载\r\n    createDownload(progressBarIndex) {\r\n        let length = this.statesList.length;\r\n        let index;\r\n        for (let i = 0; i < length; i++) {\r\n            if (this.statesList[i] === -1) {\r\n                this.statesList[i] = 0;\r\n                index = i;\r\n                break;\r\n            }\r\n        }\r\n        if (index === undefined) {\r\n            throw new Error('There are no data to download');\r\n        }\r\n        else {\r\n            const workData = store.result[index];\r\n            const data = {\r\n                id: workData.id,\r\n                data: workData,\r\n                index: index,\r\n                progressBarIndex: progressBarIndex,\r\n                taskBatch: this.taskBatch\r\n            };\r\n            // 保存任务信息\r\n            this.taskList[workData.id] = {\r\n                index,\r\n                progressBarIndex: progressBarIndex\r\n            };\r\n            // 建立下载\r\n            new Download(this.allDownloadBar[progressBarIndex], data);\r\n        }\r\n    }\r\n}\r\nnew DownloadControl();\r\n","class EVT {\r\n    static fire(type, data = '') {\r\n        const event = new CustomEvent(type, {\r\n            detail: { data: data }\r\n        });\r\n        window.dispatchEvent(event);\r\n    }\r\n}\r\nEVT.events = {\r\n    crawlStart: 'crawlStart',\r\n    crawlFinish: 'crawlFinish',\r\n    crawlEmpty: 'crawlEmpty',\r\n    crawlError: 'crawlError',\r\n    addResult: 'addResult',\r\n    downloadStart: 'downloadStart',\r\n    downloadPause: 'downloadPause',\r\n    downloadStop: 'downloadStop',\r\n    download: 'download',\r\n    downloadSucccess: 'downloadSucccess',\r\n    downloadError: 'downloadError',\r\n    downloadComplete: 'downloadComplete',\r\n    pageSwitch: 'pageSwitch',\r\n    pageTypeChange: 'pageTypeChange',\r\n    resetOption: 'resetOption',\r\n    convertChange: 'convertChange',\r\n    previewFileName: 'previewFileName',\r\n    output: 'output',\r\n    hideCenterPanel: 'hideCenterPanel',\r\n    clearMultiple: 'clearMultiple',\r\n    clearUgoira: 'clearUgoira',\r\n    deleteWork: 'deleteWork',\r\n    worksUpdate: 'worksUpdate'\r\n};\r\nexport { EVT };\r\n","import { ui } from './UI';\r\nimport { EVT } from './EVT';\r\nimport { store } from './Store';\r\nclass FileName {\r\n    constructor() {\r\n        // 用正则过滤不安全的字符，（Chrome 和 Windows 不允许做文件名的字符）\r\n        // 不安全的字符，这里多数是控制字符，需要替换掉\r\n        this.unsafeStr = new RegExp(/[\\u0001-\\u001f\\u007f-\\u009f\\u00ad\\u0600-\\u0605\\u061c\\u06dd\\u070f\\u08e2\\u180e\\u200b-\\u200f\\u202a-\\u202e\\u2060-\\u2064\\u2066-\\u206f\\ufdd0-\\ufdef\\ufeff\\ufff9-\\ufffb\\ufffe\\uffff]/g);\r\n        // 一些需要替换成全角字符的符号，左边是正则表达式的字符\r\n        this.fullWidthDict = [\r\n            ['\\\\\\\\', '＼'],\r\n            ['/', '／'],\r\n            [':', '：'],\r\n            ['\\\\?', '？'],\r\n            ['\"', '＂'],\r\n            ['<', '＜'],\r\n            ['>', '＞'],\r\n            ['\\\\*', '＊'],\r\n            ['\\\\|', '｜'],\r\n            ['~', '～']\r\n        ];\r\n        window.addEventListener(EVT.events.previewFileName, () => {\r\n            const text = this.previewFileName();\r\n            EVT.fire(EVT.events.output, text);\r\n        });\r\n    }\r\n    // 把一些特殊字符替换成全角字符\r\n    replaceUnsafeStr(str) {\r\n        str = str.replace(this.unsafeStr, '');\r\n        for (let index = 0; index < this.fullWidthDict.length; index++) {\r\n            const rule = this.fullWidthDict[index];\r\n            const reg = new RegExp(rule[0], 'g');\r\n            str = str.replace(reg, rule[1]);\r\n        }\r\n        return str;\r\n    }\r\n    // 生成文件名，传入参数为图片信息\r\n    getFileName(data) {\r\n        let result = ui.form.userSetName.value;\r\n        // 为空时使用 {id}\r\n        result = result || '{id}'; // 生成文件名\r\n        const illustTypes = ['illustration', 'manga', 'ugoira']; // 作品类型 0 插画 1 漫画 2 动图\r\n        // 储存每个文件名标记的配置\r\n        const cfg = [\r\n            {\r\n                name: '{p_user}',\r\n                // 标记\r\n                value: store.pageInfo.pageUserName,\r\n                // 值\r\n                prefix: '',\r\n                // 添加在前面的标记\r\n                safe: false\r\n                // 是否是安全的文件名。如果可能包含一些特殊字符，就不安全，要进行替换\r\n            },\r\n            {\r\n                name: '{p_uid}',\r\n                value: store.pageInfo.pageUserID || '',\r\n                prefix: '',\r\n                safe: true\r\n            },\r\n            {\r\n                name: '{p_title}',\r\n                value: document.title\r\n                    .replace(/\\[(0|↑|→|▶|↓|║|■|√| )\\] /, '')\r\n                    .replace(/^\\(\\d.*\\) /, ''),\r\n                // 去掉标题上的下载状态、消息数量提示\r\n                prefix: '',\r\n                safe: false\r\n            },\r\n            {\r\n                name: '{p_tag}',\r\n                value: store.pageInfo.pageTag,\r\n                prefix: '',\r\n                safe: false\r\n            },\r\n            {\r\n                name: '{id}',\r\n                value: data.id,\r\n                prefix: '',\r\n                safe: true\r\n            },\r\n            {\r\n                name: '{id_num}',\r\n                value: data.idNum,\r\n                prefix: '',\r\n                safe: true\r\n            },\r\n            {\r\n                name: '{p_num}',\r\n                value: parseInt(/\\d*$/.exec(data.id)[0]),\r\n                prefix: '',\r\n                safe: true\r\n            },\r\n            {\r\n                name: '{rank}',\r\n                value: data.rank,\r\n                prefix: '',\r\n                safe: true\r\n            },\r\n            {\r\n                name: '{title}',\r\n                value: data.title,\r\n                prefix: 'title_',\r\n                safe: false\r\n            },\r\n            {\r\n                name: '{user}',\r\n                value: data.user,\r\n                prefix: 'user_',\r\n                safe: false\r\n            },\r\n            {\r\n                name: '{userid}',\r\n                value: data.userid,\r\n                prefix: 'uid_',\r\n                safe: true\r\n            },\r\n            {\r\n                name: '{px}',\r\n                value: (function () {\r\n                    if (result.includes('{px}') && data.fullWidth !== undefined) {\r\n                        return data.fullWidth + 'x' + data.fullHeight;\r\n                    }\r\n                    else {\r\n                        return '';\r\n                    }\r\n                })(),\r\n                prefix: '',\r\n                safe: true\r\n            },\r\n            {\r\n                name: '{tags}',\r\n                value: data.tags.join(','),\r\n                prefix: 'tags_',\r\n                safe: false\r\n            },\r\n            {\r\n                name: '{tags_translate}',\r\n                value: data.tagsTranslated.join(','),\r\n                prefix: 'tags_',\r\n                safe: false\r\n            },\r\n            {\r\n                name: '{bmk}',\r\n                value: data.bmk,\r\n                prefix: 'bmk_',\r\n                safe: true\r\n            },\r\n            {\r\n                name: '{date}',\r\n                value: data.date,\r\n                prefix: '',\r\n                safe: true\r\n            },\r\n            {\r\n                name: '{type}',\r\n                value: illustTypes[data.type],\r\n                prefix: '',\r\n                safe: true\r\n            }\r\n        ];\r\n        // 替换命名规则里的特殊字符\r\n        result = this.replaceUnsafeStr(result);\r\n        // 上一步会把斜线 / 替换成全角的斜线 ／，这里再替换回来，否则就不能建立文件夹了\r\n        result = result.replace(/／/g, '/');\r\n        // 把命名规则的标记替换成实际值\r\n        for (const item of cfg) {\r\n            if (result.includes(item.name) &&\r\n                item.value !== '' &&\r\n                item.value !== null) {\r\n                // 只有当标记有值时才继续操作. 所以没有值的标记会原样保留\r\n                let once = String(item.value);\r\n                // 处理标记值中的特殊字符\r\n                if (!item.safe) {\r\n                    once = this.replaceUnsafeStr(once);\r\n                }\r\n                // 添加标记名称\r\n                if (ui.form.tagNameToFileName.checked) {\r\n                    once = item.prefix + once;\r\n                }\r\n                result = result.replace(new RegExp(item.name, 'g'), once); // 将标记替换成最终值，如果有重复的标记，全部替换\r\n            }\r\n        }\r\n        // 处理空值，连续的 '//'。 有时候两个斜线中间的字段是空值，最后就变成两个斜线挨在一起了\r\n        result = result.replace(/undefined/g, '').replace(/\\/{2,9}/, '/');\r\n        // 对每一层路径进行处理\r\n        let tempArr = result.split('/');\r\n        tempArr.forEach((str, index, arr) => {\r\n            // 替换路径首尾的空格\r\n            // 把每层路径头尾的 . 变成全角的．因为 Chrome 不允许头尾使用 .\r\n            arr[index] = str\r\n                .trim()\r\n                .replace(/^\\./g, '．')\r\n                .replace(/\\.$/g, '．');\r\n        });\r\n        result = tempArr.join('/');\r\n        // 去掉头尾的 /\r\n        if (result.startsWith('/')) {\r\n            result = result.replace('/', '');\r\n        }\r\n        if (result.endsWith('/')) {\r\n            result = result.substr(0, result.length - 1);\r\n        }\r\n        // 如果快速下载时只有一个文件，根据“始终建立文件夹”选项，决定是否建立文件夹\r\n        if (store.states.quickDownload &&\r\n            store.result.length === 1 &&\r\n            ui.form.alwaysFolder.checked === false) {\r\n            const index = result.lastIndexOf('/');\r\n            result = result.substr(index + 1, result.length);\r\n        }\r\n        // 添加后缀名\r\n        result += '.' + data.ext;\r\n        return result;\r\n    }\r\n    // 预览文件名\r\n    previewFileName() {\r\n        let result = '';\r\n        result = store.result.reduce((total, now) => {\r\n            return (total +=\r\n                now.url.replace(/.*\\//, '') + ': ' + this.getFileName(now) + '<br>'); // 在每个文件名前面加上它的原本的名字，方便用来做重命名\r\n        }, result);\r\n        return result;\r\n    }\r\n}\r\nconst fileName = new FileName();\r\nexport { fileName };\r\n","import { ui } from './UI';\r\nimport { lang } from './Lang';\r\nimport { log } from './Log';\r\nimport { API } from './API';\r\nimport { EVT } from './EVT';\r\n// 审查每个作品的数据，决定是否要下载它。下载区域有一些选项是过滤器选项。\r\nclass Filter {\r\n    constructor() {\r\n        this.downType0 = true;\r\n        this.downType1 = true;\r\n        this.downType2 = true;\r\n        this.multipleImageWorks = 0; // 多图作品设置\r\n        this.includeTag = ''; // 必须包含的tag的列表\r\n        this.excludeTag = ''; // 要排除的tag的列表\r\n        this.BMKNum = 0; // 要求收藏达到指定数量\r\n        this.onlyBmk = false; // 是否只下载收藏的作品\r\n        // 宽高条件\r\n        this.filterWh = {\r\n            andOr: '&',\r\n            width: 0,\r\n            height: 0\r\n        };\r\n        this.ratioType = '0'; // 宽高比例的类型\r\n        this.idRange = -1; // id 范围，默认不限制\r\n        this.postDate = false; // 是否设置投稿时间\r\n        this.postDateStart = new Date();\r\n        this.postDateEnd = new Date();\r\n        this.debut = false; // 只下载首次登场的作品\r\n    }\r\n    // 从下载区域上获取过滤器的各个选项\r\n    init() {\r\n        // 获取排除作品类型的设置\r\n        this.getDownType();\r\n        // 获取多图作品设置\r\n        this.multipleImageWorks = parseInt(ui.form.multipleImageWorks.value);\r\n        // 获取是否设置了收藏数要求\r\n        this.BMKNum = this.getBmkNum();\r\n        // 获取是否设置了只下载书签作品\r\n        this.onlyBmk = this.getOnlyBmk();\r\n        // 获取是否设置了宽高条件\r\n        this.filterWh = this.getSetWh();\r\n        // 获取宽高比设置\r\n        this.ratioType = this.getRatio();\r\n        // 获取 id 范围设置\r\n        this.idRange = this.getIdRange();\r\n        // 获取投稿时间设置\r\n        this.postDate = this.getPostDateSetting();\r\n        // 获取必须包含的tag\r\n        this.includeTag = this.getIncludeTag();\r\n        // 获取要排除的tag\r\n        this.excludeTag = this.getExcludeTag();\r\n        // 获取只下载首次登场设置\r\n        this.debut = this.getDebut();\r\n    }\r\n    // 检查作品是否符合过滤器的要求\r\n    // 想要检查哪些数据就传递哪些数据，不需要传递 FilterOption 的所有选项\r\n    check(option) {\r\n        // 储存每一项检查的结果. true 表示保留这个作品\r\n        let result = [];\r\n        // 检查下载的作品类型设置\r\n        result.push(this.checkDownType(option.illustType));\r\n        // 检查多图作品设置\r\n        result.push(this.checkMultipleImageWorks(option.pageCount));\r\n        // 检查收藏数要求\r\n        result.push(this.checkBMK(option.bookmarkCount));\r\n        // 检查只下载书签作品的要求\r\n        result.push(this.checkOnlyBmk(option.bookmarkData));\r\n        // 检查要排除的 tag\r\n        result.push(this.checkExcludeTag(option.tags));\r\n        // 检查必须包含的 tag\r\n        result.push(this.checkIncludeTag(option.tags));\r\n        // 检查宽高设置\r\n        result.push(this.checkSetWh(option.width, option.height));\r\n        // 检查宽高比设置\r\n        result.push(this.checkRatio(option.width, option.height));\r\n        // 检查 id 范围设置\r\n        result.push(this.checkIdRange(option.id));\r\n        // 检查投稿时间设置\r\n        result.push(this.checkPostDate(option.createDate));\r\n        // 检查首次登场设置\r\n        result.push(this.checkDebut(option.yes_rank));\r\n        // 结果里不包含 false 时，检查通过。只要有一个 false 就不通过\r\n        return !result.includes(false);\r\n    }\r\n    // 获取下载的作品类型设置\r\n    getDownType() {\r\n        this.downType0 = ui.form.downType0.checked;\r\n        this.downType1 = ui.form.downType1.checked;\r\n        this.downType2 = ui.form.downType2.checked;\r\n        // 如果全部排除则取消任务\r\n        if (!this.downType0 && !this.downType1 && !this.downType2) {\r\n            EVT.fire(EVT.events.crawlError);\r\n            const msg = lang.transl('_checkNotdownTypeAll');\r\n            log.error(msg, 2);\r\n            window.alert(msg);\r\n            throw new Error(msg);\r\n        }\r\n        let notDownTip = '';\r\n        notDownTip += this.downType0 ? '' : lang.transl('_插画');\r\n        notDownTip += this.downType1 ? '' : lang.transl('_漫画');\r\n        notDownTip += this.downType2 ? '' : lang.transl('_动图');\r\n        if (notDownTip) {\r\n            log.warning(lang.transl('_checkNotdownTypeResult') + notDownTip);\r\n        }\r\n    }\r\n    // 获取必须包含的tag\r\n    getIncludeTag() {\r\n        const result = '' || this.checkTagString(ui.form.needTag.value);\r\n        if (result) {\r\n            log.warning(lang.transl('_设置了必须tag之后的提示') + result);\r\n        }\r\n        return result;\r\n    }\r\n    // 获取要排除的tag\r\n    getExcludeTag() {\r\n        const result = '' || this.checkTagString(ui.form.notNeedTag.value);\r\n        if (result) {\r\n            log.warning(lang.transl('_设置了排除tag之后的提示') + result);\r\n        }\r\n        return result;\r\n    }\r\n    // 获取过滤宽高的设置\r\n    getSetWh() {\r\n        let result = {\r\n            andOr: '&',\r\n            width: 0,\r\n            height: 0\r\n        };\r\n        const checkWidth = API.checkNumberGreater0(ui.form.setWidth.value);\r\n        const checkHeight = API.checkNumberGreater0(ui.form.setHeight.value);\r\n        // 宽高只要有一个条件大于 0 即可\r\n        if (checkWidth.value > 0 || checkHeight.value > 0) {\r\n            result = {\r\n                andOr: ui.form.setWidthAndOr.value,\r\n                width: checkWidth ? checkWidth.value : 0,\r\n                height: checkHeight ? checkHeight.value : 0\r\n            };\r\n            log.warning(lang.transl('_设置了筛选宽高之后的提示文字p1') +\r\n                result.width +\r\n                result.andOr\r\n                    .replace('|', lang.transl('_或者'))\r\n                    .replace('&', lang.transl('_并且')) +\r\n                lang.transl('_高度设置') +\r\n                result.height);\r\n        }\r\n        return result;\r\n    }\r\n    // 获取收藏数要求\r\n    getBmkNum() {\r\n        const check = API.checkNumberGreater0(ui.form.setFavNum.value);\r\n        if (check.result) {\r\n            log.warning(lang.transl('_设置了筛选收藏数之后的提示文字') + check.value);\r\n        }\r\n        return check.value;\r\n    }\r\n    // 获取只下载书签作品的设置\r\n    getOnlyBmk() {\r\n        const result = ui.form.setOnlyBmk.checked;\r\n        if (result) {\r\n            log.warning(lang.transl('_只下载已收藏的提示'));\r\n        }\r\n        return result;\r\n    }\r\n    // 获取宽高比设置\r\n    getRatio() {\r\n        let result = ui.form.ratio.value;\r\n        if (result === '1') {\r\n            log.warning(lang.transl('_设置了宽高比之后的提示', lang.transl('_横图')));\r\n        }\r\n        else if (result === '2') {\r\n            log.warning(lang.transl('_设置了宽高比之后的提示', lang.transl('_竖图')));\r\n        }\r\n        else if (result === '3') {\r\n            // 由用户输入\r\n            const typeNum = parseFloat(ui.form.userRatio.value);\r\n            if (isNaN(typeNum)) {\r\n                result = '0';\r\n                ui.form.ratio.value = result;\r\n                window.alert(lang.transl('_宽高比必须是数字'));\r\n            }\r\n            else {\r\n                log.warning(lang.transl('_输入宽高比') + ui.form.userRatio.value);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    // 获取 id 范围设置\r\n    getIdRange() {\r\n        const result = parseInt(ui.form.idRange.value);\r\n        if (result === 1 || result === 2) {\r\n            let id = parseInt(ui.form.idRangeInput.value);\r\n            if (isNaN(id)) {\r\n                EVT.fire(EVT.events.crawlError);\r\n                const msg = 'id is not a number!';\r\n                window.alert(msg);\r\n                log.error(msg);\r\n                throw new Error(msg);\r\n            }\r\n        }\r\n        if (result === 1) {\r\n            log.warning(`id > ${ui.form.idRangeInput.value}`);\r\n        }\r\n        if (result === 2) {\r\n            log.warning(`id < ${ui.form.idRangeInput.value}`);\r\n        }\r\n        return result;\r\n    }\r\n    // 获取投稿时间设置\r\n    getPostDateSetting() {\r\n        if (ui.form.postDate.checked === false) {\r\n            return false;\r\n        }\r\n        else {\r\n            // 如果启用了此设置，需要判断是否是有效的时间格式\r\n            const postDateStart = new Date(ui.form.postDateStart.value);\r\n            const postDateEnd = new Date(ui.form.postDateEnd.value);\r\n            // 如果输入的时间可以被转换成有效的时间，则启用\r\n            // 转换时间失败时，值是 Invalid Date，不能转换成数字\r\n            if (isNaN(postDateStart.getTime()) || isNaN(postDateEnd.getTime())) {\r\n                EVT.fire(EVT.events.crawlError);\r\n                const msg = 'Date format error!';\r\n                log.error(msg);\r\n                window.alert(msg);\r\n                throw new Error(msg);\r\n            }\r\n            else {\r\n                // 转换时间成功\r\n                this.postDateStart = postDateStart;\r\n                this.postDateEnd = postDateEnd;\r\n                log.warning(`${lang.transl('_时间范围')}: ${ui.form.postDateStart.value} - ${ui.form.postDateEnd.value}`);\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    // 获取首次登场设置\r\n    getDebut() {\r\n        const result = ui.form.debut.value === '1';\r\n        if (result) {\r\n            log.warning(lang.transl('_抓取首次登场的作品Title'));\r\n        }\r\n        return result;\r\n    }\r\n    // 检查下载的作品类型设置\r\n    checkDownType(illustType) {\r\n        if (illustType === undefined) {\r\n            return true;\r\n        }\r\n        else {\r\n            switch (illustType) {\r\n                case 0:\r\n                    return this.downType0 ? true : false;\r\n                case 1:\r\n                    return this.downType1 ? true : false;\r\n                case 2:\r\n                    return this.downType2 ? true : false;\r\n                default:\r\n                    return true;\r\n            }\r\n        }\r\n    }\r\n    // 检查多图作品设置\r\n    checkMultipleImageWorks(pageCount) {\r\n        if (pageCount === undefined) {\r\n            return true;\r\n        }\r\n        else {\r\n            if (pageCount > 1) {\r\n                // 是多图\r\n                if (this.multipleImageWorks === -1) {\r\n                    // 不下载多图\r\n                    return false;\r\n                }\r\n                else {\r\n                    return true;\r\n                }\r\n            }\r\n            else {\r\n                // 不是多图\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    // 检查收藏数要求\r\n    checkBMK(bmk) {\r\n        if (bmk === undefined) {\r\n            return true;\r\n        }\r\n        else {\r\n            return bmk >= this.BMKNum;\r\n        }\r\n    }\r\n    // 检查作品是否符合【只下载书签作品】的条件,返回值 true 表示包含这个作品\r\n    checkOnlyBmk(bookmarked) {\r\n        // 如果设置了只下载书签作品\r\n        if (this.onlyBmk) {\r\n            return !!bookmarked;\r\n        }\r\n        return true;\r\n    }\r\n    // 检查用户输入的 tag 内容\r\n    checkTagString(str) {\r\n        let result = '';\r\n        if (str) {\r\n            let tempArr = str.split(',');\r\n            // 如果用户在末尾也输入了逗号，则会产生一个空值，去掉它\r\n            if (tempArr[tempArr.length - 1] === '') {\r\n                tempArr.pop();\r\n            }\r\n            result = tempArr.join(',');\r\n        }\r\n        return result;\r\n    }\r\n    // 检查作品是否符合包含 tag 的条件, 如果设置了多个 tag，需要作品里全部包含。返回值表示是否保留这个作品。\r\n    checkIncludeTag(tags) {\r\n        let result = false;\r\n        if (!this.includeTag || tags === undefined) {\r\n            return true;\r\n        }\r\n        let tempArr = this.includeTag.split(',');\r\n        // 如果设置了必须的 tag\r\n        if (tempArr.length > 0) {\r\n            let tagNeedMatched = 0;\r\n            const tempTags = new Set();\r\n            // 如果不区分大小写的话，Fate/grandorder 和 Fate/GrandOrder 会被算作符合两个 tag，所以用 Set 结构去重。测试 id 51811780\r\n            for (const tag of tags) {\r\n                tempTags.add(tag.toLowerCase());\r\n            }\r\n            for (const tag of tempTags) {\r\n                for (const need of tempArr) {\r\n                    if (tag === need.toLowerCase()) {\r\n                        tagNeedMatched++;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            // 如果全部匹配\r\n            if (tagNeedMatched >= tempArr.length) {\r\n                result = true;\r\n            }\r\n        }\r\n        else {\r\n            result = true;\r\n        }\r\n        return result;\r\n    }\r\n    // 检查作品是否符合排除 tag 的条件, 只要作品包含其中一个就排除。返回值表示是否保留这个作品。\r\n    checkExcludeTag(tags) {\r\n        let result = true;\r\n        if (!this.excludeTag || tags === undefined) {\r\n            return true;\r\n        }\r\n        let tempArr = this.excludeTag.split(',');\r\n        // 如果设置了排除 tag\r\n        if (tempArr.length > 0) {\r\n            for (const tag of tags) {\r\n                for (const notNeed of tempArr) {\r\n                    if (tag.toLowerCase() === notNeed.toLowerCase()) {\r\n                        result = false;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    // 检查作品是否符合过滤宽高的条件\r\n    checkSetWh(width, height) {\r\n        if (width === undefined) {\r\n            width = 0;\r\n        }\r\n        if (height === undefined) {\r\n            height = 0;\r\n        }\r\n        if (this.filterWh.width > 0 || this.filterWh.height > 0) {\r\n            // 如果宽高都小于要求的宽高\r\n            if (width < this.filterWh.width && height < this.filterWh.height) {\r\n                return false;\r\n            }\r\n            else {\r\n                if (this.filterWh.andOr === '|') {\r\n                    // 判断or的情况\r\n                    if (width >= this.filterWh.width || height >= this.filterWh.height) {\r\n                        return true;\r\n                    }\r\n                    else {\r\n                        return false;\r\n                    }\r\n                }\r\n                else if (this.filterWh.andOr === '&') {\r\n                    // 判断and的情况\r\n                    if (width >= this.filterWh.width && height >= this.filterWh.height) {\r\n                        return true;\r\n                    }\r\n                    else {\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    // 检查作品是否符合宽高比条件\r\n    checkRatio(width, height) {\r\n        if (width === undefined) {\r\n            width = 0;\r\n        }\r\n        if (height === undefined) {\r\n            height = 0;\r\n        }\r\n        if (this.ratioType === '0') {\r\n            return true;\r\n        }\r\n        else if (this.ratioType === '1') {\r\n            return width / height > 1;\r\n        }\r\n        else if (this.ratioType === '2') {\r\n            return width / height < 1;\r\n        }\r\n        else {\r\n            return width / height >= parseFloat(ui.form.userRatio.value);\r\n        }\r\n    }\r\n    // 检查 id 范围设置\r\n    checkIdRange(id) {\r\n        if (id === undefined) {\r\n            return true;\r\n        }\r\n        const nowId = parseInt(id.toString());\r\n        const setId = parseInt(ui.form.idRangeInput.value);\r\n        if (this.idRange === 1) {\r\n            // 大于\r\n            return nowId > setId;\r\n        }\r\n        else if (this.idRange === 2) {\r\n            // 小于\r\n            return nowId < setId;\r\n        }\r\n        else {\r\n            return true;\r\n        }\r\n    }\r\n    // 检查投稿时间设置\r\n    checkPostDate(date) {\r\n        if (!this.postDate || date === undefined) {\r\n            return true;\r\n        }\r\n        else {\r\n            const nowDate = new Date(date);\r\n            if (nowDate >= this.postDateStart && nowDate <= this.postDateEnd) {\r\n                return true;\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    // 检查首次登场设置\r\n    // yes_rank 是昨日排名，如果为 0，则此作品是“首次登场”的作品\r\n    checkDebut(yes_rank) {\r\n        if (!this.debut) {\r\n            return true;\r\n        }\r\n        else {\r\n            if (yes_rank === 0 || yes_rank === undefined) {\r\n                return true;\r\n            }\r\n            else {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n}\r\nconst filter = new Filter();\r\nexport { filter };\r\n","// 图片查看器类\r\n/// <reference path = \"./Viewer.d.ts\" />\r\nimport { API } from './API';\r\nclass ImgViewer {\r\n    constructor() {\r\n        this.viewerUl = document.createElement('ul'); // 图片列表的 ul 元素\r\n        this.viewerWarpper = document.createElement('div'); // 图片列表的容器\r\n    }\r\n    // 初始化图片查看器\r\n    newViewer(pageCount, firsturl) {\r\n        // 因为选项里的 size 是枚举类型，所以在这里也要定义一个枚举\r\n        let ToolbarButtonSize;\r\n        (function (ToolbarButtonSize) {\r\n            ToolbarButtonSize[\"Small\"] = \"small\";\r\n            ToolbarButtonSize[\"Medium\"] = \"medium\";\r\n            ToolbarButtonSize[\"Large\"] = \"large\";\r\n        })(ToolbarButtonSize || (ToolbarButtonSize = {}));\r\n        this.myViewer = new Viewer(this.viewerUl, {\r\n            toolbar: {\r\n                zoomIn: 0,\r\n                zoomOut: 0,\r\n                oneToOne: 1,\r\n                reset: 0,\r\n                prev: 1,\r\n                play: {\r\n                    show: 0,\r\n                    size: ToolbarButtonSize.Large\r\n                },\r\n                next: 1,\r\n                rotateLeft: 0,\r\n                rotateRight: 0,\r\n                flipHorizontal: 0,\r\n                flipVertical: 0\r\n            },\r\n            url(image) {\r\n                return image.dataset.src;\r\n            },\r\n            viewed(ev) {\r\n                // 当图片显示完成（加载完成）后，预加载下一张图片\r\n                let index = ev.detail.index;\r\n                if (index < pageCount - 1) {\r\n                    index++;\r\n                }\r\n                const nextImg = firsturl.replace('p0', 'p' + index);\r\n                const img = new Image();\r\n                img.src = nextImg;\r\n            },\r\n            // 取消一些动画，比如切换图片时，图片从小变大出现的动画\r\n            transition: false,\r\n            // 取消键盘支持，主要是用键盘左右方向键切换的话，会和 pixiv 页面产生冲突。（pixiv 页面上，左右方向键会切换作品）\r\n            keyboard: false,\r\n            // 不显示 title（图片名和宽高信息）\r\n            title: false,\r\n            // 不显示缩放比例\r\n            tooltip: false\r\n        });\r\n    }\r\n    // 初始化图片查看器\r\n    init() {\r\n        // 检查图片查看器元素是否已经生成\r\n        if (!document.getElementById('viewerWarpper')) {\r\n            // 创建图片查看器\r\n            this.createViewer();\r\n        }\r\n        else {\r\n            // 更新数据\r\n            this.updateViewer();\r\n        }\r\n    }\r\n    // 创建图片查看器 html 元素，并绑定一些事件，这个函数只会在初始化时执行一次\r\n    createViewer() {\r\n        if (!document.querySelector('main figcaption')) {\r\n            // 等到作品主体部分的元素生成之后再创建查看器\r\n            setTimeout(() => {\r\n                this.createViewer();\r\n            }, 300);\r\n            return;\r\n        }\r\n        // 查看器图片列表元素的结构： div#viewerWarpper > ul > li > img\r\n        this.viewerWarpper = document.createElement('div');\r\n        this.viewerWarpper.id = 'viewerWarpper';\r\n        this.viewerUl = document.createElement('ul');\r\n        this.viewerWarpper.appendChild(this.viewerUl);\r\n        document\r\n            .querySelector('main figcaption')\r\n            .insertAdjacentElement('beforebegin', this.viewerWarpper);\r\n        // 图片查看器显示之后\r\n        this.viewerUl.addEventListener('shown', () => {\r\n            // 显示相关元素\r\n            this.showViewerOther();\r\n            // 点击 1：1 按钮时，全屏查看\r\n            document\r\n                .querySelector('.viewer-one-to-one')\r\n                .addEventListener('click', () => {\r\n                this.hideViewerOther(); // 隐藏查看器的其他元素\r\n                // 进入全屏\r\n                document.body.requestFullscreen();\r\n                // 使图片居中显示，必须加延迟\r\n                setTimeout(() => {\r\n                    this.setViewerCenter();\r\n                }, 100);\r\n                setInterval(() => {\r\n                    this.zoomToMax();\r\n                }, 100);\r\n            });\r\n        });\r\n        // 全屏状态下，查看和切换图片时，显示比例始终为 100%\r\n        this.viewerUl.addEventListener('view', () => {\r\n            if (this.isFullscreen()) {\r\n                setTimeout(() => {\r\n                    // 通过点击 1:1 按钮，调整为100%并居中。这里必须要加延时，否则点击的时候图片还是旧的\r\n                    ;\r\n                    document.querySelector('.viewer-one-to-one').click();\r\n                }, 50);\r\n            }\r\n        });\r\n        // 隐藏查看器时，如果还处于全屏，则退出全屏\r\n        this.viewerUl.addEventListener('hidden', () => {\r\n            if (this.isFullscreen()) {\r\n                document.exitFullscreen();\r\n            }\r\n        });\r\n        // esc 退出图片查看器\r\n        document.addEventListener('keyup', event => {\r\n            if (event.keyCode === 27) {\r\n                // 按下 esc\r\n                // 如果非全屏，且查看器已经打开，则退出查看器\r\n                if (!this.isFullscreen() && this.viewerIsShow()) {\r\n                    ;\r\n                    document.querySelector('.viewer-close').click();\r\n                }\r\n            }\r\n        });\r\n        void [\r\n            'fullscreenchange',\r\n            'webkitfullscreenchange',\r\n            'mozfullscreenchange'\r\n        ].forEach(arg => {\r\n            // 检测全屏状态变化，目前有兼容性问题（这里也相当于绑定了按 esc 退出的事件）\r\n            document.addEventListener(arg, () => {\r\n                // 退出全屏\r\n                if (!this.isFullscreen()) {\r\n                    this.showViewerOther();\r\n                }\r\n            });\r\n        });\r\n        this.updateViewer();\r\n    }\r\n    // 根据作品信息，更新图片查看器配置。每当页面更新时执行一次\r\n    async updateViewer() {\r\n        this.viewerWarpper.style.display = 'none'; // 先隐藏 viewerWarpper\r\n        // 获取作品信息\r\n        const data = await API.getWorksData(API.getIllustId());\r\n        const thisOneData = data.body;\r\n        // 处理插画或漫画作品，不处理动图作品\r\n        if (thisOneData.illustType === 0 || thisOneData.illustType === 1) {\r\n            // 有多张图片时，创建缩略图\r\n            if (thisOneData.pageCount > 1) {\r\n                const { thumb, original } = thisOneData.urls;\r\n                this.viewerUl.innerHTML = new Array(thisOneData.pageCount)\r\n                    .fill(1)\r\n                    .reduce((html, now, index) => {\r\n                    return (html += `<li><img src=\"${thumb.replace('p0', 'p' + index)}\" data-src=\"${original.replace('p0', 'p' + index)}\"></li>`);\r\n                }, '');\r\n                // 数据更新后，显示 viewerWarpper\r\n                this.viewerWarpper.style.display = 'block';\r\n                // 销毁看图组件\r\n                if (this.myViewer) {\r\n                    this.myViewer.destroy();\r\n                }\r\n                // 重新配置看图组件\r\n                this.newViewer(thisOneData.pageCount, original);\r\n                // 预加载第一张图片\r\n                const img = new Image();\r\n                img.src = original;\r\n            }\r\n        }\r\n    }\r\n    // 隐藏查看器的其他元素\r\n    hideViewerOther() {\r\n        document\r\n            .querySelector('.viewer-container')\r\n            .classList.add('black-background');\r\n        // 隐藏底部的其他元素，仍然显示左右切换按钮\r\n        const close = document.querySelector('.viewer-close');\r\n        const oneToOne = document.querySelector('.viewer-one-to-one');\r\n        const navbar = document.querySelector('.viewer-navbar');\r\n        for (const element of [close, oneToOne, navbar]) {\r\n            element.style.display = 'none';\r\n        }\r\n    }\r\n    // 显示查看器的其他元素\r\n    showViewerOther() {\r\n        document\r\n            .querySelector('.viewer-container')\r\n            .classList.remove('black-background');\r\n        // 显示底部隐藏的元素\r\n        const close = document.querySelector('.viewer-close');\r\n        const oneToOne = document.querySelector('.viewer-one-to-one');\r\n        const navbar = document.querySelector('.viewer-navbar');\r\n        for (const element of [close, oneToOne, navbar]) {\r\n            element.style.display = 'block';\r\n        }\r\n    }\r\n    zoomToMax() {\r\n        const img = document.querySelector('.viewer-move');\r\n        if (this.isFullscreen() && parseInt(img.style.width) < img.naturalWidth) {\r\n            // img.style.width=img.naturalWidth+'px'\r\n            // img.style.height = img.naturalHeight+'px'\r\n            this.myViewer.zoomTo(1);\r\n        }\r\n    }\r\n    // 在图片100%显示时，使其居中\r\n    setViewerCenter() {\r\n        // 获取图片宽高\r\n        const imgInfo = document.querySelector('.viewer-title').textContent;\r\n        // 如果图片尚未加载出来的话，就没有内容，就过一会儿再执行\r\n        if (!imgInfo) {\r\n            setTimeout(() => {\r\n                this.setViewerCenter();\r\n            }, 200);\r\n            return;\r\n        }\r\n        const [imgWidth, imgHeight] = /\\d{1,5} × \\d{1,5}/\r\n            .exec(imgInfo)[0]\r\n            .split(' × ');\r\n        // > '66360324_p5_master1200.jpg (919 × 1300)'\r\n        // < [\"919\", \"1300\"]\r\n        // 获取网页宽高\r\n        const htmlWidth = document.documentElement.clientWidth;\r\n        const htmlHeight = document.documentElement.clientHeight;\r\n        // 设置边距\r\n        const setWidth = (htmlWidth - parseInt(imgWidth)) / 2;\r\n        let setHeight = (htmlHeight - parseInt(imgHeight)) / 2;\r\n        // 当图片高度大于浏览器窗口高度时，居顶显示而不是居中\r\n        // if (setHeight < 0) {\r\n        //   setHeight = 0\r\n        // }\r\n        this.myViewer.zoomTo(1);\r\n        this.myViewer.moveTo(setWidth, setHeight);\r\n    }\r\n    // 判断是否处于全屏状态\r\n    isFullscreen() {\r\n        return !!document.fullscreenElement;\r\n    }\r\n    // 判断看图器是否处于显示状态\r\n    viewerIsShow() {\r\n        const viewerContainer = document.querySelector('.viewer-container');\r\n        if (viewerContainer) {\r\n            return viewerContainer.classList.contains('viewer-in');\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\nconst imgViewer = new ImgViewer();\r\nexport { imgViewer };\r\n","// 初始化地区排行榜页面\r\nimport { InitPageBase } from './InitPageBase';\r\nimport { Colors } from './Colors';\r\nimport { lang } from './Lang';\r\nimport { ui } from './UI';\r\nclass InitAreaRankingPage extends InitPageBase {\r\n    constructor(crawler) {\r\n        super(crawler);\r\n        this.crawler = crawler;\r\n    }\r\n    appendCenterBtns() {\r\n        ui.addCenterButton(Colors.blue, lang.transl('_抓取本页作品'), [\r\n            ['title', lang.transl('_抓取本页作品Title')]\r\n        ]).addEventListener('click', () => {\r\n            this.crawler.readyCrawl();\r\n        });\r\n    }\r\n    setFormOptin() {\r\n        this.hideNotNeedOption([1, 14]);\r\n    }\r\n    destroySelf() { }\r\n}\r\nexport { InitAreaRankingPage };\r\n","// 初始化 bookmark_detail 页面\r\nimport { InitPageBase } from './InitPageBase';\r\nimport { Colors } from './Colors';\r\nimport { lang } from './Lang';\r\nimport { ui } from './UI';\r\nclass InitBookmarkDetailPage extends InitPageBase {\r\n    constructor(crawler) {\r\n        super(crawler);\r\n        this.crawler = crawler;\r\n    }\r\n    appendCenterBtns() {\r\n        ui.addCenterButton(Colors.blue, lang.transl('_抓取相似图片'), [\r\n            ['title', lang.transl('_抓取相似图片')]\r\n        ]).addEventListener('click', () => {\r\n            this.crawler.readyCrawl();\r\n        }, false);\r\n    }\r\n    setFormOptin() {\r\n        // 设置抓取的作品数量\r\n        // 实际上的数字可以更大，这里只是预设一个限制。\r\n        this.crawler.maxCount = 500;\r\n        this.setWantPageTip1.textContent = lang.transl('_个数');\r\n        this.setWantPageTip1.dataset.tip = lang.transl('_要获取的作品个数2');\r\n        this.setWantPageTip2.textContent = `1 - ${this.crawler.maxCount}`;\r\n        this.setWantPage.value = this.crawler.maxCount.toString();\r\n        this.hideNotNeedOption([14]);\r\n    }\r\n    destroySelf() { }\r\n}\r\nexport { InitBookmarkDetailPage };\r\n","// 初始化 关注的新作品页面\r\nimport { InitPageBase } from './InitPageBase';\r\nimport { Colors } from './Colors';\r\nimport { lang } from './Lang';\r\nimport { ui } from './UI';\r\nclass InitBookmarkNewIllustPage extends InitPageBase {\r\n    constructor(crawler) {\r\n        super(crawler);\r\n        this.crawler = crawler;\r\n    }\r\n    appendCenterBtns() {\r\n        ui.addCenterButton(Colors.blue, lang.transl('_开始抓取'), [\r\n            ['title', lang.transl('_开始抓取') + lang.transl('_默认下载多页')]\r\n        ]).addEventListener('click', () => {\r\n            this.crawler.readyCrawl();\r\n        });\r\n    }\r\n    appendElseEl() {\r\n        // 添加 R-18 页面的链接\r\n        const r18Link = `<li><a href=\"/bookmark_new_illust_r18.php\">R-18</a></li>`;\r\n        const target = document.querySelector('.menu-items');\r\n        if (target) {\r\n            target.insertAdjacentHTML('beforeend', r18Link);\r\n        }\r\n    }\r\n    setFormOptin() {\r\n        // 设置页数\r\n        this.crawler.maxCount = 100;\r\n        this.setWantPageTip1.textContent = lang.transl('_页数');\r\n        this.setWantPageTip1.dataset.tip = lang.transl('_checkWantPageRule1Arg8');\r\n        this.setWantPageTip2.textContent = `1 - ${this.crawler.maxCount}`;\r\n        this.setWantPage.value = this.crawler.maxCount.toString();\r\n        this.hideNotNeedOption([14]);\r\n    }\r\n    destroySelf() { }\r\n}\r\nexport { InitBookmarkNewIllustPage };\r\n","// 初始化页面，初始化抓取流程\r\nimport { EVT } from './EVT';\r\nimport { store } from './Store';\r\nimport { pageType } from './PageType';\r\nimport { log } from './Log';\r\nimport { CrawlIndexPage } from './CrawlIndexPage';\r\nimport { CrawlDiscoverPage } from './CrawlDiscoverPage';\r\nimport { CrawlWorksPage } from './CrawlWorksPage';\r\nimport { CrawlUserPage } from './CrawlUserPage';\r\nimport { CrawlSearchPage } from './CrawlSearchPage';\r\nimport { CrawlAreaRankingPage } from './CrawlAreaRankingPage';\r\nimport { CrawlRankingPage } from './CrawlRankingPage';\r\nimport { CrawlPixivisionPage } from './CrawlPixivisionPage';\r\nimport { CrawlBookmarkDetailPage } from './CrawlBookmarkDetailPage';\r\nimport { CrawlBookmarkNewIllustPage } from './CrawlBookmarkNewIllustPage';\r\nimport { CrawlNewIllustPage } from './CrawlNewIllustPage';\r\nimport { InitIndexPage } from './InitIndexPage';\r\nimport { InitWorksPage } from './InitWorksPage';\r\nimport { InitUserPage } from './InitUserPage';\r\nimport { InitSearchPage } from './InitSearchPage';\r\nimport { InitAreaRankingPage } from './InitAreaRankingPage';\r\nimport { InitRankingPage } from './InitRankingPage';\r\nimport { InitPixivisionPage } from './InitPixivisionPage';\r\nimport { InitBookmarkDetailPage } from './InitBookmarkDetailPage';\r\nimport { InitBookmarkNewIllustPage } from './InitBookmarkNewIllustPage';\r\nimport { InitDiscoverPage } from './InitDiscoverPage';\r\nimport { InitNewIllustPage } from './InitNewIllustPage';\r\nclass InitCrawlProcess {\r\n    constructor() {\r\n        this.init = this.getInit();\r\n        this.init.init();\r\n        // 页面类型变化时，初始化抓取流程\r\n        window.addEventListener(EVT.events.pageTypeChange, () => {\r\n            this.reInit();\r\n            // 切换不同页面时，如果任务已经完成，则清空输出区域，避免日志一直堆积。\r\n            if (store.states.allowWork) {\r\n                log.clear();\r\n            }\r\n        });\r\n    }\r\n    getInit() {\r\n        switch (pageType.getPageType()) {\r\n            case 0:\r\n                return new InitIndexPage(new CrawlIndexPage());\r\n            case 1:\r\n                return new InitWorksPage(new CrawlWorksPage());\r\n            case 2:\r\n                return new InitUserPage(new CrawlUserPage());\r\n            case 5:\r\n                return new InitSearchPage(new CrawlSearchPage());\r\n            case 6:\r\n                return new InitAreaRankingPage(new CrawlAreaRankingPage());\r\n            case 7:\r\n                return new InitRankingPage(new CrawlRankingPage());\r\n            case 8:\r\n                return new InitPixivisionPage(new CrawlPixivisionPage());\r\n            case 9:\r\n                return new InitBookmarkDetailPage(new CrawlBookmarkDetailPage());\r\n            case 10:\r\n                return new InitBookmarkNewIllustPage(new CrawlBookmarkNewIllustPage());\r\n            case 11:\r\n                return new InitDiscoverPage(new CrawlDiscoverPage());\r\n            case 12:\r\n                return new InitNewIllustPage(new CrawlNewIllustPage());\r\n            default:\r\n                throw new Error('InitCrawlProcess error: Illegal parameter.');\r\n        }\r\n    }\r\n    reInit() {\r\n        this.init.destroy();\r\n        this.init = this.getInit();\r\n        this.init.init();\r\n    }\r\n}\r\nnew InitCrawlProcess();\r\n","// 初始化发现页面\r\nimport { InitPageBase } from './InitPageBase';\r\nimport { Colors } from './Colors';\r\nimport { lang } from './Lang';\r\nimport { ui } from './UI';\r\nimport { DeleteWorks } from './DeleteWorks';\r\nclass InitDiscoverPage extends InitPageBase {\r\n    constructor(crawler) {\r\n        super(crawler);\r\n        this.crawler = crawler;\r\n    }\r\n    appendCenterBtns() {\r\n        ui.addCenterButton(Colors.blue, lang.transl('_抓取当前作品'), [\r\n            ['title', lang.transl('_抓取当前作品Title')]\r\n        ]).addEventListener('click', () => {\r\n            this.crawler.readyCrawl();\r\n        });\r\n    }\r\n    setFormOptin() {\r\n        this.hideNotNeedOption([1, 14]);\r\n    }\r\n    appendElseEl() {\r\n        const deleteWorks = new DeleteWorks('._2RNjBox');\r\n        deleteWorks.addClearMultipleBtn('._3b8AXEx');\r\n        deleteWorks.addClearUgoiraBtn('.AGgsUWZ');\r\n        deleteWorks.addManuallyDeleteBtn();\r\n    }\r\n    destroySelf() { }\r\n}\r\nexport { InitDiscoverPage };\r\n","// 初始化首页\r\nimport { InitPageBase } from './InitPageBase';\r\nimport { Colors } from './Colors';\r\nimport { lang } from './Lang';\r\nimport { ui } from './UI';\r\nimport { DOM } from './DOM';\r\nclass InitIndexPage extends InitPageBase {\r\n    constructor(crawler) {\r\n        super(crawler);\r\n        this.downIdButton = document.createElement('button');\r\n        this.downIdInput = document.createElement('textarea');\r\n        this.ready = false;\r\n        this.crawler = crawler;\r\n    }\r\n    appendCenterBtns() {\r\n        this.downIdButton = ui.addCenterButton(Colors.blue, lang.transl('_输入id进行抓取'), [['id', 'down_id_button']]);\r\n        this.downIdButton.addEventListener('click', () => {\r\n            if (!this.ready) {\r\n                // 还没准备好\r\n                ui.hideCenterPanel();\r\n                this.downIdInput.style.display = 'block';\r\n                this.downIdInput.focus();\r\n                document.documentElement.scrollTop = 0;\r\n            }\r\n            else {\r\n                this.crawler.readyCrawl();\r\n            }\r\n        }, false);\r\n    }\r\n    appendElseEl() {\r\n        // 用于输入id的输入框\r\n        this.downIdInput = document.createElement('textarea');\r\n        this.downIdInput.id = 'down_id_input';\r\n        this.downIdInput.style.display = 'none';\r\n        this.downIdInput.setAttribute('placeholder', lang.transl('_输入id进行抓取的提示文字'));\r\n        DOM.insertToHead(this.downIdInput);\r\n        this.downIdInput.addEventListener('change', () => {\r\n            // 当输入框内容改变时检测，非空值时显示下载区域\r\n            if (this.downIdInput.value !== '') {\r\n                this.ready = true;\r\n                ui.showCenterPanel();\r\n                this.downIdButton.textContent = lang.transl('_开始抓取');\r\n            }\r\n            else {\r\n                this.ready = false;\r\n                ui.hideCenterPanel();\r\n                this.downIdButton.textContent = lang.transl('_输入id进行抓取');\r\n            }\r\n        });\r\n    }\r\n    setFormOptin() {\r\n        this.hideNotNeedOption([1, 14]);\r\n    }\r\n    destroySelf() { }\r\n}\r\nexport { InitIndexPage };\r\n","// 初始化 大家的新作品页面\r\nimport { InitPageBase } from './InitPageBase';\r\nimport { Colors } from './Colors';\r\nimport { lang } from './Lang';\r\nimport { ui } from './UI';\r\nclass InitNewIllustPage extends InitPageBase {\r\n    constructor(crawler) {\r\n        super(crawler);\r\n        this.timer = 0;\r\n        this.crawler = crawler;\r\n    }\r\n    appendCenterBtns() {\r\n        ui.addCenterButton(Colors.blue, lang.transl('_开始抓取'), [\r\n            ['title', lang.transl('_下载大家的新作品')]\r\n        ]).addEventListener('click', () => {\r\n            this.crawler.readyCrawl();\r\n        });\r\n    }\r\n    appendElseEl() {\r\n        // 添加 R-18 页面的链接\r\n        const r18Link = `<a href=\"/new_illust_r18.php\" style=\"color:#179fdd;padding-left:20px;\">R-18</a>`;\r\n        const target = document.querySelector('#root h1');\r\n        if (target) {\r\n            target.insertAdjacentHTML('beforeend', r18Link);\r\n            clearTimeout(this.timer);\r\n        }\r\n        else {\r\n            this.timer = window.setTimeout(() => {\r\n                this.appendElseEl();\r\n            }, 300);\r\n        }\r\n    }\r\n    setFormOptin() {\r\n        // 设置抓取的作品数量\r\n        // 最大有 10000 个。但是输入框的默认值设置的少一些比较合理。\r\n        this.crawler.maxCount = 10000;\r\n        this.setWantPageTip1.textContent = lang.transl('_个数');\r\n        this.setWantPageTip1.dataset.tip = lang.transl('_要获取的作品个数2');\r\n        this.setWantPageTip2.textContent = `1 - ${this.crawler.maxCount}`;\r\n        this.setWantPage.value = '100';\r\n        this.hideNotNeedOption([14]);\r\n    }\r\n    destroySelf() { }\r\n}\r\nexport { InitNewIllustPage };\r\n","import { lang } from './Lang';\r\nimport { ui } from './UI';\r\nclass InitPageBase {\r\n    constructor(crawler) {\r\n        this.setWantPageWrap = ui.form.querySelector('.formOption1');\r\n        this.setWantPage = this.setWantPageWrap.querySelector('.setWantPage');\r\n        this.setWantPageTip1 = this.setWantPageWrap.querySelector('.setWantPageTip1');\r\n        this.setWantPageTip2 = this.setWantPageWrap.querySelector('.setWantPageTip2');\r\n    }\r\n    // 初始化\r\n    init() {\r\n        this.appendCenterBtns();\r\n        this.setFormOptin();\r\n        this.appendElseEl();\r\n    }\r\n    destroy() {\r\n        this.destroySelf();\r\n        ui.clearCenterButton();\r\n        this.crawler.destroy();\r\n    }\r\n    // 添加中间按钮\r\n    appendCenterBtns() { }\r\n    // 添加其他元素（如果有）\r\n    appendElseEl() { }\r\n    // 显示或隐藏指定的选项\r\n    toggleOption(no, display) {\r\n        for (const num of no) {\r\n            const el = ui.form.querySelector('.formOption' + num.toString());\r\n            el.style.display = display;\r\n        }\r\n    }\r\n    // 隐藏一些选项。参数是数组，传递设置项的编号。\r\n    hideNotNeedOption(no) {\r\n        this.toggleOption(no, 'none');\r\n    }\r\n    // 显示一些选项。因为页面无刷新加载，所以一些选项被隐藏后，可能需要再次显示\r\n    showOption(no) {\r\n        this.toggleOption(no, 'block');\r\n    }\r\n    // 设置表单里的选项。主要是设置页数，隐藏不需要的选项。\r\n    setFormOptin() {\r\n        // 设置页数\r\n        this.setWantPageTip1.textContent = lang.transl('_页数');\r\n        this.setWantPageTip1.dataset.tip = lang.transl('_checkWantPageRule1Arg8');\r\n        this.setWantPageTip2.textContent = lang.transl('_数字提示1');\r\n        this.setWantPage.value = '1';\r\n    }\r\n}\r\nexport { InitPageBase };\r\n","// 初始化 pixivision 页面\r\nimport { InitPageBase } from './InitPageBase';\r\nimport { Colors } from './Colors';\r\nimport { lang } from './Lang';\r\nimport { ui } from './UI';\r\nclass InitPixivisionPage extends InitPageBase {\r\n    constructor(crawler) {\r\n        super(crawler);\r\n        this.crawler = crawler;\r\n    }\r\n    appendCenterBtns() {\r\n        const typeA = document.querySelector('a[data-gtm-action=ClickCategory]');\r\n        const type = typeA.dataset.gtmLabel;\r\n        if (type === 'illustration' || type === 'manga' || type === 'cosplay') {\r\n            // 在插画、漫画、cosplay类型的页面上创建下载功能\r\n            ui.addCenterButton(Colors.blue, lang.transl('_抓取该页面的图片')).addEventListener('click', () => {\r\n                this.crawler.readyCrawl();\r\n            }, false);\r\n        }\r\n    }\r\n    setFormOptin() {\r\n        this.hideNotNeedOption([1, 2, 3, 4, 5, 6, 7, 11, 12, 13, 14, 15, 16]);\r\n    }\r\n    destroySelf() { }\r\n}\r\nexport { InitPixivisionPage };\r\n","// 初始化排行榜页面\r\nimport { InitPageBase } from './InitPageBase';\r\nimport { Colors } from './Colors';\r\nimport { API } from './API';\r\nimport { lang } from './Lang';\r\nimport { ui } from './UI';\r\nclass InitRankingPage extends InitPageBase {\r\n    constructor(crawler) {\r\n        super(crawler);\r\n        this.crawler = crawler;\r\n    }\r\n    appendCenterBtns() {\r\n        ui.addCenterButton(Colors.blue, lang.transl('_抓取本排行榜作品'), [\r\n            ['title', lang.transl('_抓取本排行榜作品Title')]\r\n        ]).addEventListener('click', () => {\r\n            this.crawler.readyCrawl();\r\n        });\r\n        // 判断当前页面是否有“首次登场”标记\r\n        let debutModes = ['daily', 'daily_r18', 'rookie', ''];\r\n        let mode = API.getURLField(location.href, 'mode');\r\n        if (debutModes.includes(mode)) {\r\n            ui.addCenterButton(Colors.blue, lang.transl('_抓取首次登场的作品'), [\r\n                ['title', lang.transl('_抓取首次登场的作品Title')]\r\n            ]).addEventListener('click', () => {\r\n                ui.form.debut.value = '1';\r\n                this.crawler.readyCrawl();\r\n            });\r\n        }\r\n    }\r\n    setFormOptin() {\r\n        // 设置抓取的作品数量\r\n        this.crawler.maxCount = 500;\r\n        this.setWantPageTip1.textContent = lang.transl('_个数');\r\n        this.setWantPageTip1.dataset.tip = lang.transl('_要获取的作品个数2');\r\n        this.setWantPageTip2.textContent = `1 - ${this.crawler.maxCount}`;\r\n        this.setWantPage.value = this.crawler.maxCount.toString();\r\n        this.hideNotNeedOption([14]);\r\n    }\r\n    destroySelf() { }\r\n}\r\nexport { InitRankingPage };\r\n","// 初始化搜索页\r\nimport { InitPageBase } from './InitPageBase';\r\nimport { Colors } from './Colors';\r\nimport { lang } from './Lang';\r\nimport { ui } from './UI';\r\nimport { pageInfo } from './PageInfo';\r\nimport { DeleteWorks } from './DeleteWorks';\r\nimport { EVT } from './EVT';\r\nclass InitSearchPage extends InitPageBase {\r\n    constructor(crawler) {\r\n        super(crawler);\r\n        this.crawler = crawler;\r\n    }\r\n    appendCenterBtns() {\r\n        ui.addCenterButton(Colors.green, lang.transl('_开始筛选'), [\r\n            ['title', lang.transl('_开始筛选Title')]\r\n        ]).addEventListener('click', () => {\r\n            this.crawler.startScreen();\r\n        });\r\n        ui.addCenterButton(Colors.red, lang.transl('_在结果中筛选'), [\r\n            ['title', lang.transl('_在结果中筛选Title')]\r\n        ]).addEventListener('click', () => {\r\n            this.crawler.screenInResult();\r\n        });\r\n    }\r\n    appendElseEl() {\r\n        this.fastScreen();\r\n        const deleteWorks = new DeleteWorks('.lmXjIY');\r\n        deleteWorks.addClearMultipleBtn('.fjaNWC', () => {\r\n            EVT.fire(EVT.events.clearMultiple);\r\n        });\r\n        deleteWorks.addClearUgoiraBtn('.bAzGJL', () => {\r\n            EVT.fire(EVT.events.clearUgoira);\r\n        });\r\n        deleteWorks.addManuallyDeleteBtn((el) => {\r\n            EVT.fire(EVT.events.deleteWork, el);\r\n        });\r\n    }\r\n    // 打开快速筛选链接\r\n    openFastScreenLink(secondTag) {\r\n        // 拼接两个 tag。因为搜索页面可以无刷新切换搜索的 tag，所以从这里动态获取\r\n        const firstTag = pageInfo.getPageTag.split(' ')[0];\r\n        const fullTag = encodeURIComponent(firstTag + ' ' + secondTag);\r\n        // 用新的 tag 替换掉当前网址里的 tag\r\n        let newURL = location.href.replace(encodeURIComponent(pageInfo.getPageTag), fullTag);\r\n        // 添加 s_mode=s_tag 宽松匹配标签\r\n        let u = new URL(newURL);\r\n        u.searchParams.set('s_mode', 's_tag');\r\n        location.href = u.toString();\r\n    }\r\n    // 添加快速筛选功能\r\n    fastScreen() {\r\n        // 判断插入点的元素有没有加载出来\r\n        let target = document.querySelector('header');\r\n        if (!target) {\r\n            setTimeout(() => {\r\n                this.fastScreen();\r\n            }, 300);\r\n            return;\r\n        }\r\n        const favNums = [\r\n            '100users入り',\r\n            '500users入り',\r\n            '1000users入り',\r\n            '3000users入り',\r\n            '5000users入り',\r\n            '10000users入り',\r\n            '20000users入り',\r\n            '30000users入り',\r\n            '50000users入り'\r\n        ]; // 200 和 2000 的因为数量太少，不添加。40000 的也少\r\n        const fastScreenArea = document.createElement('div');\r\n        fastScreenArea.className = 'fastScreenArea';\r\n        favNums.forEach(secondTag => {\r\n            let a = document.createElement('a');\r\n            a.innerText = secondTag;\r\n            a.href = 'javascript:viod(0)';\r\n            a.onclick = () => {\r\n                this.openFastScreenLink(secondTag);\r\n            };\r\n            fastScreenArea.appendChild(a);\r\n        });\r\n        target.insertAdjacentElement('afterend', fastScreenArea);\r\n    }\r\n    setFormOptin() {\r\n        this.crawler.maxCount = 1000;\r\n        this.setWantPageTip1.textContent = lang.transl('_页数');\r\n        this.setWantPageTip1.dataset.tip = lang.transl('_checkWantPageRule1Arg8');\r\n        this.setWantPageTip2.textContent = `1 - ${this.crawler.maxCount}`;\r\n        this.setWantPage.value = this.crawler.maxCount.toString();\r\n        this.hideNotNeedOption([14]);\r\n    }\r\n    destroySelf() {\r\n        // 删除快速筛选元素\r\n        const fastScreen = document.querySelector('.fastScreenArea');\r\n        if (fastScreen) {\r\n            fastScreen.remove();\r\n        }\r\n    }\r\n}\r\nexport { InitSearchPage };\r\n","// 初始化用户页面\r\nimport { InitPageBase } from './InitPageBase';\r\nimport { API } from './API';\r\nimport { Colors } from './Colors';\r\nimport { lang } from './Lang';\r\nimport { ui } from './UI';\r\nimport { bookmarksAddTag } from './BookmarksAddTag';\r\nclass InitUserPage extends InitPageBase {\r\n    constructor(crawler) {\r\n        super(crawler);\r\n        this.crawler = crawler;\r\n    }\r\n    appendCenterBtns() {\r\n        ui.addCenterButton(Colors.blue, lang.transl('_开始抓取'), [\r\n            ['title', lang.transl('_开始抓取') + lang.transl('_默认下载多页')]\r\n        ]).addEventListener('click', () => {\r\n            this.crawler.readyCrawl();\r\n        });\r\n        // 添加下载推荐作品的按钮，只在旧版收藏页面使用\r\n        const columnTitle = document.querySelector('.column-title');\r\n        if (columnTitle) {\r\n            const downRecmdBtn = ui.addCenterButton(Colors.blue, lang.transl('_抓取推荐作品'), [['title', lang.transl('_抓取推荐作品Title')]]);\r\n            downRecmdBtn.addEventListener('click', () => {\r\n                this.crawler.crawlRecommended = true;\r\n                this.crawler.readyCrawl();\r\n            }, false);\r\n        }\r\n        // 如果存在 token，则添加“添加 tag”按钮\r\n        if (API.getToken()) {\r\n            let btn = ui.addCenterButton(Colors.green, lang.transl('_添加tag'), [\r\n                ['title', lang.transl('_添加tag')]\r\n            ]);\r\n            btn.id = 'add_tag_btn';\r\n            bookmarksAddTag.init(btn);\r\n        }\r\n    }\r\n    setFormOptin() {\r\n        // 设置页数\r\n        this.setWantPageTip1.textContent = lang.transl('_页数');\r\n        this.setWantPageTip1.dataset.tip = lang.transl('_checkWantPageRule1Arg8');\r\n        this.setWantPageTip2.textContent = lang.transl('_数字提示1');\r\n        this.setWantPage.value = '-1';\r\n        this.hideNotNeedOption([14]);\r\n        // 在书签页面隐藏只要书签选项\r\n        if (location.href.includes('bookmark.php')) {\r\n            this.hideNotNeedOption([11]);\r\n        }\r\n    }\r\n    destroySelf() { }\r\n}\r\nexport { InitUserPage };\r\n","//初始化作品页\r\nimport { InitPageBase } from './InitPageBase';\r\nimport { Colors } from './Colors';\r\nimport { EVT } from './EVT';\r\nimport { lang } from './Lang';\r\nimport { ui } from './UI';\r\nimport { store } from './Store';\r\nimport { QuickBookmark } from './QuickBookmark';\r\nimport { imgViewer } from './ImgViewer';\r\nclass InitWorksPage extends InitPageBase {\r\n    constructor(crawler) {\r\n        super(crawler);\r\n        this.crawler = crawler;\r\n        // 初始化快速收藏功能和图片查看器\r\n        new QuickBookmark();\r\n        imgViewer.init();\r\n        // 页面切换时初始化图片查看器\r\n        window.addEventListener(EVT.events.pageSwitch, () => {\r\n            imgViewer.init();\r\n        });\r\n    }\r\n    appendCenterBtns() {\r\n        ui.addCenterButton(Colors.blue, lang.transl('_从本页开始抓取new')).addEventListener('click', () => {\r\n            this.crawler.crawlDirection = -1;\r\n            this.crawler.readyCrawl();\r\n        });\r\n        ui.addCenterButton(Colors.blue, lang.transl('_从本页开始抓取old')).addEventListener('click', () => {\r\n            this.crawler.crawlDirection = 1;\r\n            this.crawler.readyCrawl();\r\n        });\r\n        const downRelatedBtn = ui.addCenterButton(Colors.blue, lang.transl('_抓取相关作品'));\r\n        downRelatedBtn.addEventListener('click', () => {\r\n            this.crawler.crawlRelated = true;\r\n            this.crawler.readyCrawl();\r\n        }, false);\r\n    }\r\n    appendElseEl() {\r\n        // 在右侧创建快速下载按钮\r\n        const quickDownBtn = document.createElement('div');\r\n        quickDownBtn.id = 'quick_down_btn';\r\n        quickDownBtn.textContent = '↓';\r\n        quickDownBtn.setAttribute('title', lang.transl('_快速下载本页'));\r\n        document.body.appendChild(quickDownBtn);\r\n        quickDownBtn.addEventListener('click', () => {\r\n            store.states.quickDownload = true;\r\n            this.crawler.readyCrawl();\r\n        }, false);\r\n    }\r\n    setFormOptin() {\r\n        // 设置抓取的作品数量\r\n        this.setWantPageTip1.textContent = lang.transl('_个数');\r\n        this.setWantPageTip1.dataset.tip =\r\n            lang.transl('_checkWantPageRule1Arg8') +\r\n                '<br>' +\r\n                lang.transl('_相关作品大于0');\r\n        this.setWantPageTip2.textContent = lang.transl('_数字提示1');\r\n        this.setWantPage.value = '-1';\r\n        this.showOption([1, 14]);\r\n    }\r\n    destroySelf() {\r\n        // 删除快速下载按钮\r\n        const quickDownBtn = document.getElementById('quick_down_btn');\r\n        if (quickDownBtn) {\r\n            quickDownBtn.remove();\r\n        }\r\n    }\r\n}\r\nexport { InitWorksPage };\r\n","import { langText } from './langText';\r\n// 语言类\r\nclass Lang {\r\n    constructor() {\r\n        this.langType = 0;\r\n        this.getLangType();\r\n    }\r\n    // 设置语言类型\r\n    getLangType() {\r\n        const userLang = document.documentElement.lang; // 获取语言标识\r\n        switch (userLang) {\r\n            case 'zh':\r\n            case 'zh-CN':\r\n            case 'zh-Hans':\r\n                this.langType = 0; // 设置为简体中文\r\n                break;\r\n            case 'ja':\r\n                this.langType = 1; // 设置为日语\r\n                break;\r\n            case 'zh-Hant':\r\n            case 'zh-tw':\r\n            case 'zh-TW':\r\n                this.langType = 3; // 设置为繁体中文\r\n                break;\r\n            default:\r\n                this.langType = 2; // 设置为英语\r\n                break;\r\n        }\r\n    }\r\n    // translate 翻译\r\n    transl(name, ...arg) {\r\n        let content = langText[name][this.langType];\r\n        arg.forEach(val => (content = content.replace('{}', val)));\r\n        return content;\r\n    }\r\n}\r\nconst lang = new Lang();\r\nexport { lang };\r\n","import { DOM } from './DOM';\r\n// 日志类\r\nclass Log {\r\n    constructor() {\r\n        this.logArea = document.createElement('div'); // 输出日志的区域\r\n        this.id = 'logWrap'; // 日志区域元素的 id\r\n        this.refresh = document.createElement('span'); // 刷新时使用的元素\r\n        this.colors = ['#00ca19', '#d27e00', '#f00'];\r\n    }\r\n    // 如果日志元素没有添加到页面上，则添加上去\r\n    checkElement() {\r\n        let test = document.getElementById(this.id);\r\n        if (test === null) {\r\n            this.logArea.id = this.id;\r\n            DOM.insertToHead(this.logArea);\r\n        }\r\n    }\r\n    // 清空日志\r\n    clear() {\r\n        this.logArea.innerHTML = '';\r\n    }\r\n    // 添加日志\r\n    /*\r\n    str 日志文本\r\n    level 日志等级\r\n    br 换行标签的个数\r\n    keepShow 追加日志的模式，默认为 true，把这一条日志添加后不再修改。false 则是刷新显示这条消息。\r\n  \r\n    level 日志等级：\r\n    -1 auto 不设置颜色\r\n    0 success 绿色\r\n    1 warning 黄色\r\n    2 error 红色\r\n    */\r\n    add(str, level, br, keepShow) {\r\n        let span = document.createElement('span');\r\n        if (!keepShow) {\r\n            span = this.refresh;\r\n        }\r\n        span.innerHTML = str;\r\n        if (level > -1) {\r\n            span.style.color = this.colors[level];\r\n        }\r\n        while (br > 0) {\r\n            span.appendChild(document.createElement('br'));\r\n            br--;\r\n        }\r\n        this.logArea.appendChild(span);\r\n    }\r\n    log(str, br = 1, keepShow = true) {\r\n        this.checkElement();\r\n        this.add(str, -1, br, keepShow);\r\n    }\r\n    success(str, br = 1, keepShow = true) {\r\n        this.checkElement();\r\n        this.add(str, 0, br, keepShow);\r\n    }\r\n    warning(str, br = 1, keepShow = true) {\r\n        this.add(str, 1, br, keepShow);\r\n    }\r\n    error(str, br = 1, keepShow = true) {\r\n        this.add(str, 2, br, keepShow);\r\n    }\r\n}\r\nconst log = new Log();\r\nexport { log };\r\n","// 保存和初始化下载区域的设置项\r\n// 只有部分设置会被保存\r\nimport { ui } from './UI';\r\nimport { pageType } from './PageType';\r\nimport { EVT } from './EVT';\r\nclass Option {\r\n    constructor() {\r\n        // 本地存储中使用的 name\r\n        this.storeName = 'xzSetting';\r\n        // 需要持久化保存的设置的默认值\r\n        this.needSaveOptsDefault = {\r\n            multipleImageWorks: 0,\r\n            firstFewImages: 1,\r\n            downType0: true,\r\n            downType1: true,\r\n            downType2: true,\r\n            ugoiraSaveAs: 'webm',\r\n            needTag: '',\r\n            notNeedTag: '',\r\n            quietDownload: true,\r\n            downloadThread: 5,\r\n            userSetName: '{id}',\r\n            tagNameToFileName: true,\r\n            alwaysFolder: true,\r\n            showOptions: true,\r\n            postDate: false,\r\n            postDateStart: '',\r\n            postDateEnd: ''\r\n        };\r\n        // 储存需要持久化保存的设置\r\n        this.needSaveOpts = this.needSaveOptsDefault;\r\n        this.restoreOption();\r\n        this.bindOptionEvent();\r\n        window.addEventListener(EVT.events.resetOption, () => {\r\n            ui.form.reset();\r\n            this.reset();\r\n        });\r\n    }\r\n    // 恢复值是 Boolean 值的设置项\r\n    restoreBoolean(name) {\r\n        // 优先使用用户设置的值\r\n        if (this.needSaveOpts[name] !== undefined) {\r\n            ui.form[name].checked = this.needSaveOpts[name];\r\n        }\r\n        else {\r\n            // 否则使用默认值\r\n            ui.form[name].checked = this.needSaveOptsDefault[name];\r\n        }\r\n        // 这里不能简单的使用“或”符号来处理，考虑如下情况：\r\n        // this.needSaveOpts[name] || this.needSaveOptsDefault[name]\r\n        // 用户设置为 false，默认值为 true，使用 || 的话就恒为 true 了\r\n    }\r\n    // 从持久化设置里恢复下载区域的设置\r\n    // 可以执行多次\r\n    restoreOption() {\r\n        let str = localStorage.getItem(this.storeName);\r\n        // 如果之前已经持久化，则读取设置，初始化下载区域的选项\r\n        if (str) {\r\n            this.needSaveOpts = JSON.parse(str);\r\n        }\r\n        else {\r\n            // 如果没有保存过，则不做处理\r\n            return;\r\n        }\r\n        // 设置是否显示选项区域\r\n        ui.toggleOptionArea(this.needSaveOpts.showOptions);\r\n        // 多图作品设置\r\n        ui.form.multipleImageWorks.value = (this.needSaveOpts.multipleImageWorks ||\r\n            this.needSaveOptsDefault.multipleImageWorks).toString();\r\n        // 设置作品张数\r\n        ui.form.firstFewImages.value = (this.needSaveOpts.firstFewImages ||\r\n            this.needSaveOptsDefault.firstFewImages).toString();\r\n        // 设置下载的作品类型\r\n        this.restoreBoolean('downType0');\r\n        this.restoreBoolean('downType1');\r\n        this.restoreBoolean('downType2');\r\n        // 设置动图格式选项\r\n        ui.form.ugoiraSaveAs.value = this.needSaveOpts.ugoiraSaveAs;\r\n        // 设置必须的 tag\r\n        ui.form.needTag.value = this.needSaveOpts.needTag;\r\n        // 设置排除的 tag\r\n        ui.form.notNeedTag.value = this.needSaveOpts.notNeedTag;\r\n        // 设置投稿时间\r\n        this.restoreBoolean('postDate');\r\n        ui.form.postDateStart.value =\r\n            this.needSaveOpts.postDateStart || this.needSaveOptsDefault.postDateStart;\r\n        ui.form.postDateEnd.value =\r\n            this.needSaveOpts.postDateEnd || this.needSaveOptsDefault.postDateEnd;\r\n        // 设置自动下载\r\n        this.restoreBoolean('quietDownload');\r\n        // 设置下载线程\r\n        ui.form.downloadThread.value = this.needSaveOpts.downloadThread.toString();\r\n        // 设置文件命名规则\r\n        const fileNameRuleInput = ui.form.userSetName;\r\n        // pixivision 里，文件名只有 id 标记会生效，所以把文件名部分替换成 id\r\n        if (pageType.getPageType() === 8) {\r\n            fileNameRuleInput.value = '{p_title}/{id}';\r\n        }\r\n        else {\r\n            fileNameRuleInput.value = this.needSaveOpts.userSetName;\r\n        }\r\n        // 设置是否添加标记名称\r\n        this.restoreBoolean('tagNameToFileName');\r\n        // 设置是否始终建立文件夹\r\n        this.restoreBoolean('alwaysFolder');\r\n    }\r\n    // 处理 change 时直接保存 value 的输入框\r\n    saveValueOnChange(name) {\r\n        const el = ui.form[name];\r\n        el.addEventListener('change', () => {\r\n            this.saveSetting(name, el.value);\r\n        });\r\n    }\r\n    // 处理 click 时直接保存 checked 的复选框\r\n    saveCheckOnClick(name) {\r\n        const el = ui.form[name];\r\n        el.addEventListener('click', () => {\r\n            this.saveSetting(name, el.checked);\r\n        });\r\n    }\r\n    // 绑定选项的事件，主要是当选项变动时保存。\r\n    // 只可执行一次，否则事件会重复绑定\r\n    bindOptionEvent() {\r\n        const that = this;\r\n        // 保存是否显示选项区域\r\n        const showOptionsBtn = document.querySelector('.centerWrap_toogle_option');\r\n        showOptionsBtn.addEventListener('click', () => {\r\n            this.needSaveOpts.showOptions = !this.needSaveOpts.showOptions;\r\n            ui.toggleOptionArea(this.needSaveOpts.showOptions);\r\n            this.saveSetting('showOptions', this.needSaveOpts.showOptions);\r\n        });\r\n        // 保存多图作品设置\r\n        for (const input of ui.form.multipleImageWorks) {\r\n            input.addEventListener('click', function () {\r\n                that.saveSetting('multipleImageWorks', parseInt(this.value));\r\n            });\r\n        }\r\n        // 保存作品张数\r\n        this.saveValueOnChange('firstFewImages');\r\n        // 保存下载的作品类型\r\n        this.saveCheckOnClick('downType0');\r\n        this.saveCheckOnClick('downType1');\r\n        this.saveCheckOnClick('downType2');\r\n        // 保存动图格式选项\r\n        for (const input of ui.form.ugoiraSaveAs) {\r\n            input.addEventListener('click', function () {\r\n                that.saveSetting('ugoiraSaveAs', this.value);\r\n            });\r\n        }\r\n        // 保存投稿时间\r\n        this.saveCheckOnClick('postDate');\r\n        this.saveValueOnChange('postDateStart');\r\n        this.saveValueOnChange('postDateEnd');\r\n        // 保存必须的 tag设置\r\n        this.saveValueOnChange('needTag');\r\n        // 保存排除的 tag设置\r\n        this.saveValueOnChange('notNeedTag');\r\n        // 保存自动下载\r\n        this.saveCheckOnClick('quietDownload');\r\n        // 保存下载线程\r\n        this.saveValueOnChange('downloadThread');\r\n        ['change', 'focus'].forEach(ev => {\r\n            ui.form.userSetName.addEventListener(ev, function () {\r\n                that.saveSetting('userSetName', this.value);\r\n            });\r\n        });\r\n        // 保存是否添加标记名称\r\n        this.saveCheckOnClick('tagNameToFileName');\r\n        // 保存是否始终建立文件夹\r\n        this.saveCheckOnClick('alwaysFolder');\r\n    }\r\n    // 持久化保存设置\r\n    saveSetting(key, value) {\r\n        ;\r\n        this.needSaveOpts[key] = value;\r\n        localStorage.setItem(this.storeName, JSON.stringify(this.needSaveOpts));\r\n    }\r\n    // 重设选项\r\n    reset() {\r\n        // 将 needSaveOpts 恢复为默认值\r\n        this.needSaveOpts = this.needSaveOptsDefault;\r\n        // 覆写本地存储里的设置为默认值\r\n        localStorage.setItem(this.storeName, JSON.stringify(this.needSaveOpts));\r\n        // 使用默认值重设选项\r\n        this.restoreOption();\r\n    }\r\n}\r\nnew Option();\r\n","// 输出传递的文本\r\nimport { EVT } from './EVT';\r\nimport { lang } from './Lang';\r\nclass Output {\r\n    constructor() {\r\n        this.outputPanel = document.createElement('div'); // 输出面板\r\n        this.outputContent = document.createElement('div'); // 输出文本的容器元素\r\n        this.addOutPutPanel();\r\n        this.bindEvent();\r\n    }\r\n    // 添加输出面板\r\n    addOutPutPanel() {\r\n        const outputPanelHTML = `\n    <div class=\"outputWrap\">\n    <div class=\"outputClose\" title=\"${lang.transl('_关闭')}\">X</div>\n    <div class=\"outputTitle\">${lang.transl('_输出信息')}</div>\n    <div class=\"outputContent\"></div>\n    <div class=\"outputFooter\">\n    <div class=\"outputCopy\" title=\"\">${lang.transl('_复制')}</div>\n    </div>\n    </div>\n    `;\r\n        document.body.insertAdjacentHTML('beforeend', outputPanelHTML);\r\n        this.outputPanel = document.querySelector('.outputWrap');\r\n        this.outputContent = document.querySelector('.outputContent');\r\n    }\r\n    close() {\r\n        this.outputPanel.style.display = 'none';\r\n        this.outputContent.innerHTML = '';\r\n    }\r\n    bindEvent() {\r\n        // 关闭输出面板\r\n        document.querySelector('.outputClose').addEventListener('click', () => {\r\n            this.close();\r\n        });\r\n        window.addEventListener(EVT.events.hideCenterPanel, () => {\r\n            this.close();\r\n        });\r\n        // 复制输出内容\r\n        document.querySelector('.outputCopy').addEventListener('click', () => {\r\n            const range = document.createRange();\r\n            range.selectNodeContents(this.outputContent);\r\n            window.getSelection().removeAllRanges();\r\n            window.getSelection().addRange(range);\r\n            document.execCommand('copy');\r\n            // 改变提示文字\r\n            document.querySelector('.outputCopy').textContent = lang.transl('_已复制到剪贴板');\r\n            setTimeout(() => {\r\n                window.getSelection().removeAllRanges();\r\n                document.querySelector('.outputCopy').textContent = lang.transl('_复制');\r\n            }, 1000);\r\n        });\r\n        window.addEventListener(EVT.events.output, (ev) => {\r\n            this.output(ev.detail.data);\r\n        });\r\n    }\r\n    // 输出内容\r\n    output(text) {\r\n        if (text) {\r\n            this.outputContent.innerHTML = text;\r\n            this.outputPanel.style.display = 'block';\r\n        }\r\n    }\r\n}\r\nnew Output();\r\n","// 获取页面上的一些信息，用于文件名中\r\nimport { API } from './API';\r\nimport { DOM } from './DOM';\r\nimport { EVT } from './EVT';\r\nimport { store } from './Store';\r\nimport { pageType } from './PageType';\r\nclass PageInfo {\r\n    constructor() {\r\n        // 预设为 1 是为了指示这个标记有值，这样在获取到实际值之前，就可以把它插入到下拉框里。\r\n        this.pageTitle = '1';\r\n        this.pageUserName = '';\r\n        this.pageUserID = '';\r\n        this.pageTag = '';\r\n        this.getPageInfo(pageType.getPageType());\r\n        // 页面切换时获取新的页面信息\r\n        window.addEventListener(EVT.events.pageSwitch, () => {\r\n            this.getPageInfo(pageType.getPageType());\r\n        });\r\n    }\r\n    get getPageTag() {\r\n        return this.pageTag;\r\n    }\r\n    // 重置\r\n    // 切换页面时可能旧页面的一些标记在新页面没有了，所以要先重置\r\n    reset() {\r\n        this.pageUserName = '';\r\n        this.pageUserID = '';\r\n        this.pageTag = '';\r\n    }\r\n    // 储存信息\r\n    // 开始抓取时，把此时的页面信息保存到 store 里。这样即使下载时页面切换了，使用的刚开始抓取时的信息。\r\n    async store() {\r\n        await this.getPageInfo(pageType.getPageType());\r\n        store.pageInfo.pageUserName = this.pageUserName;\r\n        store.pageInfo.pageUserID = this.pageUserID;\r\n        store.pageInfo.pageTag = this.pageTag;\r\n    }\r\n    // 获取当前页面的一些信息，用于文件名中\r\n    async getPageInfo(type) {\r\n        this.reset();\r\n        // 设置用户信息\r\n        if (type === 1 || type === 2) {\r\n            // 只有 1 和 2 可以使用页面上的用户信息\r\n            let data = await API.getUserProfile(DOM.getUserId());\r\n            this.pageUserID = data.body.userId;\r\n            this.pageUserName = data.body.name;\r\n        }\r\n        // 获取当前页面的 tag\r\n        if (type === 5) {\r\n            // pathname 获取到的 tag 不需要再编码\r\n            this.pageTag = decodeURIComponent(location.pathname.split('tags/')[1].split('/')[0]);\r\n        }\r\n        else {\r\n            this.pageTag = decodeURIComponent(API.getURLField(window.location.href, 'tag'));\r\n        }\r\n        // 将可用选项添加到下拉选项里\r\n        this.initPageInfoSelector();\r\n    }\r\n    initPageInfoSelector() {\r\n        let optionHtml = '<option value=\"default\">…</option>';\r\n        const info = new Map([\r\n            ['p_title', this.pageTitle],\r\n            ['p_user', this.pageUserName],\r\n            ['p_uid', this.pageUserID],\r\n            ['p_tag', this.pageTag]\r\n        ]);\r\n        for (let [key, value] of info.entries()) {\r\n            if (value) {\r\n                optionHtml += `<option value=\"{${key}}\">{${key}}</option>`;\r\n            }\r\n        }\r\n        let target = document.getElementById('pageInfoSelect');\r\n        if (target) {\r\n            target.innerHTML = optionHtml;\r\n        }\r\n    }\r\n}\r\nconst pageInfo = new PageInfo();\r\nexport { pageInfo };\r\n","// 获取页面类型\r\nimport { EVT } from './EVT';\r\nclass PageType {\r\n    constructor() {\r\n        this.type = 0;\r\n        this.type = this.getPageType();\r\n        // 页面切换时检查新旧页面是否不同\r\n        window.addEventListener(EVT.events.pageSwitch, () => {\r\n            this.checkPageTypeIsNew();\r\n        });\r\n    }\r\n    // 判断页面类型\r\n    // 有些页面类型（如小说）虽然不支持，但它和支持的页面是无刷新切换的，所以视为支持的页面。等到开始抓取时再次判断是否可以抓取\r\n    getPageType() {\r\n        const url = window.location.href;\r\n        let type;\r\n        if (window.location.hostname === 'www.pixiv.net' &&\r\n            (window.location.pathname === '/' || window.location.pathname === '/en/')) {\r\n            type = 0;\r\n        }\r\n        else if ((url.includes('illust_id') || url.includes('/artworks/')) &&\r\n            !url.includes('mode=manga') &&\r\n            !url.includes('bookmark_detail') &&\r\n            !url.includes('bookmark_add') &&\r\n            !url.includes('response.php')) {\r\n            type = 1;\r\n        }\r\n        else if (!url.includes('mode=manga&illust_id') &&\r\n            (/member_illust\\.php\\?.*id=/.test(url) ||\r\n                url.includes('member.php?id=') ||\r\n                url.includes('bookmark.php'))) {\r\n            type = 2;\r\n        }\r\n        else if (url.includes('search.php?') ||\r\n            url.includes('tags.php?') ||\r\n            url.includes('/tags/')) {\r\n            type = 5;\r\n        }\r\n        else if (url.includes('ranking_area.php') &&\r\n            url !== 'https://www.pixiv.net/ranking_area.php') {\r\n            type = 6;\r\n        }\r\n        else if (window.location.pathname === '/ranking.php') {\r\n            type = 7;\r\n        }\r\n        else if (url.includes('https://www.pixivision.net') &&\r\n            url.includes('/a/')) {\r\n            type = 8;\r\n        }\r\n        else if (url.includes('/bookmark_add.php?id=') ||\r\n            url.includes('/bookmark_detail.php?illust_id=')) {\r\n            type = 9;\r\n        }\r\n        else if (url.includes('/bookmark_new_illust.php') ||\r\n            url.includes('/bookmark_new_illust_r18.php')) {\r\n            type = 10;\r\n        }\r\n        else if (window.location.pathname === '/discovery') {\r\n            type = 11;\r\n        }\r\n        else if (url.includes('/new_illust.php') ||\r\n            url.includes('/new_illust_r18.php')) {\r\n            type = 12;\r\n        }\r\n        else {\r\n            // 没有匹配到可用的页面类型\r\n            throw new Error('Page type matching failed');\r\n        }\r\n        return type;\r\n    }\r\n    // 检查是不是进入到了新的页面类型\r\n    checkPageTypeIsNew() {\r\n        let newType = this.getPageType();\r\n        if (this.type !== newType) {\r\n            EVT.fire(EVT.events.pageTypeChange, newType);\r\n        }\r\n        // 保存当前页面类型\r\n        this.type = newType;\r\n    }\r\n}\r\nconst pageType = new PageType();\r\nexport { pageType };\r\n","// 快速收藏\r\nimport { API } from './API';\r\nimport { lang } from './Lang';\r\nclass QuickBookmark {\r\n    constructor() {\r\n        this.quickBookmarkEl = document.createElement('a'); // 快速收藏的元素\r\n        this.quickBookmark();\r\n    }\r\n    // 快速收藏\r\n    quickBookmark() {\r\n        // 因为切换作品（pushstate）时，不能准确的知道 toolbar 何时更新，而且获取 token 也可能需要时间，所以只能不断检测\r\n        setTimeout(() => {\r\n            this.quickBookmark();\r\n        }, 300);\r\n        // 如果获取不到 token，则不展开快速收藏功能\r\n        if (!API.getToken()) {\r\n            return;\r\n        }\r\n        // 因为 p 站改版 class 经常变，所以从父元素查找，父元素的 class 变化没那么频繁\r\n        const toolbarParent = document.querySelectorAll('main > section');\r\n        let toolbar; // 作品下方的工具栏\r\n        for (const el of toolbarParent) {\r\n            const test = el.querySelector('div>section');\r\n            if (test) {\r\n                toolbar = test;\r\n                break;\r\n            }\r\n        }\r\n        if (toolbar) {\r\n            this.quickBookmarkEl = document.querySelector('#quickBookmarkEl');\r\n            // 如果没有 quick 元素则添加\r\n            if (!this.quickBookmarkEl) {\r\n                // 创建快速收藏元素\r\n                this.quickBookmarkEl = document.createElement('a');\r\n                this.quickBookmarkEl.id = 'quickBookmarkEl';\r\n                this.quickBookmarkEl.textContent = '✩';\r\n                this.quickBookmarkEl.href = 'javascript:void(0)';\r\n                this.quickBookmarkEl.title = lang.transl('_快速收藏');\r\n                toolbar.insertBefore(this.quickBookmarkEl, toolbar.childNodes[3]);\r\n                // 隐藏原来的收藏按钮并检测收藏状态\r\n                const orgIcon = toolbar.childNodes[2];\r\n                if (!orgIcon) {\r\n                    // 当用户处于自己作品的页面时，是没有收藏按钮的，停止执行\r\n                    return;\r\n                }\r\n                else {\r\n                    orgIcon.style.display = 'none';\r\n                }\r\n                const heart = orgIcon.querySelector('svg');\r\n                if (window.getComputedStyle(heart)['fill'] === 'rgb(255, 64, 96)') {\r\n                    // 如果已经收藏过了\r\n                    this.quickBookmarkEnd();\r\n                }\r\n                else {\r\n                    // 准备快速收藏\r\n                    this.readyQuickBookmark();\r\n                }\r\n            }\r\n            else {\r\n                // 如果有 quick 元素，什么都不做\r\n                return;\r\n            }\r\n        }\r\n    }\r\n    // 准备快速收藏\r\n    readyQuickBookmark() {\r\n        this.quickBookmarkEl.addEventListener('click', () => {\r\n            ;\r\n            document.querySelector('._35vRH4a').click(); // 自动点赞\r\n            // 储存 tag\r\n            const tagElements = document.querySelectorAll('._1LEXQ_3 li');\r\n            const tagArray = Array.from(tagElements).map(el => {\r\n                const nowA = el.querySelector('a');\r\n                if (nowA) {\r\n                    let nowTag = nowA.textContent;\r\n                    // 对于原创作品，非日文的页面上只显示了用户语言的“原创”，替换成日文 tag “オリジナル”。\r\n                    if (nowTag === '原创' || nowTag === 'Original' || nowTag === '창작') {\r\n                        nowTag = 'オリジナル';\r\n                    }\r\n                    return nowTag;\r\n                }\r\n            });\r\n            const tagString = encodeURI(tagArray.join(' '));\r\n            // 调用添加收藏的 api\r\n            API.addBookmark(API.getIllustId(), tagString, API.getToken(), false)\r\n                .then(response => response.json())\r\n                .then(data => {\r\n                if (data.error !== undefined && data.error === false) {\r\n                    this.quickBookmarkEnd();\r\n                }\r\n            });\r\n        });\r\n    }\r\n    // 如果这个作品已收藏，则改变样式\r\n    quickBookmarkEnd() {\r\n        this.quickBookmarkEl.style.color = '#FF4060';\r\n        this.quickBookmarkEl.href = `/bookmark_add.php?type=illust&illust_id=${API.getIllustId()}`;\r\n    }\r\n}\r\nexport { QuickBookmark };\r\n","// 仓库\r\nimport { EVT } from './EVT';\r\n// 存储抓取结果和状态\r\nclass Store {\r\n    constructor() {\r\n        this.resultMeta = []; // 储存抓取结果的元数据。它可以根据每个作品需要下载多少张，生成每一张图片的信息\r\n        this.result = []; // 储存抓取结果\r\n        this.idList = []; // 储存从列表中抓取到的作品的 id\r\n        this.rankList = {}; // 储存作品在排行榜中的排名\r\n        // 储存和下载有关的状态\r\n        this.states = {\r\n            allowWork: true,\r\n            quickDownload: false,\r\n            notAutoDownload: false // 抓取完成后，不自动开始下载\r\n        };\r\n        // 储存页面信息，用来生成文件名\r\n        this.pageInfo = {\r\n            pageUserName: '',\r\n            pageUserID: '',\r\n            pageTag: ''\r\n        };\r\n        const allowWorkTrue = [\r\n            EVT.events.crawlFinish,\r\n            EVT.events.crawlEmpty,\r\n            EVT.events.crawlError,\r\n            EVT.events.downloadPause,\r\n            EVT.events.downloadStop\r\n        ];\r\n        allowWorkTrue.forEach(type => {\r\n            window.addEventListener(type, () => {\r\n                this.states.allowWork = true;\r\n            });\r\n        });\r\n        const allowWorkFalse = [EVT.events.crawlStart, EVT.events.downloadStart];\r\n        allowWorkFalse.forEach(type => {\r\n            window.addEventListener(type, () => {\r\n                this.states.allowWork = false;\r\n            });\r\n        });\r\n        window.addEventListener(EVT.events.crawlStart, () => {\r\n            this.resetResult();\r\n        });\r\n        window.addEventListener(EVT.events.downloadComplete, () => {\r\n            this.resetStates();\r\n        });\r\n    }\r\n    /*\r\n     id - 其实是默认名，包含两部分：id + 序号，如 44920385_p0。动图只有 id 没有序号\r\n     url - 图片大图的 url\r\n     title - 作品的标题\r\n     tags - 作品的 tag 列表\r\n     tagsTranslated - 作品的 tag 列表，附带翻译后的 tag（如果有）\r\n     user - 作品的画师名字\r\n     userid - 作品的画师id\r\n     fullWidth - 第一张图片的宽度\r\n     fullHeight - 第一张图片的高度\r\n     ext - 图片下载时使用的后缀名\r\n     bmk - 作品的收藏数量\r\n     date - 作品的创建日期，格式为 yyyy-MM-dd。如 2019-08-29\r\n     type - 作品的类型，分为 illustration、manga、ugoira\r\n     rank - 作品在排行榜中的排名\r\n     ugoiraInfo - 当作品是动图时才有值，包含 frames（数组）和 mimeType（string）属性\r\n     */\r\n    assignResult(data) {\r\n        // 图片详细信息的默认值\r\n        const dataDefault = {\r\n            idNum: 0,\r\n            id: '',\r\n            url: '',\r\n            thumb: '',\r\n            title: '',\r\n            pageCount: 1,\r\n            tags: [],\r\n            tagsTranslated: [],\r\n            user: '',\r\n            userid: '',\r\n            fullWidth: 0,\r\n            fullHeight: 0,\r\n            ext: '',\r\n            bmk: 0,\r\n            bookmarked: false,\r\n            date: '',\r\n            type: 0,\r\n            rank: '',\r\n            ugoiraInfo: null\r\n        };\r\n        return Object.assign(dataDefault, data);\r\n    }\r\n    // 添加每个图片的信息。只需要传递有值的属性\r\n    addResult(data, pNo = 1) {\r\n        // 添加元数据\r\n        const result = this.assignResult(data);\r\n        this.resultMeta.push(result);\r\n        EVT.fire(EVT.events.addResult, result);\r\n        // 添加每一张图片的数据\r\n        for (let i = 0; i < pNo; i++) {\r\n            const result = this.assignResult(data);\r\n            result.id = result.id + `_p${i}`;\r\n            result.url = result.url.replace('p0', 'p' + i);\r\n            this.result.push(result);\r\n        }\r\n    }\r\n    getRankList(index) {\r\n        return this.rankList[index];\r\n    }\r\n    setRankList(id, rank) {\r\n        this.rankList[id] = rank;\r\n    }\r\n    resetResult() {\r\n        this.resultMeta = [];\r\n        this.result = [];\r\n        this.idList = [];\r\n        this.rankList = {};\r\n    }\r\n    resetStates() {\r\n        this.states.allowWork = true;\r\n        this.states.quickDownload = false;\r\n        this.states.notAutoDownload = false;\r\n    }\r\n}\r\nconst store = new Store();\r\nexport { store };\r\n","import { lang } from './Lang';\r\nimport { EVT } from './EVT';\r\nimport { API } from './API';\r\n// 辅助功能\r\nclass Support {\r\n    constructor() {\r\n        this.newTag = '_xzNew350';\r\n        this.checkConflict();\r\n        this.supportListenHistory();\r\n        this.listenPageSwitch();\r\n        this.checkNew();\r\n        this.showNew();\r\n        API.updateToken();\r\n    }\r\n    // 处理和脚本版的冲突\r\n    checkConflict() {\r\n        // 标注自己\r\n        window.sessionStorage.setItem('xz_pixiv_extension', '1');\r\n        // 把脚本版的标记设置为 0，这样脚本版就不会运行\r\n        window.sessionStorage.setItem('xz_pixiv_userscript', '0');\r\n    }\r\n    // 检查新版本\r\n    async checkNew() {\r\n        // 显示更新按钮\r\n        const show = function () {\r\n            const updateIco = document.querySelector('.centerWrap_top_btn.update');\r\n            updateIco.style.display = 'inline-block';\r\n        };\r\n        // 读取上一次检查的时间，如果超过一小时则检查 GitHub 上的信息\r\n        const lastTime = localStorage.getItem('xzUpdateTime');\r\n        if (!lastTime ||\r\n            new Date().getTime() - parseInt(lastTime) > 60 * 60 * 1000) {\r\n            // 获取最新的 releases 信息\r\n            const latest = await fetch('https://api.github.com/repos/xuejianxianzun/PixivBatchDownloader/releases/latest');\r\n            const latestJson = await latest.json();\r\n            const latestVer = latestJson.name;\r\n            // 保存 GitHub 上的版本信息\r\n            localStorage.setItem('xzGithubVer', latestVer);\r\n            // 保存本次检查的时间戳\r\n            localStorage.setItem('xzUpdateTime', new Date().getTime().toString());\r\n        }\r\n        // 获取本地扩展的版本号\r\n        const manifest = await fetch(chrome.extension.getURL('manifest.json'));\r\n        const manifestJson = await manifest.json();\r\n        const manifestVer = manifestJson.version;\r\n        // 比较大小\r\n        const latestVer = localStorage.getItem('xzGithubVer');\r\n        if (latestVer && manifestVer < latestVer) {\r\n            show();\r\n        }\r\n    }\r\n    // 显示最近更新内容\r\n    showNew() {\r\n        if (window.location.host.includes('pixiv.net') &&\r\n            !localStorage.getItem(this.newTag)) {\r\n            const whatIsNewHtml = `\n      <div class=\"xz_new\">\n        <p class=\"title\">Powerful Pixiv Downloader ${lang.transl('_最近更新')}</p>\n        <p class=\"content\">${lang.transl(this.newTag)}</p>\n        <button class=\"btn\">${lang.transl('_确定')}</button>\n      </div>`;\r\n            document.body.insertAdjacentHTML('afterbegin', whatIsNewHtml);\r\n            const whatIsNewEl = document.querySelector('.xz_new');\r\n            whatIsNewEl.querySelector('.btn').addEventListener('click', () => {\r\n                localStorage.setItem(this.newTag, '1');\r\n                whatIsNewEl.parentNode.removeChild(whatIsNewEl);\r\n            });\r\n        }\r\n    }\r\n    // 使用无刷新加载的页面需要监听 url 的改变，这里为这些事件添加监听支持\r\n    supportListenHistory() {\r\n        const element = document.createElement('script');\r\n        element.setAttribute('type', 'text/javascript');\r\n        element.innerHTML = `\n    let _wr = function (type) {\n      let orig = history[type];\n      return function () {\n        let rv = orig.apply(this, arguments);\n        let e = new Event(type);\n        e.arguments = arguments;\n        window.dispatchEvent(e);\n        return rv;\n      };\n    };\n    history.pushState = _wr('pushState');\n    history.replaceState = _wr('replaceState');\n    `;\r\n        document.head.appendChild(element);\r\n    }\r\n    // 监听页面的无刷新切换。某些页面可以无刷新切换，这时需要进行一些处理\r\n    listenPageSwitch() {\r\n        // 绑定无刷新切换页面的事件，只绑定一次\r\n        // pixiv 的后退使用 replaceState\r\n        // pushState 判断从列表页进入作品页的情况，popstate 判断从作品页退回列表页的情况\r\n        ;\r\n        ['pushState', 'popstate', 'replaceState'].forEach(item => {\r\n            window.addEventListener(item, () => {\r\n                EVT.fire(EVT.events.pageSwitch);\r\n            });\r\n        });\r\n    }\r\n}\r\nnew Support();\r\n","// 在标题栏上显示下载器工作状态\r\nimport { pageType } from './PageType';\r\nclass TitleBar {\r\n    constructor() {\r\n        this.titleTimer = 0; // 修改 title 的定时器\r\n    }\r\n    // 检查标题里有没有本程序定义的状态字符\r\n    titleHasState(status = '') {\r\n        const titleStatus = ['[↑]', '[→]', '[▶]', '[↓]', '[║]', '[■]', '[√]', '[ ]'];\r\n        if (!status) {\r\n            // 没有传递 status，则检查所有标记\r\n            for (const str of titleStatus) {\r\n                if (document.title.includes(str)) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            // 检查指定标记\r\n            return document.title.includes(status);\r\n        }\r\n        return false;\r\n    }\r\n    // 重设 title\r\n    reset() {\r\n        const type = pageType.getPageType();\r\n        clearInterval(this.titleTimer);\r\n        // 储存标题的 mete 元素。在某些页面不存在，有时也与实际上的标题不一致。\r\n        const ogTitle = document.querySelector('meta[property=\"og:title\"]');\r\n        // 无刷新自动加载的页面里，og:title 标签是最早更新标题的，内容也一致。\r\n        if (ogTitle && (type == 1 || type === 2)) {\r\n            document.title = ogTitle.content;\r\n        }\r\n        else {\r\n            // 如果当前 title 里有状态提醒，则设置为状态后面的文字\r\n            if (this.titleHasState()) {\r\n                const index = document.title.indexOf(']');\r\n                document.title = document.title.substr(index + 1, document.title.length);\r\n            }\r\n        }\r\n    }\r\n    // 修改title\r\n    changeTitle(string) {\r\n        // 本程序的状态会以 [string] 形式添加到 title 最前面，并闪烁提醒\r\n        /*\r\n      ↑ 抓取中\r\n      → 等待下一步操作（tag搜索页）\r\n      ▶  准备下载\r\n      ↓ 下载中\r\n      ║ 下载暂停\r\n      ■ 下载停止\r\n      √ 下载完毕\r\n      */\r\n        const state = `[${string}]`;\r\n        // 如果 title 里没有状态，就添加状态\r\n        if (!this.titleHasState()) {\r\n            document.title = `${state} ${document.title}`;\r\n        }\r\n        else {\r\n            // 如果已经有状态了，则替换为新当前传入的状态\r\n            document.title = document.title.replace(/\\[.?\\]/, state);\r\n        }\r\n        // 当需要执行下一步操作时，闪烁提醒\r\n        if (string === '▶' || string === '→') {\r\n            this.titleTimer = window.setInterval(() => {\r\n                if (this.titleHasState(state)) {\r\n                    document.title = document.title.replace(state, '[ ]');\r\n                }\r\n                else {\r\n                    document.title = document.title.replace('[ ]', state);\r\n                }\r\n            }, 500);\r\n        }\r\n        else {\r\n            clearInterval(this.titleTimer);\r\n        }\r\n    }\r\n}\r\nconst titleBar = new TitleBar();\r\nexport { titleBar };\r\n","// 用户界面\r\nimport { lang } from './Lang';\r\nimport { EVT } from './EVT';\r\nimport { Colors } from './Colors';\r\nimport { DOM } from './DOM';\r\n// 提供中间面板和右侧下载按钮\r\nclass UI {\r\n    constructor() {\r\n        this.tipEl = document.createElement('div'); // tip 元素\r\n        this.rightBtn = document.createElement('div'); // 右侧按钮\r\n        this.centerPanel = document.createElement('div'); // 中间面板\r\n        this.reserveArea = document.createElement('div'); // 下载区域容器\r\n        this.centerBtnWrap = document.createElement('div'); // 中间添加按钮的区域\r\n        // 创建 UI\r\n        this.addUI();\r\n    }\r\n    // 向预留区域追加元素\r\n    insertHTML(html) {\r\n        this.reserveArea.insertAdjacentHTML('beforeend', html);\r\n    }\r\n    // 添加右侧下载按钮\r\n    addRightButton() {\r\n        this.rightBtn = document.createElement('div');\r\n        this.rightBtn.textContent = '↓';\r\n        this.rightBtn.id = 'rightButton';\r\n        document.body.appendChild(this.rightBtn); // 绑定切换右侧按钮显示的事件\r\n        this.rightBtn.addEventListener('click', () => {\r\n            this.showCenterPanel();\r\n        }, false);\r\n    }\r\n    // 显示中间面板上的提示。参数 arg 指示鼠标是移入还是移出，并包含鼠标位置\r\n    showTip(text, arg) {\r\n        if (!text) {\r\n            throw new Error('No tip text.');\r\n        }\r\n        if (arg.type === 1) {\r\n            this.tipEl.innerHTML = text;\r\n            this.tipEl.style.left = arg.x + 30 + 'px';\r\n            this.tipEl.style.top = arg.y - 30 + 'px';\r\n            this.tipEl.style.display = 'block';\r\n        }\r\n        else if (arg.type === 0) {\r\n            this.tipEl.style.display = 'none';\r\n        }\r\n    }\r\n    // 添加中间面板\r\n    addCenterPanel() {\r\n        const centerPanelHTML = `\r\n      <div class=\"centerWrap\">\r\n      <div class=\"centerWrap_head\">\r\n      <span class=\"centerWrap_title blue\"> ${lang.transl('_下载设置')}</span>\r\n      <div class=\"btns\">\r\n      <a class=\"has_tip centerWrap_top_btn update\" data-tip=\"${lang.transl('_newver')}\" href=\"https://github.com/xuejianxianzun/PixivBatchDownloader/releases/latest\" target=\"_blank\">\r\n      <svg t=\"1574401457339\" class=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"4736\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"16\" height=\"16\"><defs><style type=\"text/css\"></style></defs><path d=\"M894.72 795.477333l-85.418667-85.418667c0.128-0.170667 0.170667-0.341333 0.298667-0.512l-158.890667-158.890667c0.042667-0.597333 37.248-37.248 37.248-37.248l178.773333 0 1.706667-1.493333c-0.853333-196.736-160.426667-356.053333-357.418667-356.053333-72.704 0-140.202667 22.016-196.650667 59.306667L228.949333 129.664C307.968 71.466667 405.333333 36.650667 511.018667 36.650667c263.296 0 476.757333 213.461333 476.757333 476.714667C987.776 619.093333 952.96 716.416 894.72 795.477333zM369.493333 476.117333c-0.042667 0.597333-37.248 37.248-37.248 37.248l-178.773333 0c0 197.461333 160.085333 357.546667 357.546667 357.546667 72.192 0 139.093333-21.76 195.285333-58.538667l85.589333 85.589333c-78.848 57.685333-175.701333 92.117333-280.874667 92.117333-263.296 0-476.757333-213.461333-476.757333-476.757333 0-105.173333 34.474667-202.069333 92.16-280.874667l85.589333 85.589333C211.925333 318.208 211.882667 318.336 211.797333 318.464L369.493333 476.117333z\" p-id=\"4737\"></path></svg>\r\n      </a>\r\n      <a class=\"has_tip centerWrap_top_btn wiki_url\" data-tip=\"${lang.transl('_wiki')}\" href=\"https://github.com/xuejianxianzun/PixivBatchDownloader/wiki\" target=\"_blank\">\r\n      <svg t=\"1574400169015\" class=\"icon\" widht=\"16\" height=\"16\" viewBox=\"0 0 1088 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"1872\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"17\" height=\"16\"><defs><style type=\"text/css\"></style></defs><path d=\"M1044.286732 3.51978A1138.616836 1138.616836 0 0 0 618.841322 58.172364a198.963565 198.963565 0 0 0-26.814324 10.815324V1023.936004l0.895944-0.383976a979.52278 979.52278 0 0 1 443.236298-68.411724 47.741016 47.741016 0 0 0 51.580776-43.261296V50.172864a47.165052 47.165052 0 0 0-43.453284-46.653084z m-74.299356 632.15249h-224.369977V541.470158h224.369977v94.202112z m0-231.921504h-224.369977V309.484657h224.369977v94.266109zM469.154678 58.172364A1138.296856 1138.296856 0 0 0 43.645272 3.455784 47.421036 47.421036 0 0 0 0 50.172864V908.103244a46.653084 46.653084 0 0 0 15.35904 34.493844 48.060996 48.060996 0 0 0 36.285732 12.415224 980.610712 980.610712 0 0 1 443.300294 68.347728l0.895944 0.575964V68.7957a202.099369 202.099369 0 0 0-26.686332-10.751328zM351.146053 635.800262H126.776076V541.59815h224.369977v94.202112z m0-231.921504H126.776076V309.612649h224.369977v94.266109z\" p-id=\"1873\"></path></svg>\r\n      </a>\r\n      <a class=\"has_tip centerWrap_top_btn\" data-tip=\"${lang.transl('_github')}\" href=\"https://github.com/xuejianxianzun/PixivBatchDownloader\" target=\"_blank\">\r\n      <svg t=\"1574401005111\" class=\"icon\" widht=\"16\" height=\"16\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"2594\" xmlns:xlink=\"http://www.w3.org/1999/xlink><defs><style type=\"text/css\"></style></defs><path d=\"M0 520.886c0-69.368 13.51-135.697 40.498-199.02 26.987-63.323 63.322-117.826 109.006-163.51 45.65-45.65 100.154-81.985 163.51-109.006A502.289 502.289 0 0 1 512 8.92c69.335 0 135.663 13.477 198.986 40.497 63.356 26.988 117.86 63.323 163.51 109.007 45.684 45.65 82.02 100.154 109.006 163.51A502.289 502.289 0 0 1 1024 520.852c0 111.318-32.504 211.472-97.511 300.494-64.975 88.989-148.48 150.825-250.484 185.476-5.351 0-9.348-0.99-11.99-2.973-2.676-1.982-4.196-3.997-4.526-6.012a59.458 59.458 0 0 1-0.495-8.984 7.663 7.663 0 0 1-0.991-3.006v-128.99c0-40.63-14.336-75.314-43.008-103.986 76.667-13.345 134.011-41.819 171.999-85.487 37.987-43.669 57.013-96.52 57.013-158.522 0-58.005-18.663-108.346-56.022-150.99 13.345-42.678 11-87.668-6.97-135.003-18.697-1.322-39.011 1.85-61.01 9.513-22 7.663-38.318 14.831-49.02 21.47-10.637 6.673-20.316 13.016-28.97 19.027-38.68-10.669-81.854-16.02-129.486-16.02-47.7 0-90.509 5.351-128.529 16.02-7.333-5.35-15.855-11.164-25.5-17.507-9.68-6.342-26.493-14.005-50.507-22.99-23.982-9.018-45.65-12.85-65.008-11.495-18.663 47.996-20.645 93.646-5.979 136.984-36.665 42.678-54.998 92.986-54.998 150.99 0 62.002 18.663 114.689 55.99 157.994 37.326 43.339 94.67 72.01 171.998 86.016a142.303 142.303 0 0 0-39.969 70.029c-56.683 13.972-96.355 3.963-119.015-30.06-42.017-61.308-79.674-83.307-113.003-65.965-4.69 4.657-3.997 9.48 1.982 14.501 6.012 4.988 14.996 11.66 27.02 19.985 11.99 8.357 20.976 17.507 26.987 27.515 0.661 1.322 2.51 6.177 5.517 14.502a831.917 831.917 0 0 0 8.985 23.981c2.973 7.663 8.654 16.186 17.011 25.5 8.324 9.349 18.003 17.178 29.003 23.52 11 6.309 26.161 11 45.485 14.006 19.324 2.972 41.323 3.138 65.998 0.495v100.484c0 0.991-0.165 2.643-0.495 5.021-0.33 2.312-0.991 3.964-1.982 4.955-0.991 1.024-2.345 2.015-4.03 3.039a12.52 12.52 0 0 1-6.474 1.486c-2.676 0-6.012-0.33-10.009-0.99-101.343-35.345-183.825-97.182-247.51-185.51C31.842 731.037 0 631.577 0 520.92z\" p-id=\"2595\"></path></svg>\r\n      </a>\r\n        <div class=\"has_tip centerWrap_top_btn centerWrap_toogle_option\" data-tip=\"${lang.transl('_收起展开设置项')}\">▲</div>\r\n        <div class=\"has_tip centerWrap_top_btn centerWrap_close\" data-tip=\"${lang.transl('_快捷键切换显示隐藏')}\">\r\n        <svg t=\"1574392276519\" class=\"icon\" viewBox=\"0 0 1024 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" p-id=\"1123\" data-spm-anchor-id=\"a313x.7781069.0.i0\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"14\" height=\"14\"><defs><style type=\"text/css\"></style></defs><path d=\"M521.693867 449.297067L111.4112 39.0144a51.2 51.2 0 1 0-72.430933 72.362667l410.282666 410.3168-410.282666 410.3168a51.2 51.2 0 1 0 72.3968 72.3968l410.3168-410.282667 410.3168 410.282667a51.2 51.2 0 1 0 72.3968-72.362667l-410.282667-410.350933 410.282667-410.282667a51.2 51.2 0 1 0-72.3968-72.3968l-410.282667 410.282667z\" p-id=\"1124\"></path></svg>\r\n        </div>\r\n      </div>\r\n      </div>\r\n      <div class=\"centerWrap_con\">\r\n      <form class=\"settingForm\">\r\n      <div class=\"option_area1\">\r\n      <p class=\"formOption1\">\r\n      <span class=\"setWantPageWrap\">\r\n      <span class=\"has_tip settingNameStyle1 setWantPageTip1\" data-tip=\"${lang.transl('_页数')}\" style=\"margin-right: 0px;\">${lang.transl('_页数')}</span><span class=\"gray1\" style=\"margin-right: 10px;\"> ? </span>\r\n      <input type=\"text\" name=\"setWantPage\" class=\"setinput_style1 blue setWantPage\"\r\n      value = '-1'\r\n      >\r\n      &nbsp;&nbsp;&nbsp;\r\n      <span class=\"setWantPageTip2 gray1\">-1 或者大于 0 的数字</span>\r\n      </span>\r\n      </p>\r\n      <p class=\"formOption5\">\r\n      <span class=\"has_tip settingNameStyle1\" data-tip=\"${lang.transl('_下载作品类型的提示Center')}\">${lang.transl('_下载作品类型')}<span class=\"gray1\"> ? </span></span>\r\n      <label for=\"setWorkType0\"><input type=\"checkbox\" name=\"downType0\" id=\"setWorkType0\" checked> ${lang.transl('_插画')}&nbsp;</label>\r\n      <label for=\"setWorkType1\"><input type=\"checkbox\" name=\"downType1\" id=\"setWorkType1\" checked> ${lang.transl('_漫画')}&nbsp;</label>\r\n      <label for=\"setWorkType2\"><input type=\"checkbox\" name=\"downType2\" id=\"setWorkType2\" checked> ${lang.transl('_动图')}&nbsp;</label>\r\n      </p>\r\n      <p class=\"formOption3\">\r\n      <span class=\"has_tip settingNameStyle1\" data-tip=\"${lang.transl('_怎样下载多图作品')}\">${lang.transl('_多图作品设置')}<span class=\"gray1\"> ? </span></span>\r\n      <label for=\"multipleImageWorks1\"><input type=\"radio\" name=\"multipleImageWorks\" id=\"multipleImageWorks1\" value=\"0\"> ${lang.transl('_全部下载')}&nbsp; </label>\r\n      <label for=\"multipleImageWorks2\"><input type=\"radio\" name=\"multipleImageWorks\" id=\"multipleImageWorks2\" value=\"-1\"> ${lang.transl('_不下载')}&nbsp; </label>\r\n      <label for=\"multipleImageWorks3\"><input type=\"radio\" name=\"multipleImageWorks\" id=\"multipleImageWorks3\" value=\"1\"> ${lang.transl('_下载前几张图片')}&nbsp; </label>\r\n      <input type=\"text\" name=\"firstFewImages\" class=\"setinput_style1 blue\" value=\"1\">\r\n      </p>\r\n      <p class=\"formOption12\">\r\n      <span class=\"has_tip settingNameStyle1\" data-tip=\"${lang.transl('_动图保存格式title')}\">${lang.transl('_动图保存格式')}<span class=\"gray1\"> ? </span></span>\r\n      <label for=\"ugoiraSaveAs1\"><input type=\"radio\" name=\"ugoiraSaveAs\" id=\"ugoiraSaveAs1\" value=\"webm\" checked> ${lang.transl('_webmVideo')} &nbsp;</label>\r\n      <label for=\"ugoiraSaveAs3\"><input type=\"radio\" name=\"ugoiraSaveAs\" id=\"ugoiraSaveAs3\" value=\"gif\"> ${lang.transl('_gif')} &nbsp;</label>\r\n      <label for=\"ugoiraSaveAs2\"><input type=\"radio\" name=\"ugoiraSaveAs\" id=\"ugoiraSaveAs2\" value=\"zip\"> ${lang.transl('_zipFile')} &nbsp;</label>\r\n      </p>\r\n      <p class=\"formOption2\">\r\n      <span class=\"has_tip settingNameStyle1\" data-tip=\"${lang.transl('_筛选收藏数的提示Center')}\">${lang.transl('_筛选收藏数Center')}<span class=\"gray1\"> ? </span></span>\r\n      <input type=\"text\" name=\"setFavNum\" class=\"setinput_style1 blue\" value=\"0\">&nbsp;&nbsp;&nbsp;&nbsp;\r\n      </p>\r\n      <p class=\"formOption11\">\r\n      <span class=\"has_tip settingNameStyle1\" data-tip=\"${lang.transl('_只下载已收藏的提示')}\">${lang.transl('_只下载已收藏')}<span class=\"gray1\"> ? </span></span>\r\n      <label for=\"setOnlyBmk\"><input type=\"checkbox\" name=\"setOnlyBmk\" id=\"setOnlyBmk\"> ${lang.transl('_启用')}</label>\r\n      </p>\r\n      <p class=\"formOption4\">\r\n      <span class=\"has_tip settingNameStyle1\" data-tip=\"${lang.transl('_筛选宽高的按钮Title')} ${lang.transl('_筛选宽高的提示文字')}\">${lang.transl('_筛选宽高的按钮文字')}<span class=\"gray1\"> ? </span></span>\r\n      <input type=\"text\" name=\"setWidth\" class=\"setinput_style1 blue\" value=\"0\">\r\n      <input type=\"radio\" name=\"setWidthAndOr\" id=\"setWidth_AndOr1\" value=\"&\" checked> <label for=\"setWidth_AndOr1\">and&nbsp;</label>\r\n      <input type=\"radio\" name=\"setWidthAndOr\" id=\"setWidth_AndOr2\" value=\"|\"> <label for=\"setWidth_AndOr2\">or&nbsp;</label>\r\n      <input type=\"text\" name=\"setHeight\" class=\"setinput_style1 blue\" value=\"0\">\r\n      </p>\r\n      <p class=\"formOption13\">\r\n      <span class=\"has_tip settingNameStyle1\" data-tip=\"${lang.transl('_设置宽高比例Title')}\">${lang.transl('_设置宽高比例')}<span class=\"gray1\"> ? </span></span>\r\n      <label for=\"ratio0\"><input type=\"radio\" name=\"ratio\" id=\"ratio0\" value=\"0\" checked>  ${lang.transl('_不限制')}&nbsp; </label>\r\n      <label for=\"ratio1\"><input type=\"radio\" name=\"ratio\" id=\"ratio1\" value=\"1\">  ${lang.transl('_横图')}&nbsp; </label>\r\n      <label for=\"ratio2\"><input type=\"radio\" name=\"ratio\" id=\"ratio2\" value=\"2\">  ${lang.transl('_竖图')}&nbsp; </label>\r\n      <label for=\"ratio3\"><input type=\"radio\" name=\"ratio\" id=\"ratio3\" value=\"3\">  ${lang.transl('_输入宽高比')}</label>\r\n      <input type=\"text\" name=\"userRatio\" class=\"setinput_style1 blue\" value=\"1.4\">\r\n      </p>\r\n      <p class=\"formOption15\">\r\n      <span class=\"has_tip settingNameStyle1\" data-tip=\"${lang.transl('_设置id范围提示')}\">${lang.transl('_设置id范围')} <span class=\"gray1\"> ? </span></span>\r\n      <label for=\"idRange0\"><input type=\"radio\" name=\"idRange\" id=\"idRange0\" value=\"0\" checked>  ${lang.transl('_不限制')}&nbsp; </label>\r\n      <label for=\"idRange1\"><input type=\"radio\" name=\"idRange\" id=\"idRange1\" value=\"1\">  ${lang.transl('_大于')}&nbsp; </label>\r\n      <label for=\"idRange2\"><input type=\"radio\" name=\"idRange\" id=\"idRange2\" value=\"2\">  ${lang.transl('_小于')}&nbsp; </label>\r\n      <input type=\"text\" name=\"idRangeInput\" class=\"setinput_style1 w100 blue\" value=\"\">\r\n      </p>\r\n      <p class=\"formOption16\">\r\n      <span class=\"has_tip settingNameStyle1\" data-tip=\"${lang.transl('_设置投稿时间提示')}\">${lang.transl('_设置投稿时间')} <span class=\"gray1\"> ? </span></span>\r\n      <label for=\"setPostDate\"><input type=\"checkbox\" name=\"postDate\" id=\"setPostDate\"> ${lang.transl('_启用')}</label>\r\n      <input type=\"datetime-local\" name=\"postDateStart\" placeholder=\"yyyy-MM-dd HH:mm\" class=\"setinput_style1 postDate blue\" value=\"\">\r\n      &nbsp;-&nbsp;\r\n      <input type=\"datetime-local\" name=\"postDateEnd\" placeholder=\"yyyy-MM-dd HH:mm\" class=\"setinput_style1 postDate blue\" value=\"\">\r\n      </p>\r\n      <p class=\"formOption6\">\r\n      <span class=\"has_tip settingNameStyle1\" data-tip=\"${lang.transl('_必须tag的提示文字')}\">${lang.transl('_必须含有tag')}<span class=\"gray1\"> ? </span></span>\r\n      <input type=\"text\" name=\"needTag\" class=\"setinput_style1 blue setinput_tag\">\r\n      </p>\r\n      <p class=\"formOption7\">\r\n      <span class=\"has_tip settingNameStyle1\" data-tip=\"${lang.transl('_排除tag的提示文字')}\">${lang.transl('_不能含有tag')}<span class=\"gray1\"> ? </span></span>\r\n      <input type=\"text\" name=\"notNeedTag\" class=\"setinput_style1 blue setinput_tag\">\r\n      </p>\r\n      <p class=\"formOption8\">\r\n      <span class=\"has_tip settingNameStyle1\" data-tip=\"${lang.transl('_快速下载的提示')}\">${lang.transl('_是否自动下载')}<span class=\"gray1\"> ? </span></span>\r\n      <label for=\"setQuietDownload\"><input type=\"checkbox\" name=\"quietDownload\" id=\"setQuietDownload\" checked> ${lang.transl('_启用')}</label>\r\n      </p>\r\n      <input type=\"hidden\" name=\"debut\" value=\"0\">\r\n      </div>\r\n      <div class=\"centerWrap_btns centerBtnWrap\" id=\"centerBtnWrap\">\r\n  \r\n      </div>\r\n      <p> ${lang.transl('_设置命名规则3', '<span class=\"fwb blue imgNum\">0</span>')}</p>\r\n      <p>\r\n      <span class=\"has_tip settingNameStyle1\" data-tip=\"${lang.transl('_线程数字')}\">${lang.transl('_设置下载线程')}<span class=\"gray1\"> ? </span></span>\r\n      <input type=\"text\" name=\"downloadThread\" class=\"setinput_style1 blue\" value=\"5\">\r\n      </p>\r\n      <p>\r\n      <span class=\"has_tip settingNameStyle1\" data-tip=\"${lang.transl('_设置文件夹名的提示')}\">${lang.transl('_设置文件名')}<span class=\"gray1\"> ? </span></span>\r\n      <input type=\"text\" name=\"userSetName\" class=\"setinput_style1 blue fileNameRule\" value=\"{id}\">\r\n      &nbsp;\r\n      <select name=\"pageInfoSelect\" id=\"pageInfoSelect\">\r\n      </select>\r\n      &nbsp;\r\n      <select name=\"fileNameSelect\">\r\n        <option value=\"default\">…</option>\r\n        <option value=\"{id}\">{id}</option>\r\n        <option value=\"{title}\">{title}</option>\r\n        <option value=\"{tags}\">{tags}</option>\r\n        <option value=\"{tags_translate}\">{tags_translate}</option>\r\n        <option value=\"{user}\">{user}</option>\r\n        <option value=\"{userid}\">{userid}</option>\r\n        <option value=\"{type}\">{type}</option>\r\n        <option value=\"{date}\">{date}</option>\r\n        <option value=\"{bmk}\">{bmk}</option>\r\n        <option value=\"{px}\">{px}</option>\r\n        <option value=\"{rank}\">{rank}</option>\r\n        <option value=\"{id_num}\">{id_num}</option>\r\n        <option value=\"{p_num}\">{p_num}</option>\r\n        </select>\r\n      &nbsp;&nbsp;\r\n      <span class=\"gray1 showFileNameTip\">？</span>\r\n      </p>\r\n      <p class=\"fileNameTip tip\">\r\n      <strong>${lang\r\n            .transl('_设置文件夹名的提示')\r\n            .replace('<br>', '. ')}</strong>\r\n      <br>\r\n      <span class=\"blue\">{p_user}</span>\r\n      ${lang.transl('_文件夹标记PUser')}\r\n      <br>\r\n      <span class=\"blue\">{p_uid}</span>\r\n      ${lang.transl('_文件夹标记PUid')}\r\n      <br>\r\n      <span class=\"blue\">{p_tag}</span>\r\n      ${lang.transl('_文件夹标记PTag')}\r\n      <br>\r\n      <span class=\"blue\">{p_title}</span>\r\n      ${lang.transl('_文件夹标记PTitle')}\r\n      <br>\r\n      <span class=\"blue\">{id}</span>\r\n      ${lang.transl('_命名标记1')}\r\n      <br>\r\n      <span class=\"blue\">{title}</span>\r\n      ${lang.transl('_命名标记2')}\r\n      <br>\r\n      <span class=\"blue\">{tags}</span>\r\n      ${lang.transl('_命名标记3')}\r\n      <br>\r\n      <span class=\"blue\">{tags_translate}</span>\r\n      ${lang.transl('_命名标记11')}\r\n      <br>\r\n      <span class=\"blue\">{user}</span>\r\n      ${lang.transl('_命名标记4')}\r\n      <br>\r\n      <span class=\"blue\">{userid}</span>\r\n      ${lang.transl('_命名标记6')}\r\n      <br>\r\n      <span class=\"blue\">{date}</span>\r\n      ${lang.transl('_命名标记12')}\r\n      <br>\r\n      <span class=\"blue\">{type}</span>\r\n      ${lang.transl('_命名标记14')}\r\n      <br>\r\n      <span class=\"blue\">{bmk}</span>\r\n      ${lang.transl('_命名标记8')}\r\n      <br>\r\n      <span class=\"blue\">{px}</span>\r\n      ${lang.transl('_命名标记7')}\r\n      <br>\r\n      <span class=\"blue\">{id_num}</span>\r\n      ${lang.transl('_命名标记9')}\r\n      <br>\r\n      <span class=\"blue\">{p_num}</span>\r\n      ${lang.transl('_命名标记10')}\r\n      <br>\r\n      <span class=\"blue\">{rank}</span>\r\n      ${lang.transl('_命名标记13')}\r\n      <br>\r\n      ${lang.transl('_命名标记提醒')}\r\n      </p>\r\n      <p class=\"formOption10\">\r\n      <span class=\"has_tip settingNameStyle1\" data-tip=\"${lang.transl('_添加字段名称提示')}\">${lang.transl('_添加字段名称')}<span class=\"gray1\"> ? </span></span>\r\n      <label for=\"setTagNameToFileName\"><input type=\"checkbox\" name=\"tagNameToFileName\" id=\"setTagNameToFileName\" checked> ${lang.transl('_启用')}</label>\r\n      &nbsp;&nbsp;&nbsp;\r\n      <span class=\"gray1 showFileNameResult\"> ${lang.transl('_预览文件名')}</span>\r\n      </p>\r\n      <p class=\"formOption14\">\r\n      <span class=\"has_tip settingNameStyle1\" data-tip=\"${lang.transl('_快速下载建立文件夹提示')}\">${lang.transl('_快速下载建立文件夹')}<span class=\"gray1\"> ? </span></span>\r\n      <label for=\"setAlwaysFolder\"><input type=\"checkbox\" name=\"alwaysFolder\" id=\"setAlwaysFolder\" > ${lang.transl('_启用')}</label>\r\n      </p>\r\n      </form>\r\n      <div class=\"reserve_area\"></div>\r\n      <p class=\"gray1 bottom_help_bar\"> \r\n      <span class=\"showDownTip\">${lang.transl('_常见问题')}</span>\r\n      <a class=\"wiki2\" href=\"https://github.com/xuejianxianzun/PixivBatchDownloader/wiki\" target=\"_blank\"> ${lang.transl('_wiki')}</a>\r\n      <span id=\"resetOption\">${lang.transl('_重置设置')}</span>\r\n      </p>\r\n      <p class=\"downTip tip\"> ${lang.transl('_下载说明')}</p>\r\n      </div>\r\n      </div>\r\n      `;\r\n        document.body.insertAdjacentHTML('beforeend', centerPanelHTML);\r\n        this.centerPanel = document.querySelector('.centerWrap');\r\n        this.reserveArea = document.querySelector('.reserve_area');\r\n        this.centerBtnWrap = document.getElementById('centerBtnWrap');\r\n    }\r\n    // 显示提示\r\n    addTipEl() {\r\n        const tipHTML = `<div id=\"tip\"></div>`;\r\n        document.body.insertAdjacentHTML('beforeend', tipHTML);\r\n        this.tipEl = document.getElementById('tip');\r\n        const tips = this.centerPanel.querySelectorAll('.has_tip');\r\n        for (const el of tips) {\r\n            for (const ev of ['mouseenter', 'mouseleave']) {\r\n                el.addEventListener(ev, event => {\r\n                    const e = (event || window.event);\r\n                    const text = el.dataset.tip;\r\n                    this.showTip(text, {\r\n                        type: ev === 'mouseenter' ? 1 : 0,\r\n                        x: e.clientX,\r\n                        y: e.clientY\r\n                    });\r\n                });\r\n            }\r\n        }\r\n    }\r\n    // 绑定中间面板上的事件\r\n    bindEvents() {\r\n        // 监听点击扩展图标的消息，开关中间面板\r\n        chrome.runtime.onMessage.addListener(msg => {\r\n            if (msg.msg === 'click_icon') {\r\n                if (this.centerPanel.style.display === 'block') {\r\n                    this.hideCenterPanel();\r\n                }\r\n                else {\r\n                    this.showCenterPanel();\r\n                }\r\n            }\r\n        });\r\n        // 关闭按钮\r\n        document\r\n            .querySelector('.centerWrap_close')\r\n            .addEventListener('click', () => {\r\n            this.hideCenterPanel();\r\n        });\r\n        // 使用快捷键 Alt + x 切换中间面板显示隐藏\r\n        window.addEventListener('keydown', ev => {\r\n            if (ev.altKey && ev.keyCode === 88) {\r\n                const nowDisplay = this.centerPanel.style.display;\r\n                if (nowDisplay === 'block') {\r\n                    this.hideCenterPanel();\r\n                }\r\n                else {\r\n                    this.showCenterPanel();\r\n                }\r\n            }\r\n        }, false);\r\n        // 预览文件名\r\n        document\r\n            .querySelector('.showFileNameResult')\r\n            .addEventListener('click', () => {\r\n            EVT.fire(EVT.events.previewFileName);\r\n        });\r\n        // 显示命名字段提示\r\n        document\r\n            .querySelector('.showFileNameTip')\r\n            .addEventListener('click', () => DOM.toggleEl(document.querySelector('.fileNameTip')));\r\n        // 显示下载说明\r\n        document\r\n            .querySelector('.showDownTip')\r\n            .addEventListener('click', () => DOM.toggleEl(document.querySelector('.downTip')));\r\n        this.form = this.centerPanel.querySelector('.settingForm');\r\n        // 输入框获得焦点时自动选择文本（文件名输入框例外）\r\n        const centerInputs = this.form.querySelectorAll('input[type=text]');\r\n        for (const el of centerInputs) {\r\n            if (el.name !== 'userSetName') {\r\n                el.addEventListener('focus', function () {\r\n                    this.select();\r\n                });\r\n            }\r\n        }\r\n        // 把下拉框的选择项插入到文本框里\r\n        this.insertValueToInput(this.form.pageInfoSelect, this.form.userSetName);\r\n        this.insertValueToInput(this.form.fileNameSelect, this.form.userSetName);\r\n        // 重置设置\r\n        document.getElementById('resetOption').addEventListener('click', () => {\r\n            const result = window.confirm(lang.transl('_是否重置设置'));\r\n            if (result) {\r\n                EVT.fire(EVT.events.resetOption);\r\n            }\r\n        });\r\n    }\r\n    // 添加 UI\r\n    async addUI() {\r\n        this.addRightButton();\r\n        this.addCenterPanel();\r\n        this.addTipEl();\r\n        this.bindEvents();\r\n    }\r\n    // 收起展开选项设置区域\r\n    toggleOptionArea(bool) {\r\n        const OptionArea = (this.centerPanel.querySelector('.option_area1'));\r\n        OptionArea.style.display = bool ? 'block' : 'none';\r\n        this.centerPanel.querySelector('.centerWrap_toogle_option').innerHTML = bool ? '▲' : '▼';\r\n    }\r\n    // 把下拉框的选择项插入到文本框里\r\n    insertValueToInput(from, to) {\r\n        from.addEventListener('change', () => {\r\n            if (from.value !== 'default') {\r\n                // 把选择项插入到光标位置,并设置新的光标位置\r\n                const position = to.selectionStart;\r\n                to.value =\r\n                    to.value.substr(0, position) +\r\n                        from.value +\r\n                        to.value.substr(position, to.value.length);\r\n                to.selectionStart = position + from.value.length;\r\n                to.selectionEnd = position + from.value.length;\r\n                to.focus();\r\n            }\r\n        });\r\n    }\r\n    // 显示中间区域\r\n    showCenterPanel() {\r\n        this.centerPanel.style.display = 'block';\r\n        this.rightBtn.style.display = 'none';\r\n    }\r\n    // 隐藏中间区域\r\n    hideCenterPanel() {\r\n        this.centerPanel.style.display = 'none';\r\n        this.rightBtn.style.display = 'block';\r\n        EVT.fire(EVT.events.hideCenterPanel);\r\n    }\r\n    // 向中间面板添加按钮\r\n    addCenterButton(bg = Colors.blue, text = '', attr = []) {\r\n        const e = document.createElement('button');\r\n        e.type = 'button';\r\n        e.style.backgroundColor = bg;\r\n        e.textContent = text;\r\n        for (const [key, value] of attr) {\r\n            e.setAttribute(key, value);\r\n        }\r\n        this.centerBtnWrap.appendChild(e);\r\n        return e;\r\n    }\r\n    clearCenterButton() {\r\n        this.centerBtnWrap.innerHTML = '';\r\n    }\r\n}\r\nconst ui = new UI();\r\nexport { ui };\r\n","// 在属性名前面加上下划线，和文本内容做出区别。\r\n// {} 表示需要进行替换的部分\r\n// <br> 和 \\n 换行\r\nconst langText = {\r\n    _只下载已收藏: [\r\n        '只下载已收藏',\r\n        'ブックマークのみをダウンロードする',\r\n        'Download only bookmarked works',\r\n        '只下載已收藏'\r\n    ],\r\n    _只下载已收藏的提示: [\r\n        '只下载已经收藏的作品',\r\n        'ブックマークした作品のみをダウンロードする',\r\n        'Download only bookmarked works',\r\n        '只下載已經收藏的作品'\r\n    ],\r\n    _下载作品类型: [\r\n        '下载作品类型',\r\n        'ダウンロード作品の種類',\r\n        'Download work type',\r\n        '下載作品類型'\r\n    ],\r\n    _下载作品类型的提示Center: [\r\n        '下载哪些类型的作品',\r\n        'どの種類の作品をダウンロードしますか',\r\n        'Which types of works to download',\r\n        '下載哪些類型的作品'\r\n    ],\r\n    _多p下载前几张: [\r\n        '设置作品张数',\r\n        '作品ごとにダウンロードされた画像の数',\r\n        'Number of images downloaded per work',\r\n        '設定作品張數'\r\n    ],\r\n    _多p下载前几张提示: [\r\n        '下载每个作品的前几张图片。默认值 0 表示全部下载。',\r\n        '各作品の画像が最初の何枚をダウンロードしますか？ デフォルト値の 0 は、すべてをダウンロードします。',\r\n        'Download the first few pictures of each piece. The default value of 0 means all downloads.',\r\n        '下載每個作品的前幾張圖片。預設值 0 表示全部下載。'\r\n    ],\r\n    _不能含有tag: [\r\n        '不能含有 tag',\r\n        '指定した tagを除外する',\r\n        'Exclude specified tag',\r\n        '不能含有 tag'\r\n    ],\r\n    _排除tag的提示文字: [\r\n        '您可在下载前设置要排除的tag，这样在下载时将不会下载含有这些tag的作品。不区分大小写；如需排除多个tag，请使用英文逗号分隔。请注意要排除的tag的优先级大于要包含的tag的优先级。',\r\n        \"ダウンロードする前に、除外する tagを設定できます。大文字と小文字を区別しない；複数の tagを設定する必要がある場合は、','で区切ってください。除外された tagは、含まれている tagよりも優先されます\",\r\n        \"Before downloading, you can set the tag you want to exclude. Not case sensitive; If you need to set multiple tags, you can use ',' separated. The excluded tag takes precedence over the included tag\",\r\n        '您可在下載前設定要排除的tag，這樣在下載時將不會下載含有這些tag的作品。不區分大小寫；如需排除多個tag，請使用英文逗號分隔。請注意要排除的tag的優先等級大於要包含的tag的優先等級。'\r\n    ],\r\n    _设置了排除tag之后的提示: [\r\n        '排除 tag：',\r\n        ' tagを除外：',\r\n        'Excludes tag: ',\r\n        '排除 tag：'\r\n    ],\r\n    _必须含有tag: [\r\n        '必须含有 tag',\r\n        '必要な tag',\r\n        'Must contain tag',\r\n        '必須含有 tag'\r\n    ],\r\n    _必须tag的提示文字: [\r\n        '您可在下载前设置作品里必须包含的tag，不区分大小写；如需包含多个tag，请使用英文逗号分隔。',\r\n        \"ダウンロードする前に、必要な tagを設定することができます。大文字と小文字を区別しない；複数の tagを設定する必要がある場合は、','で区切ってください。\",\r\n        \"Before downloading, you can set the tag that must be included. Not case sensitive; If you need to set multiple tags, you can use ',' separated. \",\r\n        '您可在下載前設定作品裡必須包含的tag，不區分大小寫；如需包含多個tag，請使用英文逗號分隔。'\r\n    ],\r\n    _设置了必须tag之后的提示: [\r\n        '包含 tag：',\r\n        ' tagを含める：',\r\n        'Include tag: ',\r\n        '包含 tag：'\r\n    ],\r\n    _筛选宽高的按钮文字: [\r\n        '设置宽高条件',\r\n        '幅と高さの条件を設定する',\r\n        'Set the width and height',\r\n        '設定寬高條件'\r\n    ],\r\n    _筛选宽高的按钮Title: [\r\n        '在下载前，您可以设置要下载的图片的宽高条件。',\r\n        'ダウンロードする前に、画像の幅と高さの条件を設定できます。',\r\n        'Before downloading, you can set the width and height conditions of the pictures you want to download.',\r\n        '在下載前，您可以設定要下載的圖片的寬高條件。'\r\n    ],\r\n    _设置宽高比例: [\r\n        '设置宽高比例',\r\n        '縦横比を設定する',\r\n        'Set the aspect ratio',\r\n        '設定寬高比例'\r\n    ],\r\n    _设置宽高比例Title: [\r\n        '设置宽高比例，也可以手动输入宽高比',\r\n        '縦横比を設定する、手動で縦横比を入力することもできる',\r\n        'Set the aspect ratio, or manually type the aspect ratio',\r\n        '設定寬高比，也可以手動輸入寬高比'\r\n    ],\r\n    _不限制: ['不限制', '無制限', 'not limited', '不限制'],\r\n    _横图: ['横图', '横長', 'Horizontal', '橫圖'],\r\n    _竖图: ['竖图', '縦長', 'Vertical', '豎圖'],\r\n    _输入宽高比: ['宽高比 >=', '縦横比 >=', 'Aspect ratio >=', '寬高比 >='],\r\n    _设置了宽高比之后的提示: [\r\n        '宽高比：{}',\r\n        '縦横比：{}',\r\n        'Aspect ratio: {}',\r\n        '寬高比：{}'\r\n    ],\r\n    _宽高比必须是数字: [\r\n        '宽高比必须是数字',\r\n        '縦横比は数値でなければなりません',\r\n        'The aspect ratio must be a number',\r\n        '寬高比必須是數字'\r\n    ],\r\n    _筛选宽高的提示文字: [\r\n        '请输入最小宽度和最小高度，不会下载不符合要求的图片。',\r\n        '最小幅と最小高さを入力してください。要件を満たしていない画像はダウンロードされません。',\r\n        'Please type the minimum width and minimum height. Will not download images that do not meet the requirements',\r\n        '請輸入最小寬度和最小高度，不會下載不符合要求的圖片。'\r\n    ],\r\n    _本次输入的数值无效: [\r\n        '本次输入的数值无效',\r\n        '無効な入力',\r\n        'Invalid input',\r\n        '本次輸入的數值無效'\r\n    ],\r\n    _设置了筛选宽高之后的提示文字p1: [\r\n        '宽度 >= ',\r\n        '幅 >= ',\r\n        'Width >= ',\r\n        '寬度 >= '\r\n    ],\r\n    _或者: [' 或者 ', ' または ', ' or ', ' 或是 '],\r\n    _并且: [' 并且 ', ' そして ', ' and ', ' 並且 '],\r\n    _高度设置: ['高度 >= ', '高さ >= ', 'height >= ', '高度 >= '],\r\n    _个数: [\r\n        '设置作品数量',\r\n        '作品数を設定する',\r\n        'Set the number of works',\r\n        '設定作品數量'\r\n    ],\r\n    _页数: [\r\n        '设置页面数量',\r\n        'ページ数を設定する',\r\n        'Set the number of pages',\r\n        '設定頁面數量'\r\n    ],\r\n    _筛选收藏数的按钮文字: [\r\n        '设置收藏数量',\r\n        'ブックマークされた数を設定する',\r\n        'Set the bookmarkCount conditions',\r\n        '設定收藏數量'\r\n    ],\r\n    _筛选收藏数的按钮Title: [\r\n        '在下载前，您可以设置对收藏数量的要求。',\r\n        'ダウンロードする前に、ブックマークされた数の条件を設定することができます。',\r\n        'Before downloading, You can set the requirements for the number of bookmarks.',\r\n        '在下載前，您可以設定對收藏數量的要求。'\r\n    ],\r\n    _筛选收藏数Center: [\r\n        '设置收藏数量',\r\n        'ブックマークされた数を設定する',\r\n        'Set the number of bookmarks',\r\n        '設定收藏數量'\r\n    ],\r\n    _筛选收藏数的提示Center: [\r\n        '如果作品的收藏数小于设置的数字，作品不会被下载。',\r\n        '作品のブックマークされた数が設定された数字よりも少ない場合、作品はダウンロードされません。',\r\n        'If the number of bookmarks of the work is less than the set number, the work will not be downloaded.',\r\n        '如果作品的收藏數小於設定的數字，作品不會被下載。'\r\n    ],\r\n    _筛选收藏数的提示文字: [\r\n        '请输入一个数字，如果作品的收藏数小于这个数字，作品不会被下载。',\r\n        '数字を入力してください。 作品のブックマークされた数がこの数字より少ない場合、作品はダウンロードされません。',\r\n        'Please type a number. If the number of bookmarks of the work is less than this number, the work will not be downloaded.',\r\n        '請輸入一個數字，如果作品的收藏數小於這個數字，作品不會被下載。'\r\n    ],\r\n    _设置了筛选收藏数之后的提示文字: [\r\n        '收藏数 >= ',\r\n        'ブックマークの数 >= ',\r\n        'Number of bookmarks >= ',\r\n        '收藏數 >= '\r\n    ],\r\n    _本次任务已全部完成: [\r\n        '本次任务已全部完成。',\r\n        'このタスクは完了しました。',\r\n        'This task has been completed.',\r\n        '本次工作已全部完成'\r\n    ],\r\n    _本次任务条件: [\r\n        '本次任务条件: ',\r\n        'このタスクの条件：',\r\n        'This task condition: ',\r\n        '本次工作條件：'\r\n    ],\r\n    _参数不合法: [\r\n        '参数不合法，本次操作已取消。',\r\n        'パラメータは有効ではありません。この操作はキャンセルされました。',\r\n        'Parameter is not legal, this operation has been canceled.',\r\n        '參數不合法，本次動作已取消。'\r\n    ],\r\n    _checkWantPageRule1Arg3: [\r\n        '从本页开始下载-num-个作品',\r\n        'このページから-num-枚の作品をダウンロード。',\r\n        'Download -num- works from this page.',\r\n        '從本頁開始下載-num-個作品'\r\n    ],\r\n    _checkWantPageRule1Arg4: [\r\n        '向下获取所有作品',\r\n        'このページからすべての作品をダウンロードする。',\r\n        'download all the work from this page.',\r\n        '向下取得所有作品'\r\n    ],\r\n    _checkWantPageRule1Arg8: [\r\n        '从本页开始下载<br>如果要限制下载的页数，请输入从1开始的数字，1为仅下载本页。',\r\n        'このページからダウンロードする<br>ダウンロードするページを設定する場合は、1から始まる数字を入力してください。 1は現在のページのみをダウンロードする。',\r\n        'Download from this page<br>If you want to set the number of pages to download, type a number starting at 1. This page is 1.',\r\n        '從本頁開始下載<br>如果要限制下載的頁數，請輸入從1開始的數字，1為僅下載本頁。'\r\n    ],\r\n    _checkWantPageRule1Arg6: [\r\n        '从本页开始下载-num-页',\r\n        '現在のページから-num-ページをウンロードします',\r\n        'download -num- pages from the current page',\r\n        '從本頁開始下載-num-頁'\r\n    ],\r\n    _checkWantPageRule1Arg7: [\r\n        '下载所有页面',\r\n        'すべてのページをダウンロードする',\r\n        'download all pages',\r\n        '下載所有頁面'\r\n    ],\r\n    _checkWantPageRule1Arg9: [\r\n        '下载 -num- 个相关作品',\r\n        '関連作品 -num- 枚をダウンロードする。',\r\n        'download -num- related works.',\r\n        '下載 -num- 個相關作品'\r\n    ],\r\n    _checkWantPageRule1Arg10: [\r\n        '下载所有相关作品',\r\n        '関連作品をすべてダウンロードする。',\r\n        'download all related works.',\r\n        '下載所有相關作品'\r\n    ],\r\n    _checkWantPageRule1Arg11: [\r\n        '下载推荐作品',\r\n        'お勧め作品をダウンロードする',\r\n        'download recommend works',\r\n        '下載推薦作品'\r\n    ],\r\n    _checkWantPageRule1Arg12: [\r\n        '下载排行榜前 -num- 个作品',\r\n        'キング前 -num- 位の作品をダウンロードする。',\r\n        'download the top -num- works in the ranking list',\r\n        '下載排行榜前 -num- 個作品'\r\n    ],\r\n    _请输入最低收藏数和要抓取的页数: [\r\n        '请输入最低收藏数和要抓取的页数，用英文逗号分开。\\n类似于下面的形式: \\n1000,1000',\r\n        \"ボックマークの最小数とクロールするページ数を，','で区切って入力してください。\\n例えば：\\n1000,1000\",\r\n        \"Please type the minimum number of bookmarks, and the number of pages to be crawled, separated by ','.\\nE.g:\\n1000,1000\",\r\n        '請輸入最低收藏數和要擷取的頁數，用英文逗號分開。\\n類似於下面的形式: \\n1000,1000'\r\n    ],\r\n    _wantPage弹出框文字PageType10: [\r\n        '您想要下载多少页？请输入数字。\\r\\n当前模式下，列表页的页数最多只有',\r\n        'ダウンロードしたいページ数を入力してください。 \\r\\n最大値：',\r\n        'Please type the number of pages you want to download.\\r\\n The maximum value is ',\r\n        '您想要下載多少頁？請輸入數字。\\r\\n目前模式下，清單頁的頁數最多只有'\r\n    ],\r\n    _输入超过了最大值: [\r\n        '您输入的数字超过了最大值',\r\n        '入力した番号が最大値を超えています',\r\n        'The number you entered exceeds the maximum',\r\n        '您輸入的數字超過了最大值'\r\n    ],\r\n    _任务开始1: [\r\n        '从本页开始下载{}页',\r\n        'このページから{}ページをダウンロードする',\r\n        'download {} pages from this page',\r\n        '從本頁開始下載{}頁'\r\n    ],\r\n    _任务开始0: ['任务开始', 'タスクが開始されます', 'Task starts', '工作開始'],\r\n    _checkNotdownTypeAll: [\r\n        '由于您排除了所有作品类型，本次任务已取消。',\r\n        'すべての種類の作品を除外したため、タスクはキャンセルされました。',\r\n        'Because you excluded all types of work, the task was canceled.',\r\n        '由於您排除了所有作品類型，本次工作已取消。'\r\n    ],\r\n    _checkNotdownTypeResult: [\r\n        '排除作品类型：',\r\n        'これらのタイプの作品を除外します：',\r\n        'Excludes these types of works: ',\r\n        '排除作品類型：'\r\n    ],\r\n    _多图作品: [\r\n        '多图作品',\r\n        'マルチイメージ作品',\r\n        'Multi-image works',\r\n        '多圖作品'\r\n    ],\r\n    _多图作品设置: [\r\n        '多图作品设置',\r\n        'マルチイメージ設定',\r\n        'Multi-image works',\r\n        '多圖作品設定'\r\n    ],\r\n    _怎样下载多图作品: [\r\n        '怎样下载多图作品？',\r\n        'どのようにマルチイメージ作品をダウンロードしますか？',\r\n        'How to download multi-image works?',\r\n        '怎样下載多圖作品？'\r\n    ],\r\n    _不下载: ['不下载', 'ダウンロードしない', 'Do not download', '不下載'],\r\n    _全部下载: ['全部下载', '全部ダウンロードする', 'Download all', '全部下載'],\r\n    _下载前几张图片: [\r\n        '下载前几张图片：',\r\n        '最初のいくつかの画像：',\r\n        'First few images:',\r\n        '下載前幾張圖片：'\r\n    ],\r\n    _不下载多图作品: [\r\n        '不下载多图作品',\r\n        'マルチイメージ作品をダウンロードしないでください',\r\n        'Do not download multi-image works',\r\n        '不下載多圖作品'\r\n    ],\r\n    _多图作品下载前n张图片: [\r\n        '多图作品下载前 {} 张图片',\r\n        'マルチイメージ作品は、最初の {} イメージをダウンロードします',\r\n        'Multi-image works download the first {} images',\r\n        '多圖作品下載前 {} 張圖片'\r\n    ],\r\n    _插画: ['插画 ', 'イラスト', 'Illustrations', '插畫 '],\r\n    _漫画: ['漫画 ', '漫画', 'Manga', '漫畫 '],\r\n    _动图: ['动图 ', 'うごイラ', 'Ugoira', '動圖 '],\r\n    _动图保存格式: [\r\n        '动图保存格式',\r\n        'うごイラをどのタイプが保存するか',\r\n        'Save the ugoira work as',\r\n        '動圖儲存格式'\r\n    ],\r\n    _动图保存格式title: [\r\n        '下载动图时，可以把它转换成视频文件',\r\n        'うごイラをダウンロードするとき、動画に変換することができます。',\r\n        'When you download a ugoira work, you can convert it to a video file.',\r\n        '下載動圖時，可以將它轉換為影片檔案'\r\n    ],\r\n    _webmVideo: ['WebM 视频', 'WebM ビデオ', 'WebM video', 'WebM 視頻'],\r\n    _gif: ['GIF 图片', 'GIF 画像', 'GIF picture', 'GIF 圖片'],\r\n    _zipFile: ['Zip 文件', 'ZIP ファイル', 'Zip file', 'Zip 檔案'],\r\n    _当前作品个数: [\r\n        '当前有 {} 个作品 ',\r\n        '今は{}枚の作品があります ',\r\n        'There are now {} works ',\r\n        '目前有 {} 個作品 '\r\n    ],\r\n    _排行榜进度: [\r\n        '已抓取本页面第{}部分',\r\n        'このページの第{}部がクロールされました',\r\n        'Part {} of this page has been crawled',\r\n        '已擷取本頁面第{}部分'\r\n    ],\r\n    _新作品进度: [\r\n        '已抓取本页面 {} 个作品',\r\n        'このページの {} つの作品をクロールしました',\r\n        'This page has been crawled {} works',\r\n        '已擷取本頁面 {} 個作品'\r\n    ],\r\n    _抓取多少个作品: [\r\n        '抓取本页面 {} 个作品',\r\n        'このページの「」つの作品をクロールします',\r\n        'Crawl this page {} works',\r\n        '擷取本頁面 {} 個作品'\r\n    ],\r\n    _相关作品抓取完毕: [\r\n        '相关作品抓取完毕。包含有{}个作品，开始获取作品信息。',\r\n        '関連作品はクロールされました。 {}作品を含み、その作品に関する情報の取得を開始します。',\r\n        'The related works have been crawled. Contains {} works and starts getting information about the work.',\r\n        '相關作品擷取完畢。包含有{}個作品，開始取得作品資訊。'\r\n    ],\r\n    _排行榜任务完成: [\r\n        '本页面抓取完毕。<br>当前有{}个作品，开始获取作品信息。',\r\n        'このページはクロールされ。<br>{}枚の作品があります。 作品情報の取得を開始します。',\r\n        'This page is crawled and now has {} works.<br> Start getting the works for more information.',\r\n        '本頁面擷取完畢。<br>目前有{}個作品，開始取得作品資訊。'\r\n    ],\r\n    _列表页抓取进度: [\r\n        '已抓取列表页{}个页面',\r\n        '{}のリストページを取得しました',\r\n        'Has acquired {} list pages',\r\n        '已擷取清單頁{}個頁面'\r\n    ],\r\n    _搜索页已抓取所有页面: [\r\n        '已抓取本 tag 的所有页面，开始获取图片网址',\r\n        '現在 tagの全ページを取得している、画像URLの取得が開始されます',\r\n        'Gets all pages of the current tag, starts to get the image URL',\r\n        '已擷取本 tag 的所有頁面，開始取得圖片網址'\r\n    ],\r\n    _列表页抓取完成: [\r\n        '列表页面抓取完成，开始获取图片网址',\r\n        'リストページがクロールされ、画像URLの取得が開始されます',\r\n        'The list page is crawled and starts to get the image URL',\r\n        '清單頁面擷取完成，開始取得圖片網址'\r\n    ],\r\n    _抓取结果为零: [\r\n        '抓取完毕，但没有找到符合筛选条件的作品。',\r\n        'クロールは終了しましたが、フィルタ条件に一致する作品が見つかりませんでした。',\r\n        'Crawl finished but did not find works that match the filter criteria.',\r\n        '擷取完畢，但沒有找到符合篩選條件的作品。'\r\n    ],\r\n    _当前任务尚未完成: [\r\n        '当前任务尚未完成',\r\n        '現在のタスクはまだ完了していません',\r\n        'The current task has not yet been completed',\r\n        '目前工作尚未完成'\r\n    ],\r\n    _当前任务尚未完成2: [\r\n        '当前任务尚未完成，请等待完成后再下载。',\r\n        '現在のタスクはまだ完了していません',\r\n        'The current task has not yet been completed',\r\n        '目前工作尚未完成，請等待完成後再下載。'\r\n    ],\r\n    _列表抓取完成开始获取作品页: [\r\n        '当前列表中有{}张作品，开始获取作品信息',\r\n        '{}枚の作品があります。 作品情報の取得を開始します。',\r\n        'Now has {} works. Start getting the works for more information.',\r\n        '目前清單中有{}張作品，開始取得作品資訊'\r\n    ],\r\n    _开始获取作品页面: [\r\n        '开始获取作品页面',\r\n        '作品ページの取得を開始する',\r\n        'Start getting the works page',\r\n        '開始取得作品頁面'\r\n    ],\r\n    _无权访问2: [\r\n        '无权访问 {}，跳过该作品。',\r\n        '{} のアクセス権限がありません、作品を無視する。',\r\n        'No access {}, skip.',\r\n        '無權造訪 {}，跳過該作品。'\r\n    ],\r\n    _作品页状态码0: [\r\n        '请求的url不可访问',\r\n        '要求されたURLにアクセスできません',\r\n        'The requested url is not accessible',\r\n        '要求的url無法造訪'\r\n    ],\r\n    _作品页状态码400: [\r\n        '该作品已被删除',\r\n        '作品は削除されました',\r\n        'The work has been deleted',\r\n        '該作品已被刪除'\r\n    ],\r\n    _作品页状态码403: [\r\n        '无权访问请求的url 403',\r\n        'リクエストされたURLにアクセスできない 403',\r\n        'Have no access to the requested url 403',\r\n        '無權造訪要求的url 403'\r\n    ],\r\n    _作品页状态码404: [\r\n        '404 not found',\r\n        '404 not found',\r\n        '404 not found',\r\n        '404 not found'\r\n    ],\r\n    _抓取图片网址的数量: [\r\n        '已获取 {} 个图片网址',\r\n        '{} つの画像URLを取得',\r\n        'Get {} image URLs',\r\n        '已取得 {} 個圖片網址'\r\n    ],\r\n    _正在抓取: [\r\n        '正在抓取，请等待……',\r\n        '取得中、しばらくお待ちください...',\r\n        'Getting, please wait...',\r\n        '正在擷取，請等待……'\r\n    ],\r\n    _获取全部书签作品: [\r\n        '获取全部书签作品，时间可能比较长，请耐心等待。',\r\n        'ブックマークしたすべての作品を入手すると、時間がかかることがあります。お待ちください。',\r\n        'Get all bookmarked works, the time may be longer, please wait.',\r\n        '取得全部書籤作品，時間可能比較長，請耐心等待。'\r\n    ],\r\n    _抓取图片网址遇到中断: [\r\n        '当前任务已中断!',\r\n        '現在のタスクが中断されました。',\r\n        'The current task has been interrupted.',\r\n        '目前工作已中斷!'\r\n    ],\r\n    _关闭: ['关闭', 'クローズ', 'close', '關閉'],\r\n    _输出信息: ['输出信息', '出力情報', 'Output information', '輸出資訊'],\r\n    _复制: ['复制', 'コピー', 'Copy', '複製'],\r\n    _已复制到剪贴板: [\r\n        '已复制到剪贴板，可直接粘贴',\r\n        'クリップボードにコピーされました',\r\n        'Has been copied to the clipboard',\r\n        '已複製至剪貼簿，可直接貼上'\r\n    ],\r\n    _下载设置: ['下载设置', 'ダウンロード設定', 'Download settings', '下載設定'],\r\n    _收起展开设置项: [\r\n        '收起/展开设置项',\r\n        '設定の折りたたみ/展開',\r\n        'Collapse/expand settings',\r\n        '摺疊/展開設定項目'\r\n    ],\r\n    _github: [\r\n        'Github 页面，欢迎 star',\r\n        'Githubのページ、starをクリックしてください',\r\n        'Github page, if you like, please star it',\r\n        'Github 頁面，歡迎 star'\r\n    ],\r\n    _wiki: ['使用手册', 'マニュアル', 'Wiki', 'Wiki'],\r\n    _快捷键切换显示隐藏: [\r\n        '使用 Alt + X，可以显示和隐藏下载面板',\r\n        'Alt + Xを使用してダウンロードパネルを表示および非表示にする',\r\n        'Use Alt + X to show and hide the download panel',\r\n        '使用 Alt + X，可以顯示和隱藏下載面板'\r\n    ],\r\n    _设置命名规则3: [\r\n        '共抓取到 {} 个图片',\r\n        '合計 {} 枚の画像を取得し',\r\n        'Crawl a total of {} pictures',\r\n        '共擷取到 {} 個圖片'\r\n    ],\r\n    _设置文件名: [\r\n        '设置命名规则',\r\n        '命名規則を設定する',\r\n        'Set naming rules',\r\n        '設定命名規則'\r\n    ],\r\n    _设置文件夹名的提示: [\r\n        `可以使用 '/' 建立文件夹<br>示例：{p_title}/{user}/{id}`,\r\n        `フォルダーは '/'で作成できます<br>例：{p_title}/{user}/{id}`,\r\n        `You can create a folder with '/'<br>Example：{p_title}/{user}/{id}`,\r\n        `可以使用 '/' 建立資料夾<br>範例：{p_title}/{user}/{id}`\r\n    ],\r\n    _添加字段名称: [\r\n        '添加字段名称',\r\n        'フィールド名を追加',\r\n        'Add field name',\r\n        '加入欄位名稱'\r\n    ],\r\n    _添加字段名称提示: [\r\n        '例如，在用户名前面添加“user_”标记',\r\n        'たとえば、ユーザー名の前に \"user_\" tagを追加します。',\r\n        'For example, add the \"user_\" tag in front of the username',\r\n        '例如，在使用者名稱前面加入“user_”標記'\r\n    ],\r\n    _查看标记的含义: [\r\n        '查看标记的含义',\r\n        ' tagの意味を表示する',\r\n        'View the meaning of the tag',\r\n        '檢視標記的意義'\r\n    ],\r\n    _命名标记1: [\r\n        '默认文件名，如 44920385_p0',\r\n        'デフォルトのファイル名，例 44920385_p0',\r\n        'Default file name, for example 44920385_p0',\r\n        '預設檔案名稱，如 44920385_p0'\r\n    ],\r\n    _命名标记2: ['作品标题', '作品のタイトル', 'works title', '作品標題'],\r\n    _命名标记3: [\r\n        '作品的 tag 列表',\r\n        '作品の tags',\r\n        'The tags of the work',\r\n        '作品的 tag 清單'\r\n    ],\r\n    _命名标记4: ['画师名字', 'アーティスト名', 'Artist name', '畫師名稱'],\r\n    _命名标记6: ['画师 id', 'アーティスト ID', 'Artist id', '畫師 id'],\r\n    _命名标记7: ['宽度和高度', '幅と高さ', 'width and height', '寬度和高度'],\r\n    _命名标记8: [\r\n        'bookmark-count，作品的收藏数。把它放在最前面可以让文件按收藏数排序。',\r\n        'bookmark-count，作品のボックマークの数、前に追加することでボックマーク数に并べる。',\r\n        'bookmark-count, bookmarks number of works.',\r\n        'bookmark-count，作品的收藏數。將它放在最前面可以讓檔案依收藏數排序。'\r\n    ],\r\n    _命名标记9: [\r\n        '数字 id，如 44920385',\r\n        '44920385 などの番号 ID',\r\n        'Number id, for example 44920385',\r\n        '數字 id，如 44920385'\r\n    ],\r\n    _命名标记10: [\r\n        '图片在作品内的序号，如 0、1、2 …… 每个作品都会重新计数。',\r\n        '0、1、2 など、作品の画像のシリアル番号。各ピースは再集計されます。',\r\n        'The serial number of the picture in the work, such as 0, 1, 2 ... Each work will be recounted.',\r\n        '圖片在作品內的序號，如 0、1、2 …… 每個作品都將重新計數。'\r\n    ],\r\n    _命名标记11: [\r\n        '作品的 tag 列表，附带翻译后的 tag（如果有）',\r\n        '作品のtagリスト、翻訳付きtag(あれば)',\r\n        'The tags of the work, with the translated tag (if any)',\r\n        '作品的 tag 清單，附帶翻譯後的 tag（若有的話）'\r\n    ],\r\n    _命名标记12: [\r\n        '作品的创建日期，格式为 yyyy-MM-dd。如 2019-08-29',\r\n        '作品の作成日はyyyy-MM-ddの形式でした。 2019-08-29 など',\r\n        'The date the creation of the work was in the format yyyy-MM-dd. Such as 2019-08-29',\r\n        '作品的建立日期，格式為 yyyy-MM-dd。如 2019-08-29'\r\n    ],\r\n    _命名标记13: [\r\n        '作品在排行榜中的排名。如 #1、#2 ……',\r\n        'リーダーボードでの作品のランキング。 ＃1、＃2 など ...',\r\n        'The ranking of the work in the ranking list. Such as #1, #2 ...',\r\n        '作品在排行榜中的排名，如 #1、#2 ……'\r\n    ],\r\n    _命名标记14: [\r\n        '作品类型，分为 illustration、manga、ugoira',\r\n        '作品分類は、illustration、manga、ugoira',\r\n        'The type of work, divided into illustration, manga, ugoira',\r\n        '作品類型，分为 illustration、manga、ugoira'\r\n    ],\r\n    _命名标记提醒: [\r\n        '您可以使用多个标记；建议在不同标记之间添加分割用的字符。示例：{id}-{userid}<br>一定要包含 {id} 或者 {id_num}。<br>* 在某些情况下，会有一些标记不可用。',\r\n        '複数の tagを使用することができ；異なる tag間に別の文字を追加することができます。例：{id}-{userid}<br>必ず{id}または{id_num}を含めてください。<br>* 場合によっては、一部の tagが利用できず。',\r\n        'You can use multiple tags, and you can add a separate character between different tags. Example: {id}-{userid}<br>Be sure to include {id} or {id_num}.<br>* In some cases, some tags will not be available.',\r\n        '您可以使用多個標記；建議在不同標記之間加入分隔用的字元。範例：{id}-{userid}<br>一定要包含 {id} 或者 {id_num}。<br>* 在某些情況下，會有一些標記不可用。'\r\n    ],\r\n    _文件夹标记PUser: [\r\n        '当前页面的画师名字',\r\n        'アーティスト名',\r\n        'Artist name of this page',\r\n        '目前頁面的畫師名稱'\r\n    ],\r\n    _文件夹标记PUid: [\r\n        '当前页面的画师id',\r\n        'アーティストID',\r\n        'Artist id of this page',\r\n        '目前頁面的畫師id'\r\n    ],\r\n    _文件夹标记PTag: [\r\n        '当前页面的 tag',\r\n        '現在の tag',\r\n        'Current tag',\r\n        '目前頁面的 tag'\r\n    ],\r\n    _文件夹标记PTitle: [\r\n        '当前页面的标题',\r\n        'ページのタイトル',\r\n        'The title of this page',\r\n        '目前頁面的標題'\r\n    ],\r\n    _预览文件名: [\r\n        '预览文件名',\r\n        'ファイル名のプレビュー',\r\n        'Preview file name',\r\n        '預覽檔案名稱'\r\n    ],\r\n    _设置下载线程: [\r\n        '设置下载线程',\r\n        'ダウンロードスレッドを設定する',\r\n        'Set the download thread',\r\n        '設定下載執行緒'\r\n    ],\r\n    _线程数字: [\r\n        '可以输入 1-5 之间的数字，设置同时下载的数量',\r\n        '同時ダウンロード数を設定するには、1〜5 の数値を入力します',\r\n        'You can type a number between 1-5 to set the number of concurrent downloads',\r\n        '可以輸入 1-5 之間的數字，設定同時下載的數量'\r\n    ],\r\n    _下载按钮1: ['开始下载', 'ダウンロードを開始', 'start download', '開始下載'],\r\n    _下载按钮2: [\r\n        '暂停下载',\r\n        'ダウンロードを一時停止',\r\n        'pause download',\r\n        '暫停下載'\r\n    ],\r\n    _下载按钮3: ['停止下载', 'ダウンロードを停止', 'stop download', '停止下載'],\r\n    _下载按钮4: ['复制 url', 'URLをコピー', 'copy urls', '複製url'],\r\n    _当前状态: ['当前状态 ', '現在の状態 ', 'Now state ', '目前狀態 '],\r\n    _未开始下载: [\r\n        '未开始下载',\r\n        'まだダウンロードを開始していません',\r\n        'Not yet started downloading',\r\n        '未開始下載'\r\n    ],\r\n    _下载进度: [\r\n        '下载进度：',\r\n        'ダウンロードの進行状況：',\r\n        'Download progress: ',\r\n        '下載進度：'\r\n    ],\r\n    _下载线程: ['下载线程：', 'スレッド：', 'Thread: ', '下載執行緒：'],\r\n    _常见问题: ['常见问题', 'よくある質問', 'Common problems', '常見問題'],\r\n    _uuid: [\r\n        '如果下载后的文件名异常，请禁用其他有下载功能的浏览器扩展。',\r\n        'ダウンロード後のファイル名が異常な場合は、ダウンロード機能を持つ他のブラウザ拡張機能を無効にしてください。',\r\n        'If the file name after downloading is abnormal, disable other browser extensions that have download capabilities.',\r\n        '如果下載後的檔案名稱異常，請停用其他有下載功能的瀏覽器擴充功能。'\r\n    ],\r\n    _下载说明: [\r\n        \"下载的文件保存在浏览器的下载目录里。<br>请不要在浏览器的下载选项里选中'总是询问每个文件的保存位置'。<br><b>如果下载后的文件名异常，请禁用其他有下载功能的浏览器扩展。</b><br>QQ群：675174717\",\r\n        'ダウンロードしたファイルは、ブラウザのダウンロードディレクトリに保存されます。<br><b>ダウンロード後のファイル名が異常な場合は、ダウンロード機能を持つ他のブラウザ拡張機能を無効にしてください。</b>',\r\n        'The downloaded file is saved in the browser`s download directory. <br><b>If the file name after downloading is abnormal, disable other browser extensions that have download capabilities.</b>',\r\n        \"下載的檔案儲存在瀏覽器的下載目錄裡。<br>請不要在瀏覽器的下載選項裡選取'總是詢問每個檔案的儲存位置'。<br><b>如果下載後的檔案名稱異常，請停用其他有下載功能的瀏覽器擴充功能。</b><br>QQ群：675174717\"\r\n    ],\r\n    _正在下载中: ['正在下载中', 'ダウンロード中', 'downloading', '正在下載'],\r\n    _下载完毕: [\r\n        '√ 下载完毕!',\r\n        '√ ダウンロードが完了しました',\r\n        '√ Download finished',\r\n        '√ 下載完畢!'\r\n    ],\r\n    _已暂停: [\r\n        '下载已暂停',\r\n        'ダウンロードは一時停止中です',\r\n        'Download is paused',\r\n        '下載已暫停'\r\n    ],\r\n    _已停止: [\r\n        '下载已停止',\r\n        'ダウンロードが停止しました',\r\n        'Download stopped',\r\n        '下載已停止'\r\n    ],\r\n    _已下载: ['已下载', 'downloaded', 'downloaded', '已下載'],\r\n    _抓取完毕: [\r\n        '抓取完毕！',\r\n        'クロールが終了しました！',\r\n        'Crawl finished!',\r\n        '擷取完畢！'\r\n    ],\r\n    _快速下载本页: [\r\n        '快速下载本页作品',\r\n        'この作品をすばやくダウンロードする',\r\n        'Download this work quickly',\r\n        '快速下載本頁作品'\r\n    ],\r\n    _从本页开始抓取new: [\r\n        '从本页开始抓取新作品',\r\n        'このページから新しい作品を入手する',\r\n        'Crawl the new works from this page',\r\n        '從本頁開始擷取新作品'\r\n    ],\r\n    _从本页开始抓取old: [\r\n        '从本页开始抓取旧作品',\r\n        'このページから古い作品を入手する',\r\n        'Crawl the old works from this page',\r\n        '從本頁開始擷取舊作品'\r\n    ],\r\n    _抓取推荐作品: [\r\n        '抓取推荐作品',\r\n        '推奨作品をダウンロードする',\r\n        'Crawl the recommend works',\r\n        '擷取推薦作品'\r\n    ],\r\n    _抓取推荐作品Title: [\r\n        '抓取页面底部的的推荐作品',\r\n        'ページの下部で推奨作品をクロールします',\r\n        'Crawl the recommended works at the bottom of the page',\r\n        '擷取頁面底部的推薦作品'\r\n    ],\r\n    _抓取相关作品: [\r\n        '抓取相关作品',\r\n        '関連作品をダウンロードする',\r\n        'Crawl the related works',\r\n        '擷取相關作品'\r\n    ],\r\n    _相关作品大于0: [\r\n        ' （下载相关作品必须大于 0）',\r\n        ' （ダウンロードする関連作品の数は0より大きくなければならない）',\r\n        '  (Download related works must be greater than 0)',\r\n        ' （下載相關作品必須大於 0）'\r\n    ],\r\n    _默认下载多页: [\r\n        ', 如有多页，默认会下载全部。',\r\n        '複数のページがある場合、デフォルトですべてをダウンロードされます。',\r\n        ', If there are multiple pages, the default will be downloaded.',\r\n        ', 如有多頁，預設會下載全部。'\r\n    ],\r\n    _调整完毕: [\r\n        '调整完毕，当前有{}个作品。',\r\n        '調整が完了し、今、{}の作品があります。',\r\n        'The adjustment is complete and now has {} works.',\r\n        '調整完畢，目前有{}個作品。'\r\n    ],\r\n    _抓取当前作品: [\r\n        '抓取当前作品',\r\n        '現在の作品をクロールする',\r\n        'Crawl the current work',\r\n        '擷取目前作品'\r\n    ],\r\n    _抓取当前作品Title: [\r\n        '抓取当前列表里的所有作品',\r\n        '現在のリスト内のすべての作品をクロールする',\r\n        'Crawl all the works in the current list',\r\n        '擷取目前清單裡的所有作品'\r\n    ],\r\n    _清除多图作品: [\r\n        '清除多图作品',\r\n        '複数の作品を削除する',\r\n        'Remove multi-drawing works',\r\n        '清除多圖作品'\r\n    ],\r\n    _清除多图作品Title: [\r\n        '如果不需要可以清除多图作品',\r\n        '必要がない場合は、複数のグラフを削除することができます',\r\n        'If you do not need it, you can delete multiple graphs',\r\n        '如果不需要可以清除多圖作品'\r\n    ],\r\n    _清除动图作品: [\r\n        '清除动图作品',\r\n        'うごイラ作品を削除する',\r\n        'Remove ugoira work',\r\n        '清除動圖作品'\r\n    ],\r\n    _清除动图作品Title: [\r\n        '如果不需要可以清除动图作品',\r\n        '必要がない場合は、うごイラを削除することができます',\r\n        'If you do not need it, you can delete the ugoira work',\r\n        '如果不需要可以清除動圖作品'\r\n    ],\r\n    _手动删除作品: [\r\n        '手动删除作品',\r\n        '作品を手動で削除する',\r\n        'Manually delete the work',\r\n        '手動刪除作品'\r\n    ],\r\n    _手动删除作品Title: [\r\n        '可以在下载前手动删除不需要的作品',\r\n        'ダウンロードする前に不要な作品を手動で削除することができます',\r\n        'You can manually delete unwanted work before downloading',\r\n        '可以在下載前手動刪除不需要的作品'\r\n    ],\r\n    _退出手动删除: [\r\n        '退出手动删除',\r\n        '削除モードを終了する',\r\n        'Exit manually delete',\r\n        '結束手動刪除'\r\n    ],\r\n    _抓取本页作品: [\r\n        '抓取本页作品',\r\n        'このページをクロールする',\r\n        'Crawl this page works',\r\n        '擷取本頁作品'\r\n    ],\r\n    _抓取本页作品Title: [\r\n        '抓取本页列表中的所有作品',\r\n        'このページをクロールする',\r\n        'Crawl this page works',\r\n        '擷取本頁清單中的所有作品'\r\n    ],\r\n    _抓取本排行榜作品: [\r\n        '抓取本排行榜作品',\r\n        'このリストの作品をクロールする',\r\n        'Crawl the works in this list',\r\n        '擷取本排行榜作品'\r\n    ],\r\n    _抓取本排行榜作品Title: [\r\n        '抓取本排行榜的所有作品，包括现在尚未加载出来的。',\r\n        'まだ読み込まれていないものを含めて、このリストの作品をダウンロードする',\r\n        'Crawl all of the works in this list, including those that are not yet loaded.',\r\n        '擷取本排行榜的所有作品，包括現在尚未載入出來的。'\r\n    ],\r\n    _抓取首次登场的作品: [\r\n        '抓取首次登场作品',\r\n        '初登場作品をダウンロードする',\r\n        'Crawl the debut works',\r\n        '擷取首次登場作品'\r\n    ],\r\n    _抓取首次登场的作品Title: [\r\n        '只下载首次登场的作品',\r\n        '初登場作品のみダウンロードします',\r\n        'Download only debut works',\r\n        '只下載首次登場的作品'\r\n    ],\r\n    _抓取该页面的图片: [\r\n        '抓取该页面的图片',\r\n        'ページの画像をクロールする',\r\n        'Crawl the picture of the page',\r\n        '擷取該頁面的圖片'\r\n    ],\r\n    _抓取相似图片: [\r\n        '抓取相似图片',\r\n        '類似の作品をクロールする',\r\n        'Crawl similar works',\r\n        '擷取相似圖片'\r\n    ],\r\n    _要获取的作品个数2: [\r\n        '您想要获取多少个作品？',\r\n        'いくつの作品をダウンロードしたいですか？',\r\n        'How many works do you want to download?',\r\n        '您想要取得多少個作品？'\r\n    ],\r\n    _数字提示1: [\r\n        '-1, 或者大于 0',\r\n        '-1、または0より大きい',\r\n        '-1, or greater than 0',\r\n        '-1, 或是大於 0'\r\n    ],\r\n    _下载大家的新作品: [\r\n        '下载大家的新作品',\r\n        'みんなの新作をダウンロードする',\r\n        'Download everyone`s new work',\r\n        '下載大家的新作品'\r\n    ],\r\n    _屏蔽设定: ['屏蔽設定', 'ミュート設定', 'Mute settings', '封鎖設定'],\r\n    _举报: ['举报', '報告', 'Report', '回報'],\r\n    _输入id进行抓取: [\r\n        '输入id进行抓取',\r\n        'IDを入力してダウンロードする',\r\n        'Enter id to fetch',\r\n        '輸入id進行擷取'\r\n    ],\r\n    _输入id进行抓取的提示文字: [\r\n        '请输入作品id。如果有多个id，则以换行分割（即每行一个id）',\r\n        'イラストレーターIDを入力してください。 複数のidがある場合は、1行に1つのidを付けます。',\r\n        'Please type the illustration id. If there is more than one id, one id per line.',\r\n        '請輸入作品id。如果有多個id，則以換行分隔（即每行一個id）'\r\n    ],\r\n    _开始抓取: ['开始抓取', 'クロールを開始する', 'Start crawling', '開始擷取'],\r\n    _添加tag: [\r\n        '给未分类作品添加 tag',\r\n        '未分類の作品にtagを追加',\r\n        'Add tag to unclassified work',\r\n        '幫未分類的作品加入 tag'\r\n    ],\r\n    _id不合法: [\r\n        'id不合法，操作取消。',\r\n        'idが不正な、操作はキャンセルされます。',\r\n        'id is illegal, the operation is canceled.',\r\n        'id不合法，動作取消。'\r\n    ],\r\n    _快速收藏: [\r\n        '快速收藏',\r\n        'クイックブックマーク',\r\n        'Quick bookmarks',\r\n        '快速收藏'\r\n    ],\r\n    _启用: ['启用', '有効にする', 'Enable', '啟用'],\r\n    _是否自动下载: [\r\n        '是否自动下载',\r\n        '自動的にダウンロードするかどうか',\r\n        'Whether to download automatically',\r\n        '是否自動下載'\r\n    ],\r\n    _快速下载的提示: [\r\n        '当“开始下载”状态可用时，自动开始下载，不需要点击下载按钮。',\r\n        '「ダウンロードを開始する」ステータスが利用可能になると、ダウンロードは自動的に開始され、ダウンロードボタンをクリックする必要はありません。',\r\n        'When the &quot;Start Downloa&quot; status is available, the download starts automatically and no need to click the download button.',\r\n        '當“開始下載”狀態可用時，自動開始下載，不需要點選下載按鈕。'\r\n    ],\r\n    _转换任务提示: [\r\n        '正在转换 {} 个文件',\r\n        '{} ファイルの変換',\r\n        'Converting {} files',\r\n        '正在轉換 {} 個檔案'\r\n    ],\r\n    _最近更新: ['最近更新', '最近更新する', 'What`s new', '最近更新'],\r\n    _确定: ['确定', '確定', 'Ok', '確定'],\r\n    _file404: [\r\n        '404 错误：文件 {} 不存在。',\r\n        '404エラー：ファイル {} は存在しません。',\r\n        '404 error: File {} does not exist.',\r\n        '404 錯誤：檔案 {} 不存在。'\r\n    ],\r\n    _重置设置: ['重置设置', 'リセット設定', 'Reset Settings', '重設設定'],\r\n    _是否重置设置: [\r\n        '是否重置设置？',\r\n        '設定をリセットしますか？',\r\n        'Do you want to reset the settings?',\r\n        '是否重設設定？'\r\n    ],\r\n    _newver: [\r\n        '有新版本可用',\r\n        '新しいバージョンがあります',\r\n        'A new version is available',\r\n        '有新版本可用'\r\n    ],\r\n    _xzNew350: [\r\n        '可以在搜索页面预览结果了。',\r\n        '検索ページで結果をプレビューできます。',\r\n        'You can preview the results on the search page.',\r\n        '可以在檢索頁面預覽結果了。'\r\n    ],\r\n    _快速下载建立文件夹: [\r\n        '始终建立文件夹',\r\n        'いつもフォルダを作成されます',\r\n        'Always create folder',\r\n        '總是建立資料夾'\r\n    ],\r\n    _快速下载建立文件夹提示: [\r\n        '快速下载时，如果只有一张图片，也会建立文件夹',\r\n        'すばやくダウンロードとき、イラストが一枚だけでも、フォルダも作成されます',\r\n        'When downloading quickly, if there is only one picture, a folder is also created',\r\n        '快速下載時，若只有一張圖片，也會建立資料夾'\r\n    ],\r\n    _设置id范围: [\r\n        '设置 id 范围&nbsp;',\r\n        'ID範囲を設定&nbsp;',\r\n        'Set id range&nbsp;',\r\n        '設定 id 範圍&nbsp;'\r\n    ],\r\n    _设置id范围提示: [\r\n        '您可以输入一个作品 id，抓取比它新或者比它旧的作品',\r\n        '1つの作品IDを入力することで、それより新しいあるいは古い作品をクロールことができます',\r\n        'You can enter a work id and crawl works that are newer or older than it',\r\n        '您可以輸入一個作品 id，擷取比它新或者比它舊的作品。'\r\n    ],\r\n    _大于: ['大于', 'より大きい', 'Bigger than', '大於'],\r\n    _小于: ['小于', 'より小さい', 'Less than', '小於'],\r\n    _设置投稿时间: [\r\n        '设置投稿时间',\r\n        '投稿日時を設定する',\r\n        'Set posting date',\r\n        '設定投稿時間'\r\n    ],\r\n    _设置投稿时间提示: [\r\n        '您可以下载指定时间内发布的作品',\r\n        '指定された時間内に配信された作品をダウンロードすることができます',\r\n        'You can download works posted in a specified period of time',\r\n        '您可以下載指定時間内發佈的作品'\r\n    ],\r\n    _时间范围: ['时间范围', '時間範囲', 'Time range', '時間范围'],\r\n    _必须大于0: [\r\n        '必须大于 0',\r\n        '0 より大きくなければなりません',\r\n        'must be greater than 0',\r\n        '必須大於 0'\r\n    ],\r\n    _开始筛选: ['开始筛选', 'スクリーニング開始', 'Start screening', '開始篩選'],\r\n    _开始筛选Title: [\r\n        '按照设置来筛选当前 tag 里的作品。',\r\n        '現在のtagにある作品を設定によってスクリーニングする',\r\n        'Screen the works in the current tag.',\r\n        '按照設定來篩選當前 tag 裡的作品。'\r\n    ],\r\n    _在结果中筛选: [\r\n        '在结果中筛选',\r\n        '結果の中からスクリーニング',\r\n        'Screen in results',\r\n        '在結果中篩選'\r\n    ],\r\n    _在结果中筛选Title: [\r\n        '您可以改变设置，并在结果中再次筛选。',\r\n        '設定を変えて、結果の中で再びスクリーニングすることができます。',\r\n        'You can change the settings and screen again in the results.',\r\n        '您可以變更設定，并在結果中再次篩選。'\r\n    ],\r\n    _抓取筛选结果: [\r\n        '抓取筛选结果',\r\n        'スクリーニングの結果をクロールする',\r\n        'Crawl the screening results',\r\n        '擷取篩選結果'\r\n    ]\r\n};\r\nexport { langText };\r\n"],"sourceRoot":""}